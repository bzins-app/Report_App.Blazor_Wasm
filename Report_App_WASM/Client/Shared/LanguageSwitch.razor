@using System.Globalization
@using Microsoft.AspNetCore.Builder
@using Microsoft.Extensions.Options
@inject NavigationManager NavigationManager
@inject IOptions<RequestLocalizationOptions> LocOptions
@inject IJSRuntime JSRuntime

<MudTooltip Text="@localizer.Get("Language")">
    <MudMenu Class="mx-1" Icon="@Icons.Material.Outlined.Translate" Color="Color.Default" Direction="Direction.Bottom" OffsetY="true" AnchorOrigin="Origin.BottomLeft"
             Dense="true">
        @foreach (var culture in supportedCultures)
        {
            if (culture.Name == _language)
            {
                <MudMenuItem style="background:var(--mud-palette-primary); color:white">@culture.DisplayName</MudMenuItem>
            }
            else
            {
                <MudMenuItem OnClick="(()=>SetLanguage(culture))">@culture.DisplayName</MudMenuItem>
            }
        }
    </MudMenu>
</MudTooltip>

@code {
    private string _language;
    private CultureInfo[] supportedCultures = new[]
    {
                    new CultureInfo("fr"),
                    new CultureInfo("en"),
                    new CultureInfo("de"),
                    new CultureInfo("nl"),
    };

    protected override void OnInitialized()
    {
        _language = CultureInfo.CurrentCulture.Name;
    }

    private void SetLanguage(CultureInfo value)
    {
        Culture = value;
    }

    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            if (CultureInfo.CurrentCulture != value)
            {
                var js = (IJSInProcessRuntime)JSRuntime;
                js.InvokeVoid("cultureInfo.set", value.Name);

                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
    }
}