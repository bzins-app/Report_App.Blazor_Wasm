@using Align = MudBlazor.Align
@using CronExpressionDescriptor
<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">@Localizer.Get("Hour")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Each selected hour")">
                <p>@Localizer.Get("Each selected hour")</p>
                <MudChipSet @bind-SelectedValues="selectedHours" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var t in listHoursSelect)
                    {
                        <MudChip T="SelectItem" Text="t.Value" Value="t" OnClick="HourSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Every n hours")">
                <MudSlider Value="everyHour" Min="1" Max="23" Color="Color.Info" ValueChanged="(double e) => EachHourSelected(e)">@Localizer.Get("Every") @everyHour @Localizer.Get("hours")</MudSlider>
            </MudTabPanel>
        </MudTabs>
        <MudText Typo="Typo.h6">@Localizer.Get("Minute")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Each selected minute")">
                <p>@Localizer.Get("Each selected minute")</p>
                <MudChipSet @bind-SelectedValues="selectedMinutes" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var t in listMinutesSelect)
                    {
                        <MudChip T="SelectItem" Text="@t.Value" Value="t" OnClick="MinuteSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Every n minutes")">
                <MudSlider Value="everyMinute" Min="1" Max="59" Color="Color.Info" ValueChanged="(double e) => EachMinuteSelected(e)">@Localizer.Get("Every") @everyMinute @Localizer.Get("minutes")</MudSlider>
            </MudTabPanel>
        </MudTabs>
        <MudText Typo="Typo.h6">@Localizer.Get("Others")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Day of week")">
                <p>@Localizer.Get("Day of week")</p>
                <MudChipSet @bind-SelectedValues="selectedDayOfWeek" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var t in listDayOfWeekSelect)
                    {
                        <MudChip T="SelectItem" Text="@t.Value" Value="t" OnClick="DayOfWeekSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Each month")">
                <p>@Localizer.Get("Each month")</p>
                <MudChipSet @bind-SelectedValues="selectedMonth" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var t in listMonthSelect)
                    {
                        <MudChip T="SelectItem" Text="@t.Value" Value="t" OnClick="MonthSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Day of month")">
                <p>@Localizer.Get("Day of month")</p>
                <MudChipSet @bind-SelectedValues="selectedDayOfMonth" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var t in listDayOfMonthSelect)
                    {
                        <MudChip T="SelectItem" Text="@t.Value" Value="t" OnClick="DayOfMonthSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
        </MudTabs>
        <MudText Align="Align.Left">
            <b>@Localizer.Get("Cron expression"): </b>@CronValue
        </MudText>
        <MudText Align="Align.Left">
            <b>@Localizer.Get("Cron description"): </b>@CronDescription
        </MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@(ResetRequested)" Variant="Variant.Filled" Color="Color.Info">@Localizer.Get("Reset")</MudButton>
    </MudCardActions>
</MudCard>

@code {


    private string cronValueItem { get; set; } = string.Empty;

    [Parameter] public string Value { get; set; } = string.Empty;

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private class SelectItem
    {
        public string Value { get; set; } = string.Empty;
        public string DisplayValue { get; set; } = string.Empty;
        public bool Selected { get; set; }
    }

    string CronMinute = "*";
    string CronHour = "*";
    string CronDayOfMonth = "*";
    string CronMonth = "*";
    string CronDayOfWeek = "*";

    string CronValue = string.Empty;
    string CronDescription = string.Empty;

    private double everyMinute = 1;
    private bool listMinutesEmpty = true;
    List<SelectItem> listMinutesSelect = new();

    private double everyHour = 1;
    private bool listHoursEmpty = true;
    List<SelectItem> listHoursSelect = new();
    List<SelectItem> listDayOfMonthSelect = new();
    List<SelectItem> listMonthSelect = new();
    List<SelectItem> listDayOfWeekSelect = new();

    IReadOnlyCollection<SelectItem> selectedMinutes = default!;
    IReadOnlyCollection<SelectItem> selectedHours = default!;
    IReadOnlyCollection<SelectItem> selectedDayOfMonth = default!;
    IReadOnlyCollection<SelectItem> selectedMonth = default!;
    IReadOnlyCollection<SelectItem> selectedDayOfWeek = default!;

    private List<string> TransfromToArray(string val)
    {
        return val.Split(',').ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        List<string> minutesArr = new();
        List<string> hoursArr = new();
        List<string> dayOfMonthArr = new();
        List<string> monthsArr = new();
        List<string> dayOfWeekArr = new();

        if (!string.IsNullOrEmpty(Value) && Value != "* * * * *")
        {
            var splitted = Value.Split(" ");
            if (splitted.Length == 5)
            {
                CronMinute = splitted[0];
                CronHour = splitted[1];
                CronDayOfMonth = splitted[2];
                CronMonth = splitted[3];
                CronDayOfWeek = splitted[4];

                if (CronMinute.Contains("/"))
                {
                    everyMinute = double.Parse(CronMinute.Replace("*/", ""));
                }
                else if (CronMinute != "*")
                {
                    minutesArr = TransfromToArray(CronMinute);
                    listMinutesEmpty = false;
                }

                if (CronHour.Contains("/"))
                {
                    everyHour = double.Parse(CronHour.Replace("*/", ""));
                }
                else if (CronHour != "*")
                {
                    hoursArr = TransfromToArray(CronHour);
                    listHoursEmpty = false;
                }

                if (CronDayOfMonth != "*")
                {
                    dayOfMonthArr = TransfromToArray(CronDayOfMonth);
                }

                if (CronMonth != "*")
                {
                    monthsArr = TransfromToArray(CronMonth);
                }

                if (CronDayOfWeek != "*")
                {
                    dayOfWeekArr = TransfromToArray(CronDayOfWeek);
                }
            }
        }

        await GenerateCronValue();
        InitializeSelectItems();
        SetSelectedItems(minutesArr, listMinutesSelect, ref selectedMinutes);
        SetSelectedItems(hoursArr, listHoursSelect, ref selectedHours);
        SetSelectedItems(dayOfMonthArr, listDayOfMonthSelect, ref selectedDayOfMonth);
        SetSelectedItems(monthsArr, listMonthSelect, ref selectedMonth);
        SetSelectedItems(dayOfWeekArr, listDayOfWeekSelect, ref selectedDayOfWeek);
    }

    private void InitializeSelectItems()
    {
        for (var i = 0; i < 60; i++)
        {
            listMinutesSelect.Add(new SelectItem { Value = i.ToString(), DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }

        for (var i = 0; i < 24; i++)
        {
            listHoursSelect.Add(new SelectItem { Value = i.ToString(), DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }

        for (var i = 1; i < 32; i++)
        {
            listDayOfMonthSelect.Add(new SelectItem { Value = i.ToString(), DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }

        listDayOfMonthSelect.Add(new SelectItem { Value = "L", DisplayValue = "Last day of the month" });
        listDayOfMonthSelect.Add(new SelectItem { Value = "LW", DisplayValue = "Last working day of the month" });

        listMonthSelect = new List<SelectItem>
        {
            new() { Value = "1", DisplayValue = "Jan" },
            new() { Value = "2", DisplayValue = "Feb" },
            new() { Value = "3", DisplayValue = "Mar" },
            new() { Value = "4", DisplayValue = "Apr" },
            new() { Value = "5", DisplayValue = "May" },
            new() { Value = "6", DisplayValue = "Jun" },
            new() { Value = "7", DisplayValue = "Jul" },
            new() { Value = "8", DisplayValue = "Aug" },
            new() { Value = "9", DisplayValue = "Sep" },
            new() { Value = "10", DisplayValue = "Oct" },
            new() { Value = "11", DisplayValue = "Nov" },
            new() { Value = "12", DisplayValue = "Dec" }
        };
        listDayOfWeekSelect = new List<SelectItem>
        {
            new() { Value = "0", DisplayValue = "Sunday" },
            new() { Value = "1", DisplayValue = "Monday" },
            new() { Value = "2", DisplayValue = "Tuesday" },
            new() { Value = "3", DisplayValue = "Wednesday" },
            new() { Value = "4", DisplayValue = "Thursday" },
            new() { Value = "5", DisplayValue = "Friday" },
            new() { Value = "6", DisplayValue = "Saturday" }
        };
    }

    private void SetSelectedItems(List<string> values, List<SelectItem> list, ref IReadOnlyCollection<SelectItem> selected)
    {
        foreach (var t in values)
        {
            list.Where(a => a.Value == t).All(a => a.Selected = true);
        }

        selected = list.Where(a => a.Selected).ToList();
    }

    private async Task GenerateCronValue()
    {
        CronValue = $"{CronMinute} {CronHour} {CronDayOfMonth} {CronMonth} {CronDayOfWeek}";
        CronDescription = ExpressionDescriptor.GetDescription(CronValue);

        cronValueItem = CronValue != "* * * * *" ? CronValue : string.Empty;

        await OnValuesChanged();
    }

    private async Task OnValuesChanged()
    {
        Value = cronValueItem;
        await ValueChanged.InvokeAsync(Value);
    }

    private void ResetList(List<SelectItem> list, ref IReadOnlyCollection<SelectItem> selected)
    {
        foreach (var t in list)
        {
            t.Selected = false;
        }

        selected = null!;
    }

    private async Task EachMinuteSelected(double val)
    {
        everyMinute = val;
        if (!listMinutesEmpty)
        {
            ResetList(listMinutesSelect, ref selectedMinutes);
        }

        CronMinute = "*/" + val;
        await GenerateCronValue();
        StateHasChanged();
    }

    private void ResetListEveryMinute()
    {
        everyMinute = 0;
    }

    private async Task EachHourSelected(double val)
    {
        everyHour = val;
        if (!listHoursEmpty)
        {
            ResetList(listHoursSelect, ref selectedHours);
        }

        CronHour = "*/" + val;
        await GenerateCronValue();
        StateHasChanged();
    }

    private void ResetListEveryHour()
    {
        everyHour = 0;
    }

    private async Task DayOfMonthSelected()
    {
        UpdateSelectedItems(listDayOfMonthSelect, ref selectedDayOfMonth);
        CronDayOfMonth = GetCronExpression(listDayOfMonthSelect);
        await GenerateCronValue();
    }

    private async Task HourSelected()
    {
        UpdateSelectedItems(listHoursSelect, ref selectedHours);
        CronHour = GetCronExpression(listHoursSelect);
        ResetListEveryHour();
        listHoursEmpty = false;
        await GenerateCronValue();
    }

    private async Task MinuteSelected()
    {
        UpdateSelectedItems(listMinutesSelect, ref selectedMinutes);
        CronMinute = GetCronExpression(listMinutesSelect);
        ResetListEveryMinute();
        listMinutesEmpty = false;
        await GenerateCronValue();
    }

    private async Task MonthSelected()
    {
        UpdateSelectedItems(listMonthSelect, ref selectedMonth);
        CronMonth = GetCronExpression(listMonthSelect);
        await GenerateCronValue();
    }

    private async Task DayOfWeekSelected()
    {
        UpdateSelectedItems(listDayOfWeekSelect, ref selectedDayOfWeek);
        CronDayOfWeek = GetCronExpression(listDayOfWeekSelect);
        await GenerateCronValue();
    }

    private void UpdateSelectedItems(List<SelectItem> list, ref IReadOnlyCollection<SelectItem> selected)
    {
        foreach (var t in list)
        {
            t.Selected = false;
        }

        if (selected is { Count: > 0 })
        {
            var selectedValues = selected.Select(a => a.Value).ToList();
            foreach (var t in list.Where(a => selectedValues.Contains(a.Value)))
            {
                t.Selected = true;
            }
        }

        selected = list.Where(a => a.Selected).ToList();
    }

    private string GetCronExpression(List<SelectItem> list)
    {
        var selectedItems = list.Where(a => a.Selected).ToList();
        return selectedItems.Any() ? string.Join(",", selectedItems.Select(a => a.Value)) : "*";
    }

    private async Task ResetRequested()
    {
        ResetList(listMinutesSelect, ref selectedMinutes);
        ResetList(listHoursSelect, ref selectedHours);
        ResetList(listDayOfMonthSelect, ref selectedDayOfMonth);
        ResetList(listMonthSelect, ref selectedMonth);
        ResetList(listDayOfWeekSelect, ref selectedDayOfWeek);
        everyMinute = 0;
        everyHour = 0;
        CronMinute = "*";
        CronHour = "*";
        CronDayOfMonth = "*";
        CronMonth = "*";
        CronDayOfWeek = "*";
        await GenerateCronValue();
        StateHasChanged();
    }

}