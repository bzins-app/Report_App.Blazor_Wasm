@using CronExpressionDescriptor
@using Align = MudBlazor.Align

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">@Localizer.Get("Hour")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Each selected hour")">
                <p>@Localizer.Get("Each selected hour")</p>
                <MudChipSet @bind-SelectedChips="selectedHours" MultiSelection="true" Filter="false">
                    @foreach (var t in listHoursSelect)
                    {
                        <MudChip Text="@t.Value" Default="t.Selected" OnClick="HourSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Every n hours")">
                <MudSlider Value="everyHour" Min="1" Max="23" Color="Color.Info" ValueChanged="(double e)=>EachHourSelected(e)">@Localizer.Get("Every") @everyHour @Localizer.Get("hours")</MudSlider>
            </MudTabPanel>
        </MudTabs>
        <MudText Typo="Typo.h6">@Localizer.Get("Minute")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Each selected minute")">
                <p>@Localizer.Get("Each selected minute")</p>
                <MudChipSet @bind-SelectedChips="selectedMinutes" MultiSelection="true" Filter="false">
                    @foreach (var t in listMinutesSelect)
                    {
                        <MudChip Text="@t.Value" Default="t.Selected" OnClick="MinuteSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Every n minutes")">
                <MudSlider Value="everyMinute" Min="1" Max="59" Color="Color.Info" ValueChanged="(double e)=>EachMinuteSelected(e)">@Localizer.Get("Every") @everyMinute @Localizer.Get("minutes")</MudSlider>
            </MudTabPanel>
        </MudTabs>
        <MudText Typo="Typo.h6">@Localizer.Get("Others")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Day of week")">
                <p>@Localizer.Get("Day of week")</p>
                <MudChipSet @bind-SelectedChips="selectedDayOfWeek" MultiSelection="true" Filter="false">
                    @foreach (var t in listDayOfWeekSelect)
                    {
                        <MudChip Text="@t.Value" Default="t.Selected" OnClick="DayOfWeekSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Each month")">
                <p>@Localizer.Get("Each month")</p>
                <MudChipSet @bind-SelectedChips="selectedMonth" MultiSelection="true" Filter="false">
                    @foreach (var t in listMonthSelect)
                    {
                        <MudChip Text="@t.Value" Default="t.Selected" OnClick="MonthSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Day of month")">
                <p>@Localizer.Get("Day of month")</p>
                <MudChipSet @bind-SelectedChips="selectedDayOfMonth" MultiSelection="true" Filter="false">
                    @foreach (var t in listDayOfMonthSelect)
                    {
                        <MudChip Text="@t.Value" Default="t.Selected" OnClick="DayOfMonthSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
        </MudTabs>
        <MudText Align="Align.Left"><b>@Localizer.Get("Cron expression"): </b>@CronValue</MudText>
        <MudText Align="Align.Left"><b>@Localizer.Get("Cron description"): </b>@CronDescription</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@(ResetRequested)" Variant="Variant.Filled" Color="Color.Info">@Localizer.Get("Reset")</MudButton>
    </MudCardActions>
</MudCard>

@code {

    private string cronValueItem { get; set; } = string.Empty;

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private class SelectItem
    {
        public string Value { get; set; } = string.Empty;
        public string DisplayValue { get; set; } = string.Empty;
        public bool Selected { get; set; }
    }

    string CronMinute = "*";
    string CronHour = "*";
    string CronDayOfMonth = "*";
    string CronMonth = "*";
    string CronDayOfWeek = "*";

    string CronValue = string.Empty;
    string CronDescription = string.Empty;

    private double everyMinute = 1;
    private bool listMinutesEmpty = true;
    List<SelectItem> listMinutesSelect = new();

    private double everyHour = 1;
    private bool listHoursEmpty = true;
    List<SelectItem> listHoursSelect = new();
    List<SelectItem> listDayOfMonthSelect = new();
    List<SelectItem> listMonthSelect = new();
    List<SelectItem> listDayOfWeekSelect = new();

    MudChip[] selectedMinutes = default!;
    MudChip[] selectedHours= default!;
    MudChip[] selectedDayOfMonth= default!;
    MudChip[] selectedMonth = default!;
    MudChip[] selectedDayOfWeek = default!;

    private List<string> TransfromToArray(string val)
    {
        return val.Split(',').ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        List<string> minutesArr = new();
        List<string> hoursArr = new();
        List<string> dayOfMonthArr = new();
        List<string> monthsArr = new();
        List<string> dayOfWeekArr = new();

        if (!string.IsNullOrEmpty(Value) && Value != "* * * * *")
        {
            var splitted = Value.Split(" ");
            if (splitted.Length == 5)
            {
                CronMinute = splitted[0];
                CronHour = splitted[1];
                CronDayOfMonth = splitted[2];
                CronMonth = splitted[3];
                CronDayOfWeek = splitted[4];

                if (CronMinute.Contains("/"))
                {
                    everyMinute = double.Parse(CronMinute.Replace("*/", ""));
                }
                else if (CronMinute != "*")
                {
                    minutesArr = TransfromToArray(CronMinute);
                    listMinutesEmpty = false;
                }

                if (CronHour.Contains("/"))
                {
                    everyHour = double.Parse(CronHour.Replace("*/", ""));
                }
                else if (CronHour != "*")
                {
                    hoursArr = TransfromToArray(CronHour);
                    listHoursEmpty = false;
                }

                if (CronDayOfMonth != "*")
                {
                    dayOfMonthArr = TransfromToArray(CronDayOfMonth);
                }

                if (CronMonth != "*")
                {
                    monthsArr = TransfromToArray(CronMonth);
                }

                if (CronDayOfWeek != "*")
                {
                    dayOfWeekArr = TransfromToArray(CronDayOfWeek);
                }
            }
        }

        await GenerateCronValue();
        for (int i = 0; i < 60; i++)
        {
            listMinutesSelect.Add(new SelectItem { Value = i.ToString(), DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }
        for (int i = 0; i < 24; i++)
        {
            listHoursSelect.Add(new SelectItem { Value = i.ToString(), DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }
        for (int i = 1; i < 32; i++)
        {
            listDayOfMonthSelect.Add(new SelectItem { Value = i.ToString(), DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }

        listDayOfMonthSelect.Add(new SelectItem { Value = "L", DisplayValue = "Last day of the month" });
        listDayOfMonthSelect.Add(new SelectItem { Value = "LW", DisplayValue = "Last working day of the month" });

        listMonthSelect = new List<SelectItem>()
        {
        new() { Value = "1", DisplayValue ="Jan"},
        new() { Value = "2", DisplayValue ="Feb"},
        new() { Value = "3", DisplayValue ="Mar"},
        new() { Value = "4", DisplayValue ="Apr"},
        new() { Value = "5", DisplayValue ="May"},
        new() { Value = "6", DisplayValue ="Jun"},
        new() { Value = "7", DisplayValue ="Jul"},
        new() { Value = "8", DisplayValue ="Aug"},
        new() { Value = "9", DisplayValue ="Sep"},
        new() { Value = "10", DisplayValue ="Oct"},
        new() { Value = "11", DisplayValue ="Nov"},
        new() { Value = "12", DisplayValue ="Dec"}
        };
        listDayOfWeekSelect = new List<SelectItem>()
        {
        new() { Value = "0", DisplayValue ="Sunday"},
        new() { Value = "1", DisplayValue ="Monday"},
        new() { Value = "2", DisplayValue ="Tuesday"},
        new() { Value = "3", DisplayValue ="Wednesday"},
        new() { Value = "4", DisplayValue ="Thursday"},
        new() { Value = "5", DisplayValue ="Friday"},
        new() { Value = "6", DisplayValue ="Saturday"},
        };

        foreach (var t in minutesArr)
        {
            listMinutesSelect.Where(a => a.Value == t).All(a => a.Selected = true);
        }

        foreach (var t in hoursArr)
        {
            listHoursSelect.Where(a => a.Value == t).All(a => a.Selected = true);
        }

        foreach (var t in dayOfMonthArr)
        {
            listDayOfMonthSelect.Where(a => a.Value == t).All(a => a.Selected = true);
        }
        foreach (var t in monthsArr)
        {
            listMonthSelect.Where(a => a.Value == t).All(a => a.Selected = true);
        }
        foreach (var t in dayOfWeekArr)
        {
            listDayOfWeekSelect.Where(a => a.Value == t).All(a => a.Selected = true);
        }
    }

    private async Task GenerateCronValue()
    {
        CronValue = CronMinute + " " + CronHour + " " + CronDayOfMonth + " " + CronMonth + " " + CronDayOfWeek;
        CronDescription = ExpressionDescriptor.GetDescription(CronValue);

        if (CronValue != "* * * * *")
        {
            cronValueItem = CronValue;
        }
        else
        {
            cronValueItem = "";
        }
        await OnValuesChanged();
    }

    public async Task OnValuesChanged()
    {
        Value = cronValueItem;
        await ValueChanged.InvokeAsync(Value);
    }

    private void ResetListMinutesSelect()
    {
        foreach (var t in listMinutesSelect)
        {
            t.Selected = false;
        }
        listMinutesEmpty = true;
        selectedMinutes = null!;
    }

    private void ResetListEveryMinute()
    {
        everyMinute = 0;
    }

    private async Task MinuteSelected()
    {
        foreach (var t in listMinutesSelect)
        {
            t.Selected = false;
        }
        if (selectedMinutes != null && selectedMinutes.Length > 0)
        {
            foreach (var t in selectedMinutes)
            {
                var item = listMinutesSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = listMinutesSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            CronMinute = "*";
        }
        else if (m.Count == 1)
        {
            CronMinute = m.FirstOrDefault()!.Value;
        }
        else
        {
            int i = 0;
            string CronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { CronConstruct = CronConstruct + t.Value; }
                else
                { CronConstruct = CronConstruct + "," + t.Value; }
                i++;
            }
            CronMinute = CronConstruct;
        }
        listMinutesEmpty = false;
        ResetListEveryMinute();
        await GenerateCronValue();
    }

    private async Task EachMinuteSelected(double val)
    {

        everyMinute = val;
        if (!listMinutesEmpty)
        {
            ResetListMinutesSelect();
        }
        CronMinute = "*/" + val;
        await GenerateCronValue();
        StateHasChanged();
    }

    private void ResetListHoursSelect()
    {
        foreach (var t in listHoursSelect)
        {
            t.Selected = false;
        }
        listHoursEmpty = true;
        selectedHours = null!;
    }

    private void ResetListEveryHour()
    {
        everyHour = 0;
    }

    private async Task HourSelected()
    {
        foreach (var t in listHoursSelect)
        {
            t.Selected = false;
        }
        if (selectedHours != null && selectedHours.Length > 0)
        {
            foreach (var t in selectedHours)
            {
                var item = listHoursSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = listHoursSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            CronHour = "*";
        }
        else if (m.Count == 1)
        {
            CronHour = m.FirstOrDefault()!.Value;
        }
        else
        {
            int i = 0;
            string CronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { CronConstruct = CronConstruct + t.Value; }
                else
                { CronConstruct = CronConstruct + "," + t.Value; }
                i++;
            }
            CronHour = CronConstruct;
        }
        listHoursEmpty = false;
        ResetListEveryHour();
        await GenerateCronValue();
    }

    private async Task EachHourSelected(double val)
    {

        everyHour = val;
        if (!listHoursEmpty)
        {
            ResetListHoursSelect();
        }
        CronHour = "*/" + val;
        await GenerateCronValue();
        StateHasChanged();
    }

    private void ResetListDayOfMonthSelect()
    {
        foreach (var t in listDayOfMonthSelect)
        {
            t.Selected = false;
        }
        selectedDayOfMonth = null!;
    }

    private async Task DayOfMonthSelected()
    {
        foreach (var t in listDayOfMonthSelect)
        {
            t.Selected = false;
        }
        if (selectedDayOfMonth != null && selectedDayOfMonth.Length > 0)
        {
            if (!selectedDayOfMonth.Any(a => a.Text == "L" || a.Text == "LW"))
            {
                foreach (var t in selectedDayOfMonth)
                {
                    var item = listDayOfMonthSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                    item!.Selected = true;
                }
            }
            else
            {
                var value = selectedDayOfMonth.Where(a => a.Text == "L" || a.Text == "LW").Select(a => a.Text).FirstOrDefault();
                selectedDayOfMonth = selectedDayOfMonth.Where(a => a.Text == value).ToArray();
                listDayOfMonthSelect.ForEach(a => a.Selected = false);
                var item = listDayOfMonthSelect.FirstOrDefault(a => a.Value.ToString() == value);
                item!.Selected = true;
            }
        }

        var m = listDayOfMonthSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            CronDayOfMonth = "*";
        }
        else if (m.Count == 1)
        {
            CronDayOfMonth = m.FirstOrDefault()!.Value;
        }
        else
        {
            int i = 0;
            string CronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { CronConstruct = CronConstruct + t.Value; }
                else
                { CronConstruct = CronConstruct + "," + t.Value; }
                i++;
            }
            CronDayOfMonth = CronConstruct;
        }
        await GenerateCronValue();
    }

    private void ResetListMonthSelect()
    {
        foreach (var t in listMonthSelect)
        {
            t.Selected = false;
        }
        selectedMonth = null!;
    }

    private async Task MonthSelected()
    {
        foreach (var t in listMonthSelect)
        {
            t.Selected = false;
        }
        if (selectedMonth != null && selectedMonth.Length > 0)
        {
            foreach (var t in selectedMonth)
            {
                var item = listMonthSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = listMonthSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            CronMonth = "*";
        }
        else if (m.Count == 1)
        {
            CronMonth = m.FirstOrDefault()!.Value;
        }
        else
        {
            int i = 0;
            string CronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { CronConstruct = CronConstruct + t.Value; }
                else
                { CronConstruct = CronConstruct + "," + t.Value; }
                i++;
            }
            CronMonth = CronConstruct;
        }
        await GenerateCronValue();
    }

    private void ResetListDayOfWeekSelect()
    {
        foreach (var t in listDayOfWeekSelect)
        {
            t.Selected = false;
        }
        selectedDayOfWeek = null!;
    }

    private async Task DayOfWeekSelected()
    {
        foreach (var t in listDayOfWeekSelect)
        {
            t.Selected = false;
        }
        if (selectedDayOfWeek != null && selectedDayOfWeek.Length > 0)
        {
            foreach (var t in selectedDayOfWeek)
            {
                var item = listDayOfWeekSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }

        }

        var m = listDayOfWeekSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            CronDayOfWeek = "*";
        }
        else if (m.Count == 1)
        {
            CronDayOfWeek = m.FirstOrDefault()!.Value;
        }
        else
        {
            int i = 0;
            string CronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { CronConstruct = CronConstruct + t.Value; }
                else
                { CronConstruct = CronConstruct + "," + t.Value; }
                i++;
            }
            CronDayOfWeek = CronConstruct;
        }
        await GenerateCronValue();
    }

    private async Task ResetRequested()
    {
        ResetListMinutesSelect();
        ResetListEveryMinute();
        ResetListHoursSelect();
        ResetListEveryHour();
        ResetListDayOfMonthSelect();
        ResetListMonthSelect();
        ResetListDayOfWeekSelect();
        CronMinute = "*";
        CronHour = "*";
        CronDayOfMonth = "*";
        CronMonth = "*";
        CronDayOfWeek = "*";
        await GenerateCronValue();
        StateHasChanged();
    }
}