@using Align = MudBlazor.Align
@using CronExpressionDescriptor
<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">@Localizer.Get("Hour")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Each selected hour")">
                <p>@Localizer.Get("Each selected hour")</p>
                <MudChipSet @bind-SelectedChips="_selectedHours" MultiSelection="true" Filter="false">
                    @foreach (var t in _listHoursSelect)
                    {
                        <MudChip Text="@t.Value.ToString()" Default="t.Selected" OnClick="HourSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Every n hours")">
                <MudSlider Value="_everyHour" Min="1" Max="23" Color="Color.Info" ValueChanged="(double e)=>EachHourSelected(e)">@Localizer.Get("Every") @_everyHour @Localizer.Get("hours")</MudSlider>
            </MudTabPanel>
        </MudTabs>
        <MudText Typo="Typo.h6">@Localizer.Get("Minute")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Each selected minute")">
                <p>@Localizer.Get("Each selected minute")</p>
                <MudChipSet @bind-SelectedChips="_selectedMinutes" MultiSelection="true" Filter="false">
                    @foreach (var t in _listMinutesSelect)
                    {
                        <MudChip Text="@t.Value.ToString()" Default="t.Selected" OnClick="MinuteSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Every n minutes")">
                <MudSlider Value="_everyMinute" Min="1" Max="59" Color="Color.Info" ValueChanged="(double e)=>EachMinuteSelected(e)">@Localizer.Get("Every") @_everyMinute @Localizer.Get("minutes")</MudSlider>
            </MudTabPanel>
        </MudTabs>
        <MudText Typo="Typo.h6">@Localizer.Get("Others")</MudText>
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Day of week")">
                <p>@Localizer.Get("Day of week")</p>
                <MudChipSet @bind-SelectedChips="_selectedDayOfWeek" MultiSelection="true" Filter="false">
                    @foreach (var t in _listDayOfWeekSelect)
                    {
                        <MudChip Text="@t.Value.ToString()" Default="t.Selected" OnClick="DayOfWeekSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Each month")">
                <p>@Localizer.Get("Each month")</p>
                <MudChipSet @bind-SelectedChips="_selectedMonth" MultiSelection="true" Filter="false">
                    @foreach (var t in _listMonthSelect)
                    {
                        <MudChip Text="@t.Value.ToString()" Default="t.Selected" OnClick="MonthSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@Localizer.Get(t.DisplayValue)</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Day of month")">
                <p>@Localizer.Get("Day of month")</p>
                <MudChipSet @bind-SelectedChips="_selectedDayOfMonth" MultiSelection="true" Filter="false">
                    @foreach (var t in _listDayOfMonthSelect)
                    {
                        <MudChip Text="@t.Value.ToString()" Default="t.Selected" OnClick="DayOfMonthSelected" Variant="Variant.Text" SelectedColor="Color.Info" Size="Size.Small">@t.DisplayValue</MudChip>
                    }
                </MudChipSet>
            </MudTabPanel>
        </MudTabs>
        <MudText Align="Align.Left"><b>@Localizer.Get("Cron expression"): </b>@_cronValue</MudText>
        <MudText Align="Align.Left"><b>@Localizer.Get("Cron description"): </b>@_cronDescription</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@(()=>ResetRequested())" Variant="Variant.Filled" Color="Color.Info">@Localizer.Get("Reset")</MudButton>
    </MudCardActions>
</MudCard>

@code {

    private string? CronValueItem { get; set; }

    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    private class SelectItem
    {
        public int Value { get; set; }
        public string? DisplayValue { get; set; }
        public bool Selected { get; set; }
    }

    string? _cronMinute = "*";
    string? _cronHour = "*";
    string? _cronDayOfMonth = "*";
    string? _cronMonth = "*";
    string? _cronDayOfWeek = "*";

    string? _cronValue = null!;
    string _cronDescription = null!;

    private double _everyMinute = 1;
    private bool _listMinutesEmpty = true;
    List<SelectItem> _listMinutesSelect = new();

    private double _everyHour = 1;
    private bool _listHoursEmpty = true;
    List<SelectItem> _listHoursSelect = new();
    List<SelectItem> _listDayOfMonthSelect = new();
    List<SelectItem> _listMonthSelect = new();
    List<SelectItem> _listDayOfWeekSelect = new();

    MudChip[]? _selectedMinutes = null!;
    MudChip[]? _selectedHours = null!;
    MudChip[]? _selectedDayOfMonth = null!;
    MudChip[]? _selectedMonth = null!;
    MudChip[]? _selectedDayOfWeek = null!;

    private List<string>? TransfromToArray(string? val)
    {
        return val?.Split(',').ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        List<string>? minutesArr = new();
        List<string>? hoursArr = new();
        List<string>? dayOfMonthArr = new();
        List<string>? monthsArr = new();
        List<string>? dayOfWeekArr = new();

        if (!string.IsNullOrEmpty(Value) && Value != "* * * * *")
        {
            string?[] splitted = Value.Split(" ");
            if (splitted.Length == 5)
            {
                _cronMinute = splitted[0];
                _cronHour = splitted[1];
                _cronDayOfMonth = splitted[2];
                _cronMonth = splitted[3];
                _cronDayOfWeek = splitted[4];

                if (_cronMinute!.Contains("/"))
                {
                    _everyMinute = double.Parse(_cronMinute.Replace("*/", ""));
                }
                else if (_cronMinute != "*")
                {
                    minutesArr = TransfromToArray(_cronMinute);
                    _listMinutesEmpty = false;
                }

                if (_cronHour!.Contains("/"))
                {
                    _everyHour = double.Parse(_cronHour.Replace("*/", ""));
                }
                else if (_cronHour != "*")
                {
                    hoursArr = TransfromToArray(_cronHour);
                    _listHoursEmpty = false;
                }

                if (_cronDayOfMonth != "*")
                {
                    dayOfMonthArr = TransfromToArray(_cronDayOfMonth);
                }

                if (_cronMonth != "*")
                {
                    monthsArr = TransfromToArray(_cronMonth);
                }

                if (_cronDayOfWeek != "*")
                {
                    dayOfWeekArr = TransfromToArray(_cronDayOfWeek);
                }
            }
        }

        await GenerateCronValue();
        for (var i = 0; i < 60; i++)
        {
            _listMinutesSelect.Add(new SelectItem { Value = i, DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }
        for (var i = 0; i < 24; i++)
        {
            _listHoursSelect.Add(new SelectItem { Value = i, DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }
        for (var i = 1; i < 32; i++)
        {
            _listDayOfMonthSelect.Add(new SelectItem { Value = i, DisplayValue = i < 10 ? "0" + i : i.ToString() });
        }

        _listMonthSelect = new List<SelectItem>
        {
        new() { Value = 1, DisplayValue ="Jan"},
        new() { Value = 2, DisplayValue ="Feb"},
        new() { Value = 3, DisplayValue ="Mar"},
        new() { Value = 4, DisplayValue ="Apr"},
        new() { Value = 5, DisplayValue ="May"},
        new() { Value = 6, DisplayValue ="Jun"},
        new() { Value = 7, DisplayValue ="Jul"},
        new() { Value = 8, DisplayValue ="Aug"},
        new() { Value = 9, DisplayValue ="Sep"},
        new() { Value = 10, DisplayValue ="Oct"},
        new() { Value = 11, DisplayValue ="Nov"},
        new() { Value = 12, DisplayValue ="Dec"}
        };
        _listDayOfWeekSelect = new List<SelectItem>
        {
        new() { Value = 0, DisplayValue ="Sunday"},
        new() { Value = 1, DisplayValue ="Monday"},
        new() { Value = 2, DisplayValue ="Tuesday"},
        new() { Value = 3, DisplayValue ="Wednesday"},
        new() { Value = 4, DisplayValue ="Thursday"},
        new() { Value = 5, DisplayValue ="Friday"},
        new() { Value = 6, DisplayValue ="Saturday"}
        };

        foreach (var t in minutesArr!)
        {
            _listMinutesSelect.Where(a => a.Value == int.Parse(t)).All(a => a.Selected = true);
        }

        foreach (var t in hoursArr!)
        {
            _listHoursSelect.Where(a => a.Value == int.Parse(t)).All(a => a.Selected = true);
        }

        foreach (var t in dayOfMonthArr!)
        {
            _listDayOfMonthSelect.Where(a => a.Value == int.Parse(t)).All(a => a.Selected = true);
        }
        foreach (var t in monthsArr!)
        {
            _listMonthSelect.Where(a => a.Value == int.Parse(t)).All(a => a.Selected = true);
        }
        foreach (var t in dayOfWeekArr!)
        {
            _listDayOfWeekSelect.Where(a => a.Value == int.Parse(t)).All(a => a.Selected = true);
        }
    }

    private async Task GenerateCronValue()
    {
        _cronValue = _cronMinute + " " + _cronHour + " " + _cronDayOfMonth + " " + _cronMonth + " " + _cronDayOfWeek;
        _cronDescription = ExpressionDescriptor.GetDescription(_cronValue);

        if (_cronValue != "* * * * *")
        {
            CronValueItem = _cronValue;
        }
        else
        {
            CronValueItem = "";
        }
        await OnValuesChanged();
    }

    public async Task OnValuesChanged()
    {
        Value = CronValueItem;
        await ValueChanged.InvokeAsync(Value);
    }

    private void ResetListMinutesSelect()
    {
        foreach (var t in _listMinutesSelect)
        {
            t.Selected = false;
        }
        _listMinutesEmpty = true;
        _selectedMinutes = null;
    }

    private void ResetListEveryMinute()
    {
        _everyMinute = 0;
    }

    private async Task MinuteSelected()
    {
        foreach (var t in _listMinutesSelect)
        {
            t.Selected = false;
        }
        if (_selectedMinutes != null && _selectedMinutes.Length > 0)
        {
            foreach (var t in _selectedMinutes)
            {
                var item = _listMinutesSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = _listMinutesSelect.FindAll(a =>a.Selected);
        if (!m.Any())
        {
            _cronMinute = "*";
        }
        else if (m.Count == 1)
        {
            _cronMinute = m.FirstOrDefault()?.Value.ToString();
        }
        else
        {
            var i = 0;
            var cronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { cronConstruct = cronConstruct + t.Value; }
                else
                { cronConstruct = cronConstruct + "," + t.Value; }
                i++;
            }
            _cronMinute = cronConstruct;
        }
        _listMinutesEmpty = false;
        ResetListEveryMinute();
        await GenerateCronValue();
    }

    private async Task EachMinuteSelected(double val)
    {

        _everyMinute = val;
        if (!_listMinutesEmpty)
        {
            ResetListMinutesSelect();
        }
        _cronMinute = "*/" + val;
        await GenerateCronValue();
        StateHasChanged();
    }

    private void ResetListHoursSelect()
    {
        foreach (var t in _listHoursSelect)
        {
            t.Selected = false;
        }
        _listHoursEmpty = true;
        _selectedHours = null;
    }

    private void ResetListEveryHour()
    {
        _everyHour = 0;
    }

    private async Task HourSelected()
    {
        foreach (var t in _listHoursSelect)
        {
            t.Selected = false;
        }
        if (_selectedHours != null && _selectedHours.Length > 0)
        {
            foreach (var t in _selectedHours)
            {
                var item = _listHoursSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = _listHoursSelect.FindAll(a =>a.Selected);
        if (!m.Any())
        {
            _cronHour = "*";
        }
        else if (m.Count == 1)
        {
            _cronHour = m.FirstOrDefault()?.Value.ToString();
        }
        else
        {
            var i = 0;
            var cronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { cronConstruct = cronConstruct + t.Value; }
                else
                { cronConstruct = cronConstruct + "," + t.Value; }
                i++;
            }
            _cronHour = cronConstruct;
        }
        _listHoursEmpty = false;
        ResetListEveryHour();
        await GenerateCronValue();
    }

    private async Task EachHourSelected(double val)
    {

        _everyHour = val;
        if (!_listHoursEmpty)
        {
            ResetListHoursSelect();
        }
        _cronHour = "*/" + val;
        await GenerateCronValue();
        StateHasChanged();
    }

    private void ResetListDayOfMonthSelect()
    {
        foreach (var t in _listDayOfMonthSelect)
        {
            t.Selected = false;
        }
        _selectedDayOfMonth = null;
    }

    private async Task DayOfMonthSelected()
    {
        foreach (var t in _listDayOfMonthSelect)
        {
            t.Selected = false;
        }
        if (_selectedDayOfMonth != null && _selectedDayOfMonth.Length > 0)
        {
            foreach (var t in _selectedDayOfMonth)
            {
                var item = _listDayOfMonthSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = _listDayOfMonthSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            _cronDayOfMonth = "*";
        }
        else if (m.Count == 1)
        {
            _cronDayOfMonth = m.FirstOrDefault()?.Value.ToString();
        }
        else
        {
            var i = 0;
            var cronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { cronConstruct = cronConstruct + t.Value; }
                else
                { cronConstruct = cronConstruct + "," + t.Value; }
                i++;
            }
            _cronDayOfMonth = cronConstruct;
        }
        await GenerateCronValue();
    }

    private void ResetListMonthSelect()
    {
        foreach (var t in _listMonthSelect)
        {
            t.Selected = false;
        }
        _selectedMonth = null;
    }

    private async Task MonthSelected()
    {
        foreach (var t in _listMonthSelect)
        {
            t.Selected = false;
        }
        if (_selectedMonth != null && _selectedMonth.Length > 0)
        {
            foreach (var t in _selectedMonth)
            {
                var item = _listMonthSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = _listMonthSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            _cronMonth = "*";
        }
        else if (m.Count == 1)
        {
            _cronMonth = m.FirstOrDefault()?.Value.ToString();
        }
        else
        {
            var i = 0;
            var cronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { cronConstruct = cronConstruct + t.Value; }
                else
                { cronConstruct = cronConstruct + "," + t.Value; }
                i++;
            }
            _cronMonth = cronConstruct;
        }
        await GenerateCronValue();
    }

    private void ResetListDayOfWeekSelect()
    {
        foreach (var t in _listDayOfWeekSelect)
        {
            t.Selected = false;
        }
        _selectedDayOfWeek = null;
    }

    private async Task DayOfWeekSelected()
    {
        foreach (var t in _listDayOfWeekSelect)
        {
            t.Selected = false;
        }
        if (_selectedDayOfWeek != null && _selectedDayOfWeek.Length > 0)
        {
            foreach (var t in _selectedDayOfWeek)
            {
                var item = _listDayOfWeekSelect.FirstOrDefault(a => a.Value.ToString() == t.Text);
                item!.Selected = true;
            }
        }

        var m = _listDayOfWeekSelect.FindAll(a => a.Selected);
        if (!m.Any())
        {
            _cronDayOfWeek = "*";
        }
        else if (m.Count == 1)
        {
            _cronDayOfWeek = m.FirstOrDefault()?.Value.ToString();
        }
        else
        {
            var i = 0;
            var cronConstruct = "";
            foreach (var t in m)
            {
                if (i == 0)
                { cronConstruct = cronConstruct + t.Value; }
                else
                { cronConstruct = cronConstruct + "," + t.Value; }
                i++;
            }
            _cronDayOfWeek = cronConstruct;
        }
        await GenerateCronValue();
    }

    private async Task ResetRequested()
    {
        ResetListMinutesSelect();
        ResetListEveryMinute();
        ResetListHoursSelect();
        ResetListEveryHour();
        ResetListDayOfMonthSelect();
        ResetListMonthSelect();
        ResetListDayOfWeekSelect();
        _cronMinute = "*";
        _cronHour = "*";
        _cronDayOfMonth = "*";
        _cronMonth = "*";
        _cronDayOfWeek = "*";
        await GenerateCronValue();
        StateHasChanged();
    }
}
