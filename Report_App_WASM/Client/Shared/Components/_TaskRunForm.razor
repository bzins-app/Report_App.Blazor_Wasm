@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IdentityAuthenticationStateProvider IdentityProvider

<MudIconButton Icon="@Icons.Outlined.Sync" OnClick="(()=>OpenRunConfirmationComponent())"><MudText>@Localizer.Get("Run")</MudText></MudIconButton>

@code {
    [Parameter]
    public TaskHeaderDTO Item { get; set; }

    private string _email;

    private async Task OpenRunConfirmationComponent()
    {
        bool sendForReportRecipients = false;
        List<string> userEmail = new();
        List<string> recipientsEmails = new();

        var currentUserEmail = (await IdentityProvider.GetUserInfo()).UserMail;
        userEmail.Add(currentUserEmail);
        _email = currentUserEmail;

        //var recipients = await _context.TaskEmailRecipient.Where(a => a.TaskHeader.TaskHeaderId == Item.TaskHeaderId).AsNoTracking().FirstOrDefaultAsync();
        //if (Item != null&&recipients!=null)
        //{
        //    if (!string.IsNullOrEmpty(recipients.Email))
        //    {
        //        var emails = JsonSerializer.Deserialize<List<EmailRecipient>>(recipients.Email);
        //        recipientsEmails.AddRange(emails.Where(a => a.BCC == false).Select(a => a.Email).ToList());
        //    }
        //}

        var queryParameters = new List<QueryCommandParameter>();
        if (Item.QueryParameters != "[]" && !string.IsNullOrEmpty(Item.QueryParameters))
        {
            queryParameters = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Item.QueryParameters);
        }

        var parameters = new DialogParameters { ["userEmail"] = userEmail, ["recipientsEmails"] = recipientsEmails, ["queryParameters"] = queryParameters };
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = false, DisableBackdropClick = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<_ManualRun>(Localizer.Get("Confirm manual job"), parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            List<EmailRecipient> emails = new();
            var feedback = (Tuple<bool, List<QueryCommandParameter>>)result.Data;
            bool resultValidation = feedback.Item1;
            queryParameters = feedback.Item2;
            if (resultValidation)
            {
                // var emailsRecipients = JsonSerializer.Deserialize<List<EmailRecipient>>(recipients.Email);
                // _BGW.RunManuallyTask(Item.TaskHeaderId, user.Email, emailsRecipients, queryParameters);
            }
            else
            {
                emails.Add(new EmailRecipient { Email = _email, BCC = false });
                RunTaskManually payload = new RunTaskManually { TaskHeaderId = Item.TaskHeaderId, Emails = emails, CustomQueryParameters = queryParameters };
                await DataService.PostValues(payload, "RunManually", ApiControllers.BackgroudWorkerApi);
            }
            Snackbar.Add(Localizer.Get("Alert") + " " + Localizer.Get("Job on going"), Severity.Success);
        }
    }
}