@inject IJSRuntime JsRuntime
@implements IDisposable

<MudDialog>
    <DialogContent >
        @if (DisplayTagMessage)
        {
            <p>
                <b> @Localizer.Get("Warning: keep the {0} tag inner the message to see the values ​​of the variable") </b>
            </p>
        }
        <textarea id="@_id"
          value="@HtmlText"></textarea>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmText" Class="px-10">@Localizer.Get("Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public string? HtmlText { get; set; }

    [Parameter]
    public bool DisplayTagMessage { get; set; }

    private DotNetObjectReference<_TextEditor>? _objRef;
    string? _id;

    readonly string _uid = Guid.NewGuid().ToString().ToLower().Replace("-", "");

    protected override void OnInitialized()
    {
        _id = $"CKEditor_{_uid}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("loadScript", "https://cdn.ckeditor.com/ckeditor5/35.4.0/classic/ckeditor.js");
            await JsRuntime.InvokeVoidAsync("loadScript", "/js/CKEditorInterop.js");
            _objRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("CKEditorInterop.init", _id, _objRef);
        }
    }

    [JSInvokable]
    public void EditorDataChanged(string? data)
    {
        HtmlText = data;
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private void ConfirmText()
    {
        MudDialog?.Close(DialogResult.Ok(HtmlText));
    }

    public void Dispose()
    {
        _objRef?.Dispose();
        GC.SuppressFinalize(this);
    }

}