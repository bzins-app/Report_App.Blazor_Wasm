@inject IJSRuntime JSRuntime


<MudDialog>
    <DialogContent >
        @if (displayTagMessage)
        {
            <p><b> @localizer.Get("Warning: keep the {0} tag inner the message to see the values ​​of the variable") </b></p>
        }
        <textarea id="@id"
          value="@htmlText"></textarea>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@localizer.Get("Cancel")</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmText" Class="px-10">@localizer.Get("Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string htmlText { get; set; }
    [Parameter]
    public bool displayTagMessage { get; set; }
    private DotNetObjectReference<_TextEditor> objRef;
    string id;

    readonly string uid = Guid.NewGuid().ToString().ToLower().Replace("-", "");

    protected override void OnInitialized()
    {
        id = $"CKEditor_{uid}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScript", "https://cdn.ckeditor.com/ckeditor5/16.0.0/classic/ckeditor.js");
            await JSRuntime.InvokeVoidAsync("loadScript", "/js/CKEditorInterop.js");
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("CKEditorInterop.init", id, objRef);
        }
    }

    [JSInvokable]
    public void EditorDataChanged(string data)
    {
        htmlText = data;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void ConfirmText()
    {
        MudDialog.Close(DialogResult.Ok(htmlText));
    }
}