@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudIconButton Icon="@Icons.Material.Outlined.FileDownload" OnClick="OpenRunConfirmationComponent" Disabled="Item!.FileStorageLocationId == 0">
    <MudText>@Localizer.Get("Drop file")</MudText>
</MudIconButton>

@code {

    [Parameter] public ScheduledTaskDto? Item { get; set; }

    private async Task OpenRunConfirmationComponent()
    {
        var feedback = await DialogService.ShowMessageBox(
            Localizer.Get("Confirm manual job"),
            Localizer.Get("Caution !") + " " + Localizer.Get("Are you sure you want to create a file to the directory? It could interfer with other processes"),
            Localizer.Get("Validate"), cancelText: Localizer.Get("Cancel"));
        var result = feedback != null;
        if (result)
        {
            var payload = new RunTaskManually { TaskHeaderId = Item!.ScheduledTaskId, Emails = new List<EmailRecipient>(), QueryCommandParameters = new List<QueryCommandParameter>(), GenerateFiles = true };
            await DataService.PostValues(payload, "RunManually", ApiControllers.BackgroudWorkerApi);
            Snackbar.Add(Localizer.Get(Item.TypeName) + " " + Localizer.Get("Job on going"), Severity.Success);
        }

        StateHasChanged();
    }

}