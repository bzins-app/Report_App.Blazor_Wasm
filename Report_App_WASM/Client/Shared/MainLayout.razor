@inherits LayoutComponentBase
@inject IJSRuntime JsInterop
@using Report_App_WASM.Client.Shared.Theme
@implements IDisposable
@attribute [Authorize]

<MudThemeProvider IsDarkMode="_isDarkMode" Theme="_appTheme"/>
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.Small"
                   CloseButton="true"
                   BackdropClick="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="false"/>
<MudSnackbarProvider/>
<MudPopoverProvider/>

<MudLayout>
    <MudAppBar Color="Color.Surface">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle"/>
        <img src="@_appConst?.ApplicationLogo" alt="@_appConst?.ApplicationName" style="max-height: 55px; max-width: 95%; padding-left: 10px;padding-right: 10px;" />
        @if (_isDemo)
        {
            <MudButton Variant="Variant.Filled" Href="/mailcatcher" Target="_blank" Size="Size.Small" Color="Color.Warning" Style="text-transform: none">@Localizer.Get("Open demo emails view")</MudButton>
        }
        <MudSpacer/>
        <MudTooltip Duration="1000" Text="@(_isDarkMode ? Localizer.Get("Switch to Light Theme") : Localizer.Get("Switch to Dark Theme"))">
            <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Rounded.LightMode : Icons.Material.Outlined.DarkMode)" Color="Color.Inherit" OnClick="@(() => DarkModeChange(!UserAppTheme.DarkTheme))"/>
        </MudTooltip>
        <LanguageSwitch/>
        <LoginDisplay/>
    </MudAppBar>
    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="DrawerClipMode.Never">
                <NavMenu IsDarkMode="_isDarkMode"/>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4" Style="padding-bottom: 10px">
            @Body
        </MudContainer>
    </MudMainContent>
    <MudPopup Open="_notConnnectedStatus" Color="Color.Secondary" Text="@Localizer.Get("It looks like you are offline or need to log back in")" Icon="@Icons.Material.Filled.Info" PopupPosition="PopupPosition.Bottom" Padding="0" EnableAnimation="true">
        <ActionContent>
            <div>
                <MudButton Variant="Variant.Filled" OnClick="@(() => _notConnnectedStatus = false)">@Localizer.Get("Accept")</MudButton>
            </div>
        </ActionContent>
    </MudPopup>
</MudLayout>

@code {
    private readonly MudTheme _appTheme = ApplicationTheme.ApplicationMudTheme();
    private bool _isDarkMode;
    private bool _drawerOpen = true;
    private ApplicationConstantsValues? _appConst;
    private bool _notConnnectedStatus;
    private bool _isDemo = false;

    protected override async Task OnInitializedAsync()
    {
        _appConst = await AppService.GetApplicationConstantsValues();
        _isDarkMode = UserAppTheme.DarkTheme;
        DataService.NotifyNotConnected += ChangeConnectionStatus;
        _isDemo = ApplicationInfo.Demo;
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task DarkModeChange(bool dark)
    {
        _isDarkMode = dark;
        UserAppTheme.DarkTheme = dark;
        await JsInterop.InvokeVoidAsync("AppTheme.set", dark ? "Dark" : "Light");
    }

    private void ChangeConnectionStatus(bool value)
    {
        _notConnnectedStatus = value;
        StateHasChanged();
    }

    public void Dispose()
    {
        DataService.NotifyNotConnected -= ChangeConnectionStatus;
    }

}