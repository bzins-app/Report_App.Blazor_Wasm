@page "/ResetPassword"
@using System.ComponentModel.DataAnnotations
@layout _LoginLayout
@inject NavigationManager NavigationManager

<PageTitle>@Localizer.Get("Reset password")</PageTitle>


@if (_validated)
{

    <div class="auth-wrapper offline">
        <div class="text-center">
            <h1 class="mb-4">@Localizer.Get("Reset password confirmation")</h1>
            <h5 class="text-muted mb-4">@Localizer.Get("Your password has been reset.")</h5>
            <button @onclick="BacktoHome" class="btn btn-primary mb-4">@Localizer.Get("Back to home")</button>
        </div>
    </div>

}
else
{
    @if (string.IsNullOrEmpty(error))
    {
        <MudForm Model="Input"  @ref="_form">
            <div class="col-sm-10">
                <div class="mb-4">
                    <i class="feather icon-mail auth-icon"></i>
                </div>
                <h3 class="mb-4">@Localizer.Get("Reset password")</h3>
                <div asp-validation-summary="All" class="text-danger"></div>
                <input @bind="Input!.Code" type="hidden" />
                <div class="input-group mb-3">
                    <input @bind="Input!.Email" class="form-control" placeholder="@Localizer.Get("Email")">
                </div>
                <div class="input-group mb-3">
                    <input @bind="Input.Password" class="form-control" placeholder="@Localizer.Get("Password")">
                </div>
                <div class="input-group mb-3">
                    <input @bind="Input.ConfirmPassword" class="form-control" placeholder="@Localizer.Get("Confirm Password")">
                </div>
                <button @onclick="ValidateChange" class="btn btn-primary mb-4 shadow-2">@Localizer.Get("Reset password")</button>
            </div>
        </MudForm>
    }
    else
    {
        <h5 class="text-muted mb-4">@Localizer.Get(error)</h5>
    }
}

@code {

    [SupplyParameterFromQuery]
    private string code { get; set; } = string.Empty;
    private string? error;
    private InputModel? Input { get; set; }
    private MudForm? _form;

    private bool _validated;

    private class InputModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }

        public string? Code { get; set; }
    }

    protected override void OnInitialized()
    {
        if (code == null)
        {
            error = "A code must be supplied for password reset.";
        }
        else
        {
            Input = new InputModel
                {
                    Code = code
                };
        }
    }

    private async Task ValidateChange()
    {
        await _form?.Validate()!;
        if(_form.IsValid)
        {
            var payload = new UserPayload { UserMail = Input?.Email, UserName = Input?.Code, Password = Input?.Password };
            var result = await DataService.PostValues(payload, "ResetPassword", ApiControllers.AuthorizeApi);
            _validated = result.Success;
            error = result.Message;
        }
    }

    private void BacktoHome()
    {
        NavigationManager.NavigateTo("/login");
    }
}