@page "/login"
@layout _LoginLayout
@inject NavigationManager NavigationManager
@inject IdentityAuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<PageTitle>@Localizer.Get("Log in")</PageTitle>

@if (_ldap)
{
    <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="LoginParameters">
        <DataAnnotationsValidator/>
        <div class="row" style="padding-left: 1rem">
            <div class="mb-4 col-2">
                <img src="/images/windows-Logo.png" alt="" style="max-height: 40px; max-width: 95%;"/>
            </div>
            <div class="col-10">
                <h3 class="mb-4">@Localizer.Get("Windows authentication")</h3>
            </div>
        </div>

        <div class="input-group mb-3">
            <InputText id="inputUsername" class="form-control" @bind-Value="LoginParameters.UserName" autofocus placeholder="@Localizer.Get("Firstname.Lastname")"/>
        </div>
        <ValidationMessage For="@(() => LoginParameters.UserName)"/>
        <div class="input-group mb-4">
            <InputText type="password" id="inputPassword" class="form-control" placeholder="@Localizer.Get("Password")" @bind-Value="LoginParameters.Password"/>
        </div>
        <ValidationMessage For="@(() => LoginParameters.Password)"/>
@*         <div class="form-group text-left" style="padding-bottom: 10px">
            <div class="checkbox checkbox-fill d-inline">
                <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@LoginParameters.RememberMe"/>
                <label for="checkbox-fill-a1" class="cr">@Localizer.Get("Save credentials")</label>
            </div>
        </div> *@
        <div>
            <button type="submit" class="btn btn-primary shadow-2 mb-4">@Localizer.Get("Login")</button>
            <p class="mb-2 text-muted">
                @Localizer.Get("Need to connect locally?") <MudLink id="local-login" OnClick="ChangeTypeLogin">@Localizer.Get("Local login")</MudLink>
            </p>
        </div>

        <label class="text-danger">@Error</label>
    </EditForm>
}
else
{
    <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="LoginParameters">
        <DataAnnotationsValidator/>
        <h3 class="mb-4">@Localizer.Get("Login")</h3>

        <div class="input-group mb-3">
            <InputText id="inputUsername" class="form-control" @bind-Value="LoginParameters.UserName" autofocus placeholder="@Localizer.Get("Email")"/>
        </div>
        <ValidationMessage For="@(() => LoginParameters.UserName)"/>
        <div class="input-group mb-4">
            <InputText type="password" id="inputPassword" class="form-control" placeholder="@Localizer.Get("Password")" @bind-Value="LoginParameters.Password"/>
        </div>
        <ValidationMessage For="@(() => LoginParameters.Password)"/>
@*         <div class="form-group text-left" style="padding-bottom: 10px">
            <div class="checkbox checkbox-fill d-inline">
                <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@LoginParameters.RememberMe"/>
                <label for="checkbox-fill-a1" class="cr">@Localizer.Get("Save credentials")</label>
            </div>
        </div> *@
        <div>
            <button type="submit" class="btn btn-primary shadow-2 mb-4">@Localizer.Get("Login")</button>
        </div>
        <p class="mb-2 text-muted">
            @Localizer.Get("Forgot password?") <MudLink OnClick="RedirectForgotPassword" id="forgot-password">@Localizer.Get("Reset")</MudLink>
        </p>

        <label class="text-danger">@Error</label>

    </EditForm>
}


@code {
    LoginParameters LoginParameters { get; } = new();
    string? Error { get; set; }
    bool _ldap;

    protected override async Task OnInitializedAsync()
    {
        var values = await Http.GetFromJsonAsync<ApplicationConstantsValues>($"{ApiControllers.ApplicationParametersApi}ApplicationConstants");
        if (values != null) _ldap = values.LdapLogin;
    }

    void ChangeTypeLogin()
    {
        _ldap = false;
    }

    async Task OnSubmit()
    {
        Error = null;
        try
        {
            if (_ldap)
            {
                await AuthStateProvider.LoginLdap(LoginParameters);
            }
            else
            {
                await AuthStateProvider.Login(LoginParameters);
            }

            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private void RedirectForgotPassword()
    {
        NavigationManager.NavigateTo("/ForgotPassword");
    }

}