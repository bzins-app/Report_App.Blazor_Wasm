@page "/ReportsPerActivity/{ActivityName}/{ActivityId:int}"
@implements IAsyncDisposable
@inject NavigationManager uriHelper
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>@Localizer.Get("Run reports manually"): @ActivityName</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Run reports manually"): @ActivityName</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@Localizer.Get("Refresh")" Disabled="@rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" Disabled="@rendering" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid ItemsProvider="@_ItemsProvider" BuildInFilter="true" Pagination="@pagination" FieldsContent="@Translations" @ref="_grid">

                    <PropertyColumn Property="@(p => p.TaskName)" Title="@Localizer.Get("Report title")" Sortable="true" />
                    @if (typeTask == TaskType.Report.ToString())
                    {
                        <PropertyColumn Property="@(p => p.TypeFile)" Title="@Localizer.Get("Type of file")" Sortable="true" />
                    }
                    <TemplateColumn Title="@Localizer.Get("Run manually")">
                        <_TaskRunForm Item="context" />
                    </TemplateColumn>
                    @if (typeTask == TaskType.Report.ToString())
                    {
                        <TemplateColumn Title="@Localizer.Get("Create file manually")">
                            <_TaskDropFileForm Item="context" />
                        </TemplateColumn>
                        <PropertyColumn Property="@(p => p.ReportsRetentionInDays)" Title="@Localizer.Get("Archiving duration in days")" Sortable="true" />
                    }
                    <PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true" />
                </SimpleGrid>
            </div>
            <Paginator Value="@pagination" FieldsContent="@Translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
    #nullable enable
    [Parameter] public int? ActivityId { get; set; } = default!;
    [Parameter] public string? ActivityName { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }=default!;
    private readonly string typeTask = TaskType.Report.ToString();
    GridItemsProvider<TaskHeaderDTO>? _ItemsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent Translations = default!;
    SimpleGrid<TaskHeaderDTO> _grid = default!;
    private bool _processing = false;
    private bool rendering = false;

    protected override async Task OnParametersSetAsync()
    {
        var user = (await authenticationStateTask).User;
        if (!user.IsInRole(ActivityName) && !user.IsInRole("Admin"))
        {
            uriHelper.NavigateTo("/403");
        }
    }

    protected override void OnInitialized()
    {
        _ItemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<TaskHeaderDTO>(), 0);
            }
            return GridItemsProviderResult.From(response.Value, response.Count);
        };
        Translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<TaskHeaderDTO>?> GetRemoteData(GridItemsProviderRequest<TaskHeaderDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var OdataSort = _grid?.GetODataSortValues();
        var OdataPagination = _grid?.GetODataPaginationValues();
        var OdataFilters = _grid?.GetODataFilterValues();
        string url = $"odata/TaskHeader?";


        string customFilters = $"TypeName eq '{typeTask}'";
        if (ActivityId.HasValue)
        {
            customFilters += $" and  ActivityName eq tolower('{ActivityName}')";
        }

        url += $"$count=true";
        if (!string.IsNullOrEmpty(OdataPagination))
        {
            url += "&" + OdataPagination;
        }
        if (!string.IsNullOrEmpty(OdataSort))
        {
            url += "&" + OdataSort;
        }
        if (!string.IsNullOrEmpty(OdataFilters))
        {
            url += "&" + OdataFilters + " and " + customFilters;
        }
        else
        {
            url += "&$filter=" + customFilters;
        }

        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<TaskHeaderDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        rendering = true;
        await _grid.RefreshDataAsync();
        rendering = false;
    }

    private async Task RemoveFilters()
    {
        rendering = true;
        await _grid.RemoveFilters();
        rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}
