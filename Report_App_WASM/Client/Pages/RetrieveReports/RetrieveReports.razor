@page "/RetrieveReports/{ActivityName}/{ActivityId:int}"
@implements IAsyncDisposable
@inject HttpClient Http
@inject NavigationManager uriHelper
@attribute [Authorize]

<PageTitle>@title</PageTitle>

<ErrorBoundary>
    <ChildContent>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">@localizer.Get("An error has occurred"): @errorMessage</MudText>
        }
        <MudCard Elevation="6">
            <MudCardHeader>
                <MudText Typo="Typo.h6">@title</MudText>
                <MudSpacer />
                <MudStack Row="true">
                    <MudIconButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(OnRefresh)"
                                   Icon="@Icons.Material.Filled.Refresh" Title="@localizer.Get("Refresh")" Disabled="@rendering" />
                    <MudIconButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(RemoveFilters)"
                                   Icon="@Icons.Material.Filled.FilterAltOff" Title="@localizer.Get("Remove filters")" Disabled="@rendering"/>
                    <MudIconButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(ExtractElements)"
                                   Icon="@Icons.Material.Filled.Download" Title="@localizer.Get("Download")" Disabled="_processing" />
                </MudStack>
            </MudCardHeader>
            <MudCardContent>
                <div style="overflow:auto">
                    <SimpleGrid ItemsProvider="@_ItemsProvider" BuildInFilter="true" Pagination="@pagination" FieldsContent="@Translations" @ref="_grid">
                        <PropertyColumn Property="@(p => p.ActivityName)" Title="@localizer.Get("Activity name")" Sortable="true" />
                        <PropertyColumn Property="@(p => p.CreatedAt)" Title="@localizer.Get("Created at")" Sortable="true" />
                        <PropertyColumn Property="@(p => p.ReportName)" Title="@localizer.Get("Report name")" Sortable="true" />
                        <PropertyColumn Property="@(p => p.SubName)" Title="@localizer.Get("Report sub name")" Sortable="true" />
                        <TemplateColumn Title="@localizer.Get("Download")">
                            <MudIconButton Href="@context.ReportPath" Target="_blank" Icon="@Icons.Material.Filled.Download" aria-label="@localizer.Get("Download")" />
                        </TemplateColumn>
                        <PropertyColumn Property="@(p => p.FileType)" Title="@localizer.Get("File type")" Sortable="true" />
                        <PropertyColumn Property="@(p => p.FileName)" Title="@localizer.Get("File name")" Sortable="true" />
                        <PropertyColumn Property="@(p => p.FileSizeInMB)" Title="@localizer.Get("File size in MB")" Sortable="true" />
                    </SimpleGrid>
                </div>
                <Paginator Value="@pagination" FieldsContent="@Translations" />
            </MudCardContent>
        </MudCard>
    </ChildContent>
</ErrorBoundary>

@code
{
    #nullable enable
    [Parameter] public int ActivityId { get; set; }
    [Parameter] public string ActivityName { get; set; }
   // [CascadingParameter]
   // private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    private string title;
    GridItemsProvider<ApplicationLogReportResultDTO>? _ItemsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent Translations = default!;
    private bool _processing = false;
    SimpleGrid<ApplicationLogReportResultDTO> _grid = default!;
    private bool rendering = false;
    private string errorMessage = default!;

    protected override async Task OnParametersSetAsync()
    {
        //var user = (await authenticationStateTask).User;
        //if (!user.IsInRole(ActivityName) && !user.IsInRole("Admin"))
        //{
        //    uriHelper.NavigateTo("/403");
        //}
        title = localizer.Get("Retrieve reports") + ": " + ActivityName;
    }

    protected override void OnInitialized()
    {
        _ItemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ApplicationLogReportResultDTO>(), 0);
            }
            return GridItemsProviderResult.From(response.Value, response.Count);
        };
        Translations = appService.GetGridTranslations();
    }

    private async Task<ApiResponse<ApplicationLogReportResultDTO>?> GetRemoteData(GridItemsProviderRequest<ApplicationLogReportResultDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var OdataQuery = _grid?.GetODataQuery();
        string url = "odata/ReportResultLogs?";
        if (string.IsNullOrEmpty(OdataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += OdataQuery;
        }
        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<ApplicationLogReportResultDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        rendering = true;
        await _grid.RefreshDataAsync();
        rendering = false;
    }

    private async Task ExtractElements()
    {
        rendering = true;
        ODataExtractPayload Values = new ODataExtractPayload { FunctionName = "ReportResultLogs", FilterValues = _grid?.GetODataFilterValues(), SortValues = _grid?.GetODataSortValues(), FileName = "Reports result logs" };
        await dataService.ExtractGridLogs(Values);
        rendering = false;
    }

    private async Task RemoveFilters()
    {
        rendering = true;
        await _grid.RemoveFilters();
        rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}