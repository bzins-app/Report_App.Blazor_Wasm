@page "/SystemLogs"
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("System logs")</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("System logs")</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" Title="@Localizer.Get("Download")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" @ref="_grid" RowClick="@RowClicked" TGridItem="ApplicationLogSystemDto" FieldsContent="_translations">
                    <PropertyColumn Property="@(p => p!.TimeStampAppHour)" Title="@Localizer.Get("Timestamp")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.EventId)" Title="@Localizer.Get("Event Id")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.Id)" Title="@Localizer.Get("Id")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.Level)" Title="@Localizer.Get("Level")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.Path)" Title="@Localizer.Get("Path")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.Name)" Title="@Localizer.Get("Name")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.User)" Title="@Localizer.Get("User name")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p!.Host)" Title="@Localizer.Get("Host")" Sortable="true"/>
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering"/>
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
        <MudCardContent>
            <div style="overflow: auto">
                <MudText Typo="Typo.h6">@Localizer.Get("System log message")</MudText>
                @if (_values.Message == null)
                {
                    <p class="muted">
                        @Localizer.Get("Select a log to display the message")
                    </p>
                }
                else
                {
                    <p>
                        <b>@Localizer.Get("Browser"):</b>
                    </p>
                    <p>@_values.Browser</p>
                    <p>
                        <b>@Localizer.Get("Platform"):</b>
                    </p>
                    <p>@_values.Platform</p>
                    <p>
                        <b>@Localizer.Get("Message"):</b>
                    </p>
                    <p>@_values.Message</p>
                }
            </div>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>


@code
{
    GridItemsProvider<ApplicationLogSystemDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations;
    SimpleGrid<ApplicationLogSystemDto>? _grid;
    private bool _rendering;
    ErrorDetails _values = new();

    private class ErrorDetails
    {
        public string? Message { get; set; }
        public string? Browser { get; set; }
        public string? Platform { get; set; }
    }


    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ApplicationLogSystemDto>(), 0);
            }
            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<ApplicationLogSystemDto>?> GetRemoteData(GridItemsProviderRequest<ApplicationLogSystemDto> req)
    {
    // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
    // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        var url = "odata/SystemLogs?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += "$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }
        try
        {
            return await DataService.GetODataValues<ApplicationLogSystemDto>(url, req.CancellationToken);
        }
        catch
        {
    // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid?.RefreshDataAsync()!;
        _rendering = false;
    }

    private async Task ExtractElements()
    {
        _rendering = true;
        var values = new ODataExtractPayload { FunctionName = "SystemLogs", FilterValues = _grid?.GetODataFilterValues(), SortValues = _grid?.GetODataSortValues(), FileName = "System logs" };
        await DataService.ExtractGridLogs(values);
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid?.RemoveFilters()!;
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_grid != null) await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    void RowClicked(SimpleGridRowClickEventArgs<ApplicationLogSystemDto> args)
    {
        _values.Browser = args.Item.Browser;
        _values.Platform = args.Item.Platform;
        _values.Message = args.Item.Message;
    }
}