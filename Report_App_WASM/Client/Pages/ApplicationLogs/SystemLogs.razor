@page "/SystemLogs"
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Admin, Supervisor")]
@inject HttpClient Http

<PageTitle>@localizer.Get("System logs")</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@localizer.Get("System logs")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@localizer.Get("Refresh")" Disabled="@rendering" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@localizer.Get("Remove filters")" Disabled="@rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" Title="@localizer.Get("Download")" Disabled="_processing" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid ItemsProvider="@_ItemsProvider" BuildInFilter="true" Pagination="@pagination" @ref="_grid" RowClick="@RowClicked" TGridItem="ApplicationLogSystemDTO">
                    <PropertyColumn Property="@(p => p.TimeStampAppHour)" Title="@localizer.Get("Timestamp")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.EventId)" Title="@localizer.Get("Event Id")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Id)" Title="@localizer.Get("Id")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Level)" Title="@localizer.Get("Level")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Path)" Title="@localizer.Get("Path")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Name)" Title="@localizer.Get("Name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.User)" Title="@localizer.Get("User name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Host)" Title="@localizer.Get("Host")" Sortable="true" />
                </SimpleGrid>
            </div>
            <Paginator Value="@pagination" />
        </MudCardContent>
    </MudCard>
    <MudCard Elevation="6">
        <MudCardContent>
            <div style="overflow:auto">
                <MudText Typo="Typo.h6">@localizer.Get("System log message")</MudText>
                @if (values.Message == null)
                {
                    <p class="muted">
                        @localizer.Get("Select a log to display the message")
                    </p>
                }
                else
                {
                    <p><b>@localizer.Get("Browser"):</b></p>
                    <p>@values.Browser</p>
                    <p><b>@localizer.Get("Platform"):</b></p>
                    <p>@values.Platform</p>
                    <p><b>@localizer.Get("Message"):</b></p>
                    <p>@values.Message</p>
                }
            </div>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>




@code
{
    GridItemsProvider<ApplicationLogSystemDTO>? _ItemsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    //SimpleGridFieldsContent Translations;
    private bool _processing = false;
    SimpleGrid<ApplicationLogSystemDTO>? _grid = default!;
    private bool rendering = false;
    ErrorDetails values = new();

    private class ErrorDetails
    {
        public string Message { get; set; }
        public string Browser { get; set; }
        public string Platform { get; set; }
    }


    protected override void OnInitialized()
    {
        _ItemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ApplicationLogSystemDTO>(), 0);
            }

            return GridItemsProviderResult.From(response.Value, response.Count);
        };
    }

    private async Task<ApiResponse<ApplicationLogSystemDTO>?> GetRemoteData(GridItemsProviderRequest<ApplicationLogSystemDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var OdataQuery = _grid?.GetODataUrl();
        string url = "odata/SystemLogs?";
        if (string.IsNullOrEmpty(OdataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += OdataQuery;
        }
        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<ApplicationLogSystemDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        rendering = true;
        await _grid.RefreshDataAsync();
        rendering = false;
    }

    private async Task ExtractElements()
    {
        _processing = true;
        string fileName = "System logs";
        //await _rep.GetExcelExtractionAsync(_grid.Items, fileName);
        var OdataQuery = _grid?.GetODataUrl();
        string url = $"odata/SystemLogs({1})?";
        if (string.IsNullOrEmpty(OdataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += OdataQuery;
        }
        try
        {
            await Http.GetFromJsonAsync<ApiResponse<ApplicationLogSystemDTO>>(url);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            //return null;
        }
        
        _processing = false;
    }
    private async Task RemoveFilters()
    {
        rendering = true;
        await _grid.RemoveFilters();
        rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    void RowClicked(SimpleGridRowClickEventArgs<ApplicationLogSystemDTO> args)
    {
        values.Browser = args.Item.Browser;
        values.Platform = args.Item.Platform;
        values.Message = args.Item.Message;
    }
}