@page "/AuditTrail"
@implements IAsyncDisposable
@inject HttpClient Http
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@localizer.Get("Audit Trail")</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@localizer.Get("Audit Trail")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@localizer.Get("Refresh")" Disabled="@rendering" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@localizer.Get("Remove filters")" Disabled="@rendering" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" Title="@localizer.Get("Download")" Disabled="@rendering" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid ItemsProvider="@_ItemsProvider" BuildInFilter="true" Pagination="@pagination" FieldsContent="@Translations" @ref="_grid" RowClick="@RowClicked" TGridItem="ApplicationAuditTrailDTO">
                    <PropertyColumn Property="@(p => p.DateTime)" Title="@localizer.Get("Timestamp")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.UserId)" Title="@localizer.Get("User name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Type)" Title="@localizer.Get("Type of change")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.TableName)" Title="@localizer.Get("Table name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.PrimaryKey)" Title="@localizer.Get("Primary key")" Sortable="true" />
                </SimpleGrid>
            </div>
            @if (rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@rendering" />
            }
            <Paginator Value="@pagination" FieldsContent="@Translations" />
        </MudCardContent>
    </MudCard>
    <MudCard Elevation="6">
        <MudCardContent>
            <div style="overflow:auto">
                <MudText Typo="Typo.h6">@localizer.Get("Audit trail: values changed")</MudText>
                @if (values.NewValues == null && values.OldValues == null)
                {
                    <p class="muted">
                        @localizer.Get("Select a log to display the values")
                    </p>
                }
                else
                {
                    <p><b>@localizer.Get("Affected columns"):</b></p>
                    <p>@values.AffectedColumns</p>
                    <p><b>@localizer.Get("Old values"):</b></p>
                    <p>@values.OldValues</p>
                    <p><b>@localizer.Get("New values"):</b></p>
                    <p>@values.NewValues</p>
                }
            </div>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
#nullable enable
    GridItemsProvider<ApplicationAuditTrailDTO>? _ItemsProvider;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent Translations = new();
    SimpleGrid<ApplicationAuditTrailDTO> _grid = default!;
    private bool rendering = false;

    private AuditTrailValuesChanged values = new();

    private class AuditTrailValuesChanged
    {
        public string AffectedColumns { get; set; } = default!;
        public string OldValues { get; set; } = default!;
        public string NewValues { get; set; } = default!;
    }

    protected override void OnInitialized()
    {
        _ItemsProvider = async req =>
        {
            rendering = true;
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ApplicationAuditTrailDTO>(), 0);
            }
            rendering = false;
            return GridItemsProviderResult.From(response.Value, response.Count);
        };
    }

    private async Task<ApiResponse<ApplicationAuditTrailDTO>?> GetRemoteData(GridItemsProviderRequest<ApplicationAuditTrailDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var OdataQuery = _grid?.GetODataQuery();
        string url = "odata/AuditTrail?";
        if (string.IsNullOrEmpty(OdataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += OdataQuery;
        }
        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<ApplicationAuditTrailDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        rendering = true;
        await _grid.RefreshDataAsync();
        rendering = false;
    }

    private async Task ExtractElements()
    {
        rendering = true;
        ODataExtractPayload Values = new ODataExtractPayload { FunctionName = "AuditTrail", FilterValues = _grid?.GetODataFilterValues(), SortValues = _grid?.GetODataSortValues(), FileName = "Audit Trail" };
        await dataService.ExtractGridLogs(Values);
        rendering = false;
    }
    private async Task RemoveFilters()
    {
        rendering = true;
        await _grid.RemoveFilters();
        rendering = false;
    }

    void RowClicked(SimpleGridRowClickEventArgs<ApplicationAuditTrailDTO> args)
    {
        values.AffectedColumns = args.Item.AffectedColumns;
        values.OldValues = args.Item.OldValues;
        values.NewValues = args.Item.NewValues;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}
