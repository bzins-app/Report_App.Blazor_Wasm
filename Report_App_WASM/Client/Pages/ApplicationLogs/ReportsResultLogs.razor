@page "/ReportsResultLogs"
@implements IAsyncDisposable
@inject HttpClient Http
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("Reports result logs")</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Reports result logs")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" Title="@Localizer.Get("Download")" Disabled="@_rendering" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid BuildInFilter="true" FieldsContent="@_translations" ItemsProvider="@_itemsProvider" Pagination="@_pagination" @ref="_grid">
                    <PropertyColumn Property="@(p => p.ActivityName)" Title="@Localizer.Get("Activity name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreatedAt)" Title="@Localizer.Get("Created at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ReportName)" Title="@Localizer.Get("Report name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.SubName)" Title="@Localizer.Get("Report sub name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.FileType)" Title="@Localizer.Get("File type")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.FileName)" Title="@Localizer.Get("File name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ReportPath)" Title="@Localizer.Get("File deposit path")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Error)" Title="@Localizer.Get("Error?")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Result)" Title="@Localizer.Get("Result")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.IsAvailable)" Title="@Localizer.Get("Is available?")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.FileSizeInMB)" Title="@Localizer.Get("File size in MB")" Sortable="true" />
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering" />
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>


@code
{
    GridItemsProvider<ApplicationLogReportResultDTO>? _itemsProvider;
    PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent _translations = new();
    SimpleGrid<ApplicationLogReportResultDTO> _grid;
    private bool _rendering = false;


    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ApplicationLogReportResultDTO>(), 0);
            }
            return GridItemsProviderResult.From(response.Value, response.Count);           
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<ApplicationLogReportResultDTO>?> GetRemoteData(GridItemsProviderRequest<ApplicationLogReportResultDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        string url = "odata/ReportResultLogs?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }
        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<ApplicationLogReportResultDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task ExtractElements()
    {
        _rendering = true;
        ODataExtractPayload values = new ODataExtractPayload { FunctionName = "ReportResultLogs", FilterValues = _grid?.GetODataFilterValues(), SortValues = _grid?.GetODataSortValues(), FileName = "Reports result logs" };
        await DataService.ExtractGridLogs(values);
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}