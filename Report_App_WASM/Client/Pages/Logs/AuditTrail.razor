@page "/AuditTrail"
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("Audit Trail")</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Audit Trail")</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" title="@Localizer.Get("Download")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto;text-wrap-mode: nowrap;">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid" RowClick="@RowClicked" TGridItem="AuditTrailDto">
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Id)" Title="Audit id" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.DateTime)" Title="@Localizer.Get("Timestamp")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.UserId)" Title="@Localizer.Get("User name")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Type)" Title="@Localizer.Get("Type of change")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.TableName)" Title="@Localizer.Get("Table name")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.PrimaryKey)" Title="@Localizer.Get("Primary key")" Sortable="true"/>
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering"/>
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
        <MudCardContent>
            <div style="overflow: auto">
                <MudText Typo="Typo.h6">@Localizer.Get("Audit trail: values changed")</MudText>
                @if (_values.NewValues == null && _values.OldValues == null)
                {
                    <p class="muted">
                        @Localizer.Get("Select a log to display the values")
                    </p>
                }
                else
                {
                    <p>
                        <b>@Localizer.Get("Affected columns"):</b>
                    </p>
                    <p>@_values.AffectedColumns</p>
                    <p>
                        <b>@Localizer.Get("Old values"):</b>
                    </p>
                    <p>@_values.OldValues</p>
                    <p>
                        <b>@Localizer.Get("New values"):</b>
                    </p>
                    <p>@_values.NewValues</p>
                }
            </div>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
    GridItemsProvider<AuditTrailDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations = new();
    SimpleGrid<AuditTrailDto> _grid = default!;
    private bool _rendering;

    private AuditTrailValuesChanged _values = new();

    private class AuditTrailValuesChanged
    {
        public string? AffectedColumns { get; set; }
        public string? OldValues { get; set; }
        public string? NewValues { get; set; }
    }

    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<AuditTrailDto>(), 0);
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<AuditTrailDto>?> GetRemoteData(GridItemsProviderRequest<AuditTrailDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        var url = "odata/AuditTrail?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += "$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }

        try
        {
            return await DataService.GetODataValues<AuditTrailDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task ExtractElements()
    {
        _rendering = true;
        string fname = "AuditTrail";
        var odataQuery = _grid?.GetODataQueryWihtoutPagination();
        var url = "odata/ExtractAuditTrail?";
        url += odataQuery;
        await DataService.ExtractGridLogs(url, fname);
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    void RowClicked(SimpleGridRowClickEventArgs<AuditTrailDto> args)
    {
        _values.AffectedColumns = args.Item.AffectedColumns;
        _values.OldValues = args.Item.OldValues;
        _values.NewValues = args.Item.NewValues;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}