@implements IAsyncDisposable

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Email sender")</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" title="@Localizer.Get("Download")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto;text-wrap-mode: nowrap;">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Id)" Title="EmailLogId" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.StartDateTime)" Title="@Localizer.Get("Start date time")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.EndDateTime)" Title="@Localizer.Get("End date time")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.DurationInSeconds)" Title="@Localizer.Get("Duration in seconds")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.EmailTitle)" Title="@Localizer.Get("Email title")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Error)" Title="@Localizer.Get("Error?")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.RecipientList)" Title="@Localizer.Get("List of recipient")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Result)" Title="@Localizer.Get("Result")" Sortable="true"/>
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering"/>
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>


@code
{
    GridItemsProvider<EmailLogDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 20 };
    SimpleGridFieldsContent? _translations = new();
    SimpleGrid<EmailLogDto> _grid = default!;
    private bool _rendering;


    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<EmailLogDto>(), 0);
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<EmailLogDto>?> GetRemoteData(GridItemsProviderRequest<EmailLogDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        var url = "odata/EmailLogs?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += "$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }

        try
        {
            return await DataService.GetODataValues<EmailLogDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task ExtractElements()
    {
        _rendering = true;
        var values = new ODataExtractPayload { FunctionName = "EmailLogs", FilterValues = _grid?.GetODataFilterValues(), SortValues = _grid?.GetODataSortValues(), FileName = "Email sender logs" };
        await DataService.ExtractGridLogs(values);
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}