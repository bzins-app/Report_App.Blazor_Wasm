@page "/QueryExecutionLogs"
@implements IAsyncDisposable
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("Query execution logs")</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Query execution logs")</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(ExtractElements)"
                               Icon="@Icons.Material.Filled.Download" title="@Localizer.Get("Download")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto;text-wrap-mode: nowrap;">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid" RowClick="@RowClicked" TGridItem="QueryExecutionLogDto">
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Id)" Title="ExcecutionLogId" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.TaskLogId)" Title="TaskLogId" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.ProviderName)" Title="@Localizer.Get("Activity name")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.QueryName)" Title="@Localizer.Get("Query name")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ScheduledTaskId)" Title="ScheduledTaskId" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ScheduledTaskQueryId)" Title="ScheduledTaskQueryId" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.StartDateTime)" Title="@Localizer.Get("Start date time")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.EndDateTime)" Title="@Localizer.Get("End date time")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.TotalDuration)" Title="@Localizer.Get("Total duration")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.SqlExcecutionDuration)" Title="@Localizer.Get("SQL execution duration")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.DownloadDuration)" Title="@Localizer.Get("Download duration")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.RowsFetched)" Title="@Localizer.Get("Nbr of rows returned")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.TypeDb)" Title="@Localizer.Get("Type of Database")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.Database)" Title="@Localizer.Get("Database name")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p!.CommandTimeOut)" Title="@Localizer.Get("Command timeout")" Sortable="true"/>
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering"/>
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
        <MudCard Elevation="6">
            <MudCardContent>
                <div style="overflow: auto">
                    <h4>
                        @Localizer.Get("Query")
                    </h4>
                    @if (_queryValue == null)
                    {
                        <p class="muted">
                            @Localizer.Get("Select a log to display the message")
                        </p>
                    }
                    else
                    {
                        <MudTextField ReadOnly="true" T="string" Text="@_queryValue" Lines="10"/>
                    }
                </div>
            </MudCardContent>
        </MudCard>
    </MudCard>
</ErrorBoundary>


@code
{
    GridItemsProvider<QueryExecutionLogDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations = new();
    SimpleGrid<QueryExecutionLogDto>? _grid;
    private string? _queryValue = string.Empty;
    private bool _rendering;

    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<QueryExecutionLogDto>(), 0);
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<QueryExecutionLogDto>?> GetRemoteData(GridItemsProviderRequest<QueryExecutionLogDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        var url = "odata/QueryExecutionLogs?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += "$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }

        try
        {
            return await DataService.GetODataValues<QueryExecutionLogDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        if (_grid != null) await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task ExtractElements()
    {
        _rendering = true;
        string fname = "QueryExecutionLogs";
        var odataQuery = _grid?.GetODataQueryWihtoutPagination();
        var url = "odata/ExtractQueryExecutionLogs?";
        url += odataQuery;
        await DataService.ExtractGridLogs(url, fname);
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        if (_grid != null) await _grid.RemoveFilters();
        _rendering = false;
    }

    void RowClicked(SimpleGridRowClickEventArgs<QueryExecutionLogDto> args)
    {
        _queryValue = args.Item.Query;
    }

    public async ValueTask DisposeAsync()
    {
        if (_grid != null) await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}