@page "/Profile"
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@Localizer.Get("Manage your account")</PageTitle>

<ErrorBoundary>
    <ChildContent>
        <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" Elevation="6"
                 ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
            <MudTabPanel Text="@Localizer.Get("Profile")">
                <MudForm Model="@Model" @ref="@_form" Validation="@(_userValidator.ValidateValue)" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.FlexStart" Style="max-width:600px;display:flex;">
                        <MudItem sm="12" xs="12">
                            <MudTextField For="@(() => Model.UserName)" @bind-Value="Model.UserName" Label="@Localizer.Get("User name")" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                        </MudItem>
                        <MudItem sm="12" xs="12">
                            <MudTextField For="@(() => Model.Email)" @bind-Value="Model.Email" Label="@Localizer.Get("Email")" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">@Localizer.Get("Validate")</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Change password")">
                <MudForm Model="@Changepassword" @ref="@_passwordform" Validation="@(_passwordValidator.ValidateValue)" Style="display: flex;align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.FlexStart" Style="max-width:600px">
                        <MudItem sm="12" xs="12">
                            <MudTextField Immediate="true"
                                          Label="@Localizer.Get("Old password")"
                                          For="@(()=>Changepassword.CurrentPassword)"
                                          @bind-Value="Changepassword.CurrentPassword"
                                          Variant="Variant.Text"
                                          InputType="@_passwordInput"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@_passwordInputIcon"
                                          Required="true"
                                          RequiredError="@Localizer.Get("Required")"
                                          Margin="Margin.Dense"
                                          IconSize="Size.Small"
                                          OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Immediate="true"
                                          Label="@Localizer.Get("New password")"
                                          For="@(()=>Changepassword.NewPassword)"
                                          @bind-Value="Changepassword.NewPassword"
                                          Variant="Variant.Text"
                                          InputType="@_passwordInput"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@_passwordInputIcon"
                                          Required="true"
                                          RequiredError="@Localizer.Get("Required")"
                                          Margin="Margin.Dense"
                                          IconSize="Size.Small"
                                          OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Immediate="true"
                                          Label="@Localizer.Get("Confirm password")"
                                          For="@(()=>Changepassword.ConfirmPassword)"
                                          @bind-Value="Changepassword.ConfirmPassword"
                                          Variant="Variant.Text"
                                          InputType="@_passwordInput"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@_passwordInputIcon"
                                          Required="true"
                                          RequiredError="@Localizer.Get("Required")"
                                          Margin="Margin.Dense"
                                          IconSize="Size.Small"
                                          OnAdornmentClick="TogglePasswordVisibility" />
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePassword())">@Localizer.Get("Update password")</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Personal data")">
                <MudCardContent Style="display: flex;align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.FlexEnd" Style="max-width:600px;">
                        <MudItem sm="12" xs="12">
                            <MudText>@Localizer.Get("Your account contains personal data that you have given us. This page allows you to download or delete that data.")</MudText>
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Link="/DownloadPersonalData">@Localizer.Get("Download")</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Close your account")">
                <MudCardContent Style="display: flex;align-content: center;  align-items: center; flex-direction: column;">
                    <MudGrid Justify="Justify.Center" Style="max-width:600px;">
                        <MudItem sm="12" xs="12">
                            <MudText><strong>@Localizer.Get("Deleting this data will permanently remove your account, and this cannot be recovered.")</strong></MudText>
                            <MudTextField @bind-Value="_passwordForDeletion" Variant="Variant.Text" Label="@Localizer.Get("Password")" Validation="@_deletionPasswordResult" InputType="InputType.Password" Margin="Margin.Dense" Disabled="@_ldapSignin" />
                        </MudItem>
                        <MudItem sm="12" xs="12" Class="d-flex justify-end">
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Warning" Class="ml-auto" Disabled="@_ldapSignin" OnClick="DeleteAccount">@Localizer.Get("Delete data and close my account")</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudTabPanel>
        </MudTabs>
    </ChildContent>
</ErrorBoundary>
@code {
    private MudForm _form = default!;
    private MudForm _passwordform = default!;

    private UserProfile Model { get; set; } = new();
    private readonly UserProfileEditValidator _userValidator = new();
    private ChangePasswordModel Changepassword { get; set; } = new();
    private ChangePasswordModelValidator? _passwordValidator;
    private readonly UserInfo _user = new();

    private bool _ldapSignin;
    private string? _passwordForDeletion;
    private string? _deletionPasswordResult;
    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;

    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    void TogglePasswordVisibility()
    {
        @if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationStateProvider.GetUserInfo();
       // model.Options = _userManager.Options;
      //  changepassword.Options = _userManager.Options;
        Model.UserName = user.UserName;
        //model.Id = user.Id;
        Model.Email = user.UserMail;
        _ldapSignin = ApplicationConstants.LdapLogin;
        _passwordValidator = new(Localizer);
    }


    private async Task Submit()
    {
        //await form.Validate();
        //if (form.IsValid)
        //{
        //    var user = await _userManager.FindByIdAsync(model.Id);
        //    await _userManager.UpdateAsync(user);

        //    //   Snackbar.Add($"{ToastText.UPDATESUCCESS}", MudBlazor.Severity.Info);
        //}

    }
    private async Task ChangePassword()
    {
        //await passwordform.Validate();
        //if (passwordform.IsValid)
        //{
        //    var user = await _userManager.FindByIdAsync(model.Id);
        //    var result = await _userManager.ChangePasswordAsync(user, changepassword.CurrentPassword, changepassword.NewPassword);
        //    if (result.Succeeded)
        //    {
        //        Snackbar.Add($"{Localizer.Get("Changed password successfully")}", Severity.Info);
        //    }
        //    else
        //    {
        //        Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
        //    }
        //}
    }

    private async Task DeleteAccount()
    {
        //if (string.IsNullOrEmpty(passwordForDeletion))
        //{
        //    deletionPasswordResult = Localizer.Get("Incorrect password");
        //    return;
        //}
        //if (!await _userManager.CheckPasswordAsync(user, passwordForDeletion))
        //{
        //    deletionPasswordResult = Localizer.Get("Incorrect password");
        //    return;
        //}
        //deletionPasswordResult = "";
        //var result = await _userManager.DeleteAsync(user);
        //var userId = await _userManager.GetUserIdAsync(user);
        //if (!result.Succeeded)
        //{
        //    deletionPasswordResult = $"Unexpected error occurred deleting user with ID '{userId}'.";
        //}

        //await _signInManager.SignOutAsync().ConfigureAwait(true);
        //uriHelper.NavigateTo("/");
    }
}