@page "/DbExplorer2/{ActivityId:int}/{ActivityName}"
@inject HttpClient Http
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@using Report_App_WASM.Shared.Extensions
@using Report_App_WASM.Shared.RemoteQueryParameters
@using Blazor.AceEditorJs
@implements IDisposable
@attribute [Authorize(Roles = "Admin, Supervisor,Demo")]

<PageTitle>@Localizer.Get("DB explorer")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @Localizer.Get("DB explorer"): @ActivityName
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="1">
            <MudItem md="5" lg="3">
                <MudPaper>
                    @if (_tree != null)
                    {
                        @_tree
                    }
                </MudPaper>
            </MudItem>
            <MudItem md="7" lg="9">
                @if (!string.IsNullOrEmpty(_queryTestResult))
                {
                    <MudText Typo="Typo.subtitle1" Color="Color.Error"> @_queryTestResult</MudText>
                }
                <div>
                    <MudPaper Elevation="25">
                        <MudToolBar Dense="true">
                            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Disabled="_loading" aria-label="@Localizer.Get("Test query")" OnClick="RunSql"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" Disabled="!_loading" aria-label="@Localizer.Get("Cancel")" OnClick="CancelQuery"/>
                        </MudToolBar>
                    </MudPaper>
                    <MudProgressLinear Color="Color.Primary" Indeterminate="false"/>
                    @if (_opt != null && _editor != null)
                    {
                        @_editor
                    }
                    <MudTable ServerData="ServerReload" Hover="true" Dense="true" Height="32vh" FixedHeader="true" HorizontalScrollbar="true" @ref="_table" RowsPerPage="20" Virtualize="true" Elevation="25">
                        <ToolBarContent>
                            <MudText>@_tableHeader</MudText>
                            <MudSpacer/>
                        </ToolBarContent>
                        <HeaderContent>
                            @if (_values?.Any() == true)
                            {
                                var keys = _values.FirstOrDefault()?.Keys;
                                if (keys != null)
                                {
                                    @foreach (var key in keys)
                                    {
                                        <MudTh>@key</MudTh>
                                    }
                                }
                            }
                        </HeaderContent>
                        <RowTemplate Context="context">
                            @if (_values?.Any() == true)
                            {
                                @foreach (var t in context)
                                {
                                    <MudTd Style="text-wrap-style: nowrap;">@(t.ToString() == "{}" ? string.Empty : t)</MudTd>
                                }
                            }
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="@Localizer.Get("Rows per page")" InfoFormat="@string.Format("{0}first_item{1}-{0}last_item{1} {2} {0}all_items{1}", "{", "}", Localizer.Get("of"))"/>
                        </PagerContent>
                    </MudTable>
                </div>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public string ActivityName { get; set; } = default!;

    [Parameter] public int ActivityId { get; set; }

    private List<TablesColsInfo> TableNames = new();
    private List<TablesColsInfo> TableNamesStored = new();
    private List<TablesColsInfo> ColNames = new();
    private List<TablesColsInfo> ColNamesStored = new();
    private bool _loading;
    private bool _hasDesc;
    private bool _hasDescCol;

    private string? QueryBuilder;
    private string? QueryRun;
    private string _querySelectedCode = string.Empty;
    private CancellationTokenSource? _cts;
    private bool _isDarkMode;
    private AceEditorOptions? _opt;
    private TypeDb _typeDbTask;
    MudTable<Dictionary<string, object>.ValueCollection>? _table;
    private List<Dictionary<string, object>>? _values;
    int[] _pageSizeOptions = { 10, 20, 50, 100 };
    private string? _queryTestResult { get; set; }
    private string _SelectedTable = string.Empty;
    private List<TreeItemData<TablesColsInfo>> InitialTreeItems;
    public RenderFragment? _editor { get; set; }
    public RenderFragment? _tree { get; set; }
    public string _tableHeader;

    protected override async Task OnParametersSetAsync()
    {
        var user = await AuthenticationStateProvider.GetUserInfo();
        if (user != null && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains(ActivityName) && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin"))
        {
            NavigationManager.NavigateTo("/403");
        }

        // Clear and reinitialize the tree view items
        _editor = null;
        _tree = null;
        StateHasChanged();

        InitialTreeItems = new List<TreeItemData<TablesColsInfo>>();
        InitialTreeItems.Clear();

        InitialTreeItems.Add(new TreeItemData<TablesColsInfo> { Value = new TablesColsInfo { Name = "Tables", TypeValue = "Head", Description = "(Max 600)" }, Icon = Icons.Material.Filled.Label, });
        InitialTreeItems.Add(new TreeItemData<TablesColsInfo> { Value = new TablesColsInfo { Name = "Views", TypeValue = "Head", Description = "(Max 200)" }, Icon = Icons.Material.Filled.Label, });

        _tableHeader = Localizer.Get("Query output");
        _values = new();
        TableNames = new List<TablesColsInfo>();
        ColNames = new List<TablesColsInfo>();
        QueryRun = "";
        QueryBuilder = "";
        TableNamesStored = new List<TablesColsInfo>();
        ColNamesStored = new List<TablesColsInfo>();
        var uri = $"GetActivityDbConnection?ActivityId={ActivityId}";
        var response = await DataService.GetValues<ActivityDbConnectionDto>(uri);
        if (response.Any())
        {
            _typeDbTask = response.Select(a => a.TypeDb).First();
        }

        _isDarkMode = UserAppTheme.DarkTheme;
        _opt = new AceEditorOptions
        {
            IsReadOnly = false,
            Language = _typeDbTask switch
            {
                TypeDb.MySql => AceLanguage.mysql,
                TypeDb.MariaDb => AceLanguage.mysql,
                TypeDb.SqlServer => AceLanguage.sqlserver,
                TypeDb.PostgreSql => AceLanguage.pgsql,
                _ => AceLanguage.sql
            },
            Theme = _isDarkMode ? AceTheme.tomorrow_night : AceTheme.sqlserver
        };


        _editor = (__builder) =>
        {
            <Blazor.AceEditorJs.AceJsEditor Style="height: 38vh" @bind-Value="@QueryBuilder" @bind-SelectedValue="_querySelectedCode" Options="@_opt"/>
        };

        _tree = (__builder) =>
        {
            <MudTreeView ServerData="@LoadServerData" Items="@InitialTreeItems" Height="82vh" ReadOnly="false" Dense="true" Class="overflow-x-auto" Ripple="false">
                <ItemTemplate Context="context">
                    @if (context.Value?.TypeValue == "Table" || context.Value?.TypeValue == "View")
                    {
                        <MudTreeViewItem Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="@context.Expandable">
                            <BodyContent Context="item">
                                <MudText>@(string.IsNullOrEmpty(item.Value.Description) ? item.Value?.Name : item.Value?.Name + " " + item.Value.Description)</MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Pageview" Size="Size.Small" OnClick="@(e => DisplayTableValues(item.Value.Name))" Class="ms-2" title="@Localizer.Get("Display table values")"/>
                            </BodyContent>
                        </MudTreeViewItem>
                    }
                    else
                    {
                        <MudTreeViewItem Text="@(string.IsNullOrEmpty(context.Value.Description) ? context.Value?.Name : context.Value?.Name + " " + context.Value.Description)" Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="@context.Expandable"/>
                    }
                </ItemTemplate>
            </MudTreeView>
        };
        StateHasChanged();
    }


    public async Task<IReadOnlyCollection<TreeItemData<TablesColsInfo>>> LoadServerData(TablesColsInfo parentValue)
    {
        var _typeTableHead = parentValue.TypeValue switch
        {
            "Table" => "Tables",
            "View" => "Views",
            _ => parentValue.Name
        };

        var _typeTable = parentValue.Name switch
        {
            "Tables" => "Table",
            "Views" => "View",
            _ => parentValue.TypeValue
        };

        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        if (parentValue.TypeValue == "Head")
        {
            var item = InitialTreeItems.FirstOrDefault(a => a.Value == parentValue);
            if (item != null)
            {
                var data = await Http.GetFromJsonAsync<DbTablesColList>($"{ApiControllers.RemoteDbApi}GetTablesList?activityId={ActivityId}", _cts.Token);
                if (data != null)
                {
                    item.Children = data.Values
                        .Where(a => a.TypeValue == _typeTable)
                        .Take(_typeTable == "View" ? 200 : 600)
                        .Select(a => new TreeItemData<TablesColsInfo> { Value = a, Icon = _typeTable == "Table" ? Icons.Material.Filled.TableChart : _typeTable == "View" ? Icons.Material.Filled.Dataset : Icons.Material.Filled.Label })
                        .ToList();
                    return item.Children;
                }
            }
        }
        else
        {
            var item = InitialTreeItems.FirstOrDefault(a => a.Value.Name == _typeTableHead);
            if (item != null)
            {
                var childItem = item.Children.FirstOrDefault(a => a.Value.Name == parentValue.Name);
                if (childItem != null)
                {
                    var data = await Http.GetFromJsonAsync<DbTablesColList>($"{ApiControllers.RemoteDbApi}GetColumnList?activityId={ActivityId}&table={parentValue.Name}", _cts.Token);
                    if (data != null)
                    {
                        childItem.Children = data.Values.Select(a => new TreeItemData<TablesColsInfo>
                        {
                            Value = a,
                            Icon = a.ColType.ToLower() switch
                            {
                                var colType when colType.Contains("date") || colType.Contains("time") => Icons.Material.Filled.DateRange,
                                var colType when colType.Contains("char") || colType.Contains("string") || colType.Contains("text") => Icons.Material.Filled.TextSnippet,
                                var colType when colType.Contains("number") || colType.Contains("int") => Icons.Material.Filled._123,
                                _ => Icons.Material.Filled.Label
                            },
                            Expandable = false
                        }).ToList();
                        return childItem.Children;
                    }
                }
            }
        }

        return Array.Empty<TreeItemData<TablesColsInfo>>();
    }

    private async Task GetTablesList()
    {
        _cts = new CancellationTokenSource();
        _loading = true;
        var data = await Http.GetFromJsonAsync<DbTablesColList>($"{ApiControllers.RemoteDbApi}GetTablesList?activityId={ActivityId}", _cts.Token);
        TableNames = data!.Values;
        TableNamesStored = data.Values;
        _hasDesc = data.HasDescription;
        _loading = false;
    }

    private async Task GetColumnsList(string table)
    {
        _cts = new CancellationTokenSource();
        _loading = true;
        _SelectedTable = table;
        var data = await Http.GetFromJsonAsync<DbTablesColList>($"{ApiControllers.RemoteDbApi}GetColumnList?activityId={ActivityId}&table={table}", _cts.Token);
        ColNames = data!.Values;
        ColNamesStored = data.Values;
        _hasDescCol = data.HasDescription;
        _loading = false;
    }


    private void OnSearchTables(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            TableNames = TableNamesStored;
        else
        {
            TableNames = TableNamesStored.Where(a => (!string.IsNullOrEmpty(a.Name) && a.Name.ToLower().RemoveDiacritics().Contains(text.ToLower().RemoveDiacritics())) || (!string.IsNullOrEmpty(a.Description) && a.Description.ToLower().RemoveDiacritics().Contains(text.ToLower().RemoveDiacritics()))).ToList();
        }
    }

    private void OnSearchCols(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            ColNames = ColNamesStored;
        else
        {
            ColNames = ColNamesStored.Where(a => (!string.IsNullOrEmpty(a.Name) && a.Name.ToLower().RemoveDiacritics().Contains(text.ToLower().RemoveDiacritics())) || (!string.IsNullOrEmpty(a.Description) && a.Description.ToLower().RemoveDiacritics().Contains(text.ToLower().RemoveDiacritics()))).ToList();
        }
    }

    void CancelQuery()
    {
        _cts?.Cancel();
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }

    private async Task DisplayTableValues(string tableName)
    {
        _loading = true;
        var query = $"select  * from {tableName}";
        QueryRun = query;
        _tableHeader = tableName;
        _table!.CurrentPage = 0;
        await _table.ReloadServerData();
        _loading = false;
    }

    private async Task RunSql()
    {
        _loading = true;
        _queryTestResult = String.Empty;
        _tableHeader = Localizer.Get("Query output");
        StateHasChanged();
        var _queryTorun = string.IsNullOrWhiteSpace(_querySelectedCode) ? QueryBuilder : _querySelectedCode;

        if (string.IsNullOrEmpty(QueryBuilder))
        {
            _queryTestResult = "query is not set";
        }
        else
        {
            QueryRun = _queryTorun;
            _table!.CurrentPage = 0;
            await _table.ReloadServerData();
        }

        _loading = false;
    }

    private async Task<TableData<Dictionary<string, object>.ValueCollection>> ServerReload(TableState state, CancellationToken token)
    {
        var currentPage = state.Page;
        var pageSize = state.PageSize;

        if (string.IsNullOrEmpty(QueryRun))
        {
            var placeholderData = new List<Dictionary<string, object>>
            {
                new() { { "Result", "Please enter SQL code" } }
            };

            return new TableData<Dictionary<string, object>.ValueCollection>
            {
                TotalItems = 0,
                Items = placeholderData.Select(d => d.Values).ToList()
            };
        }

        try
        {
            _cts?.Cancel();
            _cts = CancellationTokenSource.CreateLinkedTokenSource(token);

            var run = new RemoteDbCommandParameters
            {
                ActivityId = ActivityId,
                QueryToRun = QueryRun,
                Test = true,
                PaginatedResult = true,
                StartRecord = currentPage * pageSize,
                MaxSize = pageSize + 1,
                LastRunDateTime = DateTime.Now,
                QueryCommandParameters = new List<QueryCommandParameter>()
            };

            var remoteDataPayload = new RemoteDataPayload { Values = run, LogPayload = false };
            var uri = $"{ApiControllers.RemoteDbApi}RemoteDbGetValues";
            var response = await Http.PostAsJsonAsync(uri, remoteDataPayload, _cts.Token);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SubmitResultRemoteData>();
                if (result?.Success == true)
                {
                    _values = result.Value;
                    _queryTestResult = null;
                }
                else
                {
                    _queryTestResult = result?.Message ?? "Unknown error";
                    _values = new List<Dictionary<string, object>>();
                }
            }
            else
            {
                _queryTestResult = response.ReasonPhrase;
                _values = new List<Dictionary<string, object>>();
            }
        }
        catch (Exception ex)
        {
            _queryTestResult = ex.Message;
            _values = new List<Dictionary<string, object>>();
        }

        var items = _values?.Select(a => a.Values).ToList() ?? new List<Dictionary<string, object>.ValueCollection>();
        var totalItems = _values.Count < pageSize + 1 ? _values.Count + currentPage * pageSize : currentPage * pageSize + pageSize + 1;

        return new TableData<Dictionary<string, object>.ValueCollection>
        {
            TotalItems = totalItems,
            Items = items
        };
    }

}