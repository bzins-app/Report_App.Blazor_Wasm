@page "/RetrieveFiles/{ActivityName}/{ActivityId:int}"
@implements IAsyncDisposable
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>@_title</PageTitle>

<ErrorBoundary>
    <ChildContent>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">@Localizer.Get("An error has occurred"): @_errorMessage</MudText>
        }
        <MudCard Elevation="6">
            <MudCardHeader>
                <MudText Typo="Typo.h6">@_title</MudText>
                <MudSpacer/>
                <MudStack Row="true">
                    <MudIconButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(OnRefresh)"
                                   Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                    <MudIconButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(RemoveFilters)"
                                   Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
                    <MudIconButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(ExtractElements)"
                                   Icon="@Icons.Material.Filled.Download" title="@Localizer.Get("Download")" Disabled="_processing"/>
                </MudStack>
            </MudCardHeader>
            <MudCardContent>
                <div style="overflow: auto;text-wrap-mode: nowrap;">
                    <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ActivityName)" Title="@Localizer.Get("Activity name")" Sortable="true"/>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreatedAt)" Title="@Localizer.Get("Created at")" Sortable="true"/>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ReportName)" Title="@Localizer.Get("Report name")" Sortable="true"/>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.SubName)" Title="@Localizer.Get("Report sub name")" Sortable="true"/>
                        <Blazor.SimpleGrid.TemplateColumn Title="@Localizer.Get("Download")">
                            <MudIconButton Href="@context.ReportPath" Target="_blank" Icon="@Icons.Material.Filled.Download" aria-label="@Localizer.Get("Download")"/>
                        </Blazor.SimpleGrid.TemplateColumn>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.FileType)" Title="@Localizer.Get("File type")" Sortable="true"/>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.FileName)" Title="@Localizer.Get("File name")" Sortable="true"/>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.FileSizeInMb)" Title="@Localizer.Get("File size in MB")" Sortable="true"/>
                    </SimpleGrid>
                </div>
                <Paginator Value="@_pagination" FieldsContent="@_translations"/>
            </MudCardContent>
        </MudCard>
    </ChildContent>
</ErrorBoundary>

@code
{
    [Parameter] public int ActivityId { get; set; }

    [Parameter] public string? ActivityName { get; set; }

    private string? _title;
    GridItemsProvider<ApplicationLogReportResultDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations;
    private bool _processing = false;
    SimpleGrid<ApplicationLogReportResultDto> _grid = default!;
    private bool _rendering;
    private string _errorMessage = default!;

    protected override async Task OnParametersSetAsync()
    {
        var user = await AuthenticationStateProvider.GetUserInfo();
        if (user != null && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains(ActivityName) && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin"))
        {
            NavigationManager.NavigateTo("/403");
        }

        _title = Localizer.Get("Retrieve files") + ": " + ActivityName;
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ApplicationLogReportResultDto>(), 0);
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<ApplicationLogReportResultDto>?> GetRemoteData(GridItemsProviderRequest<ApplicationLogReportResultDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataSort = _grid?.GetODataSortValues();
        var odataPagination = _grid?.GetODataPaginationValues();
        var odataFilters = _grid?.GetODataFilterValues();
        var url = "odata/ReportResultLogs?";
        var customFilters = $"ActivityId eq {ActivityId} and IsAvailable eq true";

        url += "$count=true";
        if (!string.IsNullOrEmpty(odataPagination))
        {
            url += "&" + odataPagination;
        }

        if (!string.IsNullOrEmpty(odataSort))
        {
            url += "&" + odataSort;
        }

        if (!string.IsNullOrEmpty(odataFilters))
        {
            url += "&" + odataFilters + " and " + customFilters;
        }
        else
        {
            url += "&$filter=" + customFilters;
        }

        try
        {
            return await DataService.GetODataValues<ApplicationLogReportResultDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task ExtractElements()
    {
        _rendering = true;
        var values = new ODataExtractPayload { FunctionName = "ReportResultLogs", FilterValues = _grid?.GetODataFilterValues(), SortValues = _grid?.GetODataSortValues(), FileName = "Reports result logs" };
        await DataService.ExtractGridLogs(values);
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}