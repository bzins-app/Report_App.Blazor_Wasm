@using Blazor.AceEditorJs
@using Report_App_WASM.Shared.RemoteQueryParameters
@inject HttpClient Http
@inject IDialogService DialogService


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch { CrudAction.Update => Icons.Material.Filled.Edit, CrudAction.Create => Icons.Material.Filled.Create, _ => Icons.Material.Filled.DeleteForever })" Class="mr-3 mb-n1"/>
            @Localizer.Get(Action switch
            {
                CrudAction.Update => "Edit",
                CrudAction.Create => "Add",
                _ => "Delete"
            })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Item" @ref="@_form">
            <MudGrid>
                <MudItem sm="12" md="4" lg="2" Style="padding-right: 10px">
                    <MudTextField @bind-Value="Item.QueryName" Label="@Localizer.Get("Query name")" Required/>
                    <MudNumericField @bind-Value="Item.ExecutionOrder" Label="@Localizer.Get("Query sequence")"/>
                    @if (_taskType == TaskType.Report.ToString())
                    {
                        <br/>
                        <MudSwitch @bind-Value="_param.GenerateIfEmpty" Label="@Localizer.Get("Generate if empty?")" Color="Color.Primary"/>
                        if (_fileType == FileType.Excel.ToString())
                        {
                            <MudSwitch @bind-Value="_param.SeparateExcelFile" Label="@Localizer.Get("Separated excel file?")" Color="Color.Primary"/>
                            @if (_useSpecificFileNaming)
                            {
                                <MudTextField @bind-Value="_param.FileName" Label="@Localizer.Get("File name")"/>
                                <p>* @Localizer.Get("Only when query is generated in separated file")</p>
                            }

                            if (_useExcelTemplate && !_param.SeparateExcelFile)
                            {
                                <MudTextField @bind-Value="_param.ExcelTemplate.ExcelTabName" Label="@Localizer.Get("Template tab name to use")" Required/>
                                <MudSwitch @bind-Value="_param.ExcelTemplate.UseAnExcelDataTable" Label="@Localizer.Get("Use an excel data table?")" Color="Color.Primary"/>
                                @if (_param.ExcelTemplate.UseAnExcelDataTable)
                                {
                                    <MudTextField @bind-Value="_param.ExcelTemplate.ExcelDataTableName" Label="@Localizer.Get("Excel data table name")" Required/>
                                }
                                else
                                {
                                    <MudTextField @bind-Value="_param.ExcelTemplate.ExcelTemplateCellReference" Label="@Localizer.Get("Cell reference")" Required/>
                                }
                            }
                            else
                            {
                                <MudTextField @bind-Value="_param.ExcelTabName" Label="@Localizer.Get("Excel tab name")"/>
                                <MudSwitch @bind-Value="_param.AddValidationSheet" Label="@Localizer.Get("Add validation sheet?")" Color="Color.Primary"/>
                            }
                        }
                        else
                        {
                            <MudTextField @bind-Value="_param.FileName" Label="@Localizer.Get("File name")"/>
                            <MudSelect T="string" Label="@Localizer.Get("Encoding type")" @bind-Value="@_param.EncodingType"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Required>
                                @foreach (EncodingType item in Enum.GetValues(typeof(EncodingType)))
                                {
                                    <MudSelectItem Value="@item.ToString()">@Localizer.Get(item.ToString())</MudSelectItem>
                                }

                            </MudSelect>
                        }

                        @if (_fileType == FileType.Csv.ToString())
                        {
                            <MudSwitch @bind-Value="_param.RemoveHeader" Label="@Localizer.Get("Remove Header")" Color="Color.Primary"/>
                        }
                    }
                    @if (_taskType == TaskType.DataTransfer.ToString())
                    {
                        <MudTextField @bind-Value="_param.DataTransferTargetTableName" Label="@Localizer.Get("Target table name")" Required/>
                        <MudSwitch @bind-Value="_param.DataTransferCreateTable" Label="@Localizer.Get("Create target table?")" Color="Color.Primary"/>
                        <MudSwitch @bind-Value="_param.DataTransferUsePk" Label="@Localizer.Get("Use primary keys?")" Color="Color.Primary" @onclick="ResetCommandBehaviour"/>

                        @if (_param.DataTransferUsePk)
                        {
                            <MudSelect T="string" Label="@Localizer.Get("Command behaviour")"
                                       AnchorOrigin="Origin.BottomCenter" @bind-Value="_param.DataTransferCommandBehaviour"
                                       Required>
                                @foreach (DataTransferAdvancedBehaviour item in Enum.GetValues(typeof(DataTransferAdvancedBehaviour)))
                                {
                                    <MudSelectItem Value="@item.ToString()">@Localizer.Get(item.ToString())</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField T="string" Label="@Localizer.Get("Enter the primary key column")" @bind-Value="@_pKName"/>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Style="text-transform: none" Size="Size.Small"
                                       Class="ml-auto mt-3 mb-3" OnClick="@(Add)">
                                @Localizer.Get("Add the primary key")
                            </MudButton>
                            <MudTable Items="@_param.DataTransferPk" Hover="true" Dense="true">
                                <HeaderContent>
                                    <MudTh>@Localizer.Get("Column name")</MudTh>
                                    <MudTh>@Localizer.Get("Action")</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="@Localizer.Get("Primary key")">@context</MudTd>
                                    <MudTd>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => Delete(context)"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Style="text-transform: none" Size="Size.Small"
                                       Class="ml-auto mt-3 mb-3" OnClick="@(DeleteTableConfirmation)">
                                @Localizer.Get("Delete the target table")
                            </MudButton>
                        }
                        else
                        {
                            <MudSelect T="string" Label="@Localizer.Get("Command behaviour")"
                                       AnchorOrigin="Origin.BottomCenter" @bind-Value="_param.DataTransferCommandBehaviour"
                                       Required>
                                @foreach (DataTransferBasicBehaviour item in Enum.GetValues(typeof(DataTransferBasicBehaviour)))
                                {
                                    <MudSelectItem Value="@item.ToString()">@Localizer.Get(item.ToString())</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    }
                </MudItem>
                <MudItem sm="12" md="8" lg="10">
                    @if (!string.IsNullOrEmpty(_queryTestResult))
                    {
                        <MudText Typo="Typo.subtitle1" Color="Color.Error"> @_queryTestResult</MudText>
                    }
                    @if (_typeDbActivity != TypeDb.Db2)
                    {
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                            <MudTabPanel Text="SQL">
                                <MudPaper Elevation="25">
                                    <MudToolBar Dense="true">
                                        <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Disabled="_loading" aria-label="@Localizer.Get("Test query")" OnClick="OpenTestQuery"/>
                                        <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" Disabled="!_loading" aria-label="@Localizer.Get("Cancel")" OnClick="CancelTest"/>
                                    </MudToolBar>
                                </MudPaper>
                                <MudProgressLinear Color="Color.Primary" Indeterminate="_loading"/>
                                @if (_opt != null)
                                {
                                    <Blazor.AceEditorJs.AceJsEditor Style="height: 75vh" @bind-Value="Item.Query" @bind-SelectedValue="_querySelectedCode" Options="@_opt"/>
                                }
                            </MudTabPanel>
                            <MudTabPanel Text="@Localizer.Get("Query parameters")">
                                <_QueryParameters Item="Item" Style="height: 80vh" @ref="_refQuery"/>
                            </MudTabPanel>
                        </MudTabs>
                    }
                    else
                    {
                        <MudPaper Elevation="25">
                            <MudToolBar Dense="true">
                                <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Disabled="_loading" aria-label="@Localizer.Get("Test query")" OnClick="OpenTestQuery"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" Disabled="!_loading" aria-label="@Localizer.Get("Cancel")" OnClick="CancelTest"/>
                            </MudToolBar>
                        </MudPaper>
                        <MudProgressLinear Color="Color.Primary" Indeterminate="_loading"/>

                        @if (_opt != null)
                        {
                            <Blazor.AceEditorJs.AceJsEditor Style="height: 75vh" @bind-Value="Item.Query" @bind-SelectedValue="_querySelectedCode" Options="@_opt"/>
                        }
                    }
                </MudItem>
            </MudGrid>

        </MudForm>
        @if (Action == CrudAction.Delete)
        {
            <MudTextField @bind-Value="_deletionValidation" Label="@(Localizer.Get("Confirm the deletion by entering") + ": Validate")" Required RequiredError="@Localizer.Get("Required")"/>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Color="Action == CrudAction.Delete ? Color.Error : Color.Primary" OnClick="Validate">@Localizer.Get(Action == CrudAction.Delete ? "Delete" : "Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public ScheduledTaskQueryDto? Item { get; set; }

    [Parameter] public ScheduledTaskDto? Header { get; set; }

    [Parameter] public int DataProviderId { get; set; }

    [Parameter] public CrudAction Action { get; set; }

    private MudForm _form = default!;
    private string? _deletionValidation;
    private _QueryParameters? _refQuery;

    private TaskDetailParameters _param = new();
    private TaskHeaderParameters? _paramHeader = new();
    private TypeDb _typeDbActivity;
    private string? _taskType;
    private string? _fileType;
    private bool _useExcelTemplate;
    private bool _useSpecificFileNaming;
    private bool _loading;
    private List<Dictionary<string, object>>? _data;
    private string? _queryTestResult;
    private bool _testResult;
    private string _querySelectedCode = string.Empty;

    private CancellationTokenSource? _cts;

    /*
    private List<string>? _encodingType;
    */
    private bool _isDarkMode;
    private AceEditorOptions? _opt;

    private string? _pKName;

    JsonSerializerOptions _jsonOpt = new()
    {
        PropertyNameCaseInsensitive = true
    };


    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = UserAppTheme.DarkTheme;
        _taskType = Header?.TypeName;
        _fileType = Header?.TypeFileName;
        if (Item!.ExecutionParameters != "[]" && !string.IsNullOrEmpty(Item.ExecutionParameters))
        {
            _param = JsonSerializer.Deserialize<TaskDetailParameters>(Item.ExecutionParameters, _jsonOpt)!;
        }

        if (Header?.TaskHeaderParameters != "[]" && !string.IsNullOrEmpty(Header?.TaskHeaderParameters))
        {
            _paramHeader = JsonSerializer.Deserialize<TaskHeaderParameters>(Header.TaskHeaderParameters, _jsonOpt);
        }

        _useExcelTemplate = _paramHeader!.UseAnExcelTemplate;
        _useSpecificFileNaming = _paramHeader.UseASpecificFileNaming;
        var uri = $"GetActivityDbConnection?DataProviderId={DataProviderId}";
        var response = await DataService.GetValues<DatabaseConnectionDto>(uri);
        if (response.Any())
        {
            _typeDbActivity = response.Select(a => a.TypeDb).First();
        }

        _loading = false;
        _opt = new AceEditorOptions
        {
            IsReadOnly = false,
            Language = _typeDbActivity switch
            {
                TypeDb.MySql => AceLanguage.mysql,
                TypeDb.MariaDb => AceLanguage.mysql,
                TypeDb.SqlServer => AceLanguage.sqlserver,
                TypeDb.PostgreSql => AceLanguage.pgsql,
                _ => AceLanguage.sql
            },
            Theme = _isDarkMode ? AceTheme.tomorrow_night : AceTheme.sqlserver
        };
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async Task Validate()
    {
        if (Action == CrudAction.Delete)
        {
            if (_deletionValidation == "Validate")
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
        else
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                _refQuery?.UpdateParameters();
                Item!.ExecutionParameters = JsonSerializer.Serialize(_param);
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
    }

    private async Task RunSqlTest()
    {
        try
        {
            _cts = new CancellationTokenSource();
            List<QueryCommandParameter>? param = new();
            _refQuery?.UpdateParameters();
            if ((Header!.UseGlobalQueryParameters && Header.QueryParameters != "[]") ||
                !string.IsNullOrEmpty(Header.QueryParameters))
            {
                param = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Header.QueryParameters);
            }

            if (Item!.QueryParameters != "[]" && !string.IsNullOrEmpty(Item.QueryParameters))
            {
                var desParam = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Item.QueryParameters);
                foreach (var value in desParam!)
                {
                    if (param!.All(a => a.ParameterIdentifier != value.ParameterIdentifier))
                    {
                        param?.Add(value);
                    }
                }
            }

            var _queryTorun = string.Empty;
            _queryTorun = !string.IsNullOrWhiteSpace(_querySelectedCode) ? _querySelectedCode : Item.Query;

            var run = new RemoteDbCommandParameters { DataProviderId = DataProviderId, QueryToRun = _queryTorun, Test = true, PaginatedResult = true, StartRecord = 0, MaxSize = 20, LastRunDateTime = Item.LastRunDateTime ?? DateTime.Now, QueryCommandParameters = param };
            var remoteDataPayload = new RemoteDataPayload { Values = run };
            var uri = $"{ApiControllers.RemoteDbApi}RemoteDbGetValues";
            var response = await Http.PostAsJsonAsync(uri, remoteDataPayload, _cts.Token);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SubmitResultRemoteData>();
                if (result!.Success)
                {
                    _data = result.Value;
                    _queryTestResult = null!;
                    _testResult = true;
                }
                else
                {
                    _queryTestResult = result.Message!;
                    _data = new List<Dictionary<string, object>>();
                    _testResult = false;
                }
            }
            else
            {
                _data = new List<Dictionary<string, object>>();
                _testResult = false;
            }
        }
        catch (Exception ex)
        {
            _data = new List<Dictionary<string, object>>();
            _queryTestResult = ex.Message;
            _testResult = false;
        }
    }

    private readonly DialogOptions _dialogOptions = new() { CloseOnEscapeKey = false, BackdropClick = false, MaxWidth = MaxWidth.ExtraExtraLarge, FullWidth = true };

    private async Task OpenTestQuery()
    {
        _queryTestResult = string.Empty;
        _loading = true;
        await Task.Run(RunSqlTest);
        _loading = false;
        if (_testResult)
        {
            var parameters = new DialogParameters { ["data"] = _data, ["queryTestResult"] = _queryTestResult, ["testResult"] = _testResult };
            await DialogService.ShowAsync<_QueryResultDialog>("Create", parameters, _dialogOptions);
        }
    }

    void CancelTest()
    {
        _cts?.Cancel();
    }

    //data transfer
    private void Delete(string? value)
    {
        _param?.DataTransferPk?.Remove(value);
    }

    private void Add()
    {
        if (!string.IsNullOrEmpty(_pKName))
        {
            if (!_param.DataTransferPk!.Contains(_pKName))
            {
                _param.DataTransferPk.Add(_pKName);
            }

            _pKName = "";
        }
    }

    private async Task DeleteTableConfirmation()
    {
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, BackdropClick = true, MaxWidth = MaxWidth.ExtraSmall };
        var result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Deleting can not be undone!"), Localizer.Get("Confirm"), null, Localizer.Get("Cancel"), dialogOptions);

        if (result != null)
        {
            if (_paramHeader != null)
            {
                var payload = new DeleteTablePayload { TableName = _param.DataTransferTargetTableName!, IdDataTransfer = _paramHeader.DataTransferId };
                var confirm = await DataService.PostValues(payload, "DeleteDataTransferTable", ApiControllers.RemoteDbApi);
                if (!confirm.Success)
                {
                    _queryTestResult = confirm.Message;
                }
            }
        }
    }

    private void ResetCommandBehaviour()
    {
        _param.DataTransferCommandBehaviour = null;
    }

}