@inject IDialogService DialogService

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Queries")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" title="@Localizer.Get("Add")" />
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto">
                <SimpleGrid Items="@_elements!.AsQueryable()" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <Blazor.SimpleGrid.TemplateColumn>
                        <MudStack Row="true" Justify="Justify.Center">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => OpenEditDialog(context)" title="@Localizer.Get("Edit")" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => OpenDeleteDialog(context)" title="@Localizer.Get("Delete")" />
                            <MudIconButton Icon="@Icons.Material.Outlined.ContentCopy" OnClick="() => OpenCreateDialog(context)" title="@Localizer.Get("Duplicate")" />
                        </MudStack>
                    </Blazor.SimpleGrid.TemplateColumn>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ScheduledTaskQueryId)" Title="ScheduledTaskQueryId" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.QueryName)" Title="@Localizer.Get("Query name")" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ExecutionOrder)" Title="@Localizer.Get("Query sequence")" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true" />
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code {

    [Parameter] public ScheduledTaskDto? Item { get; set; }

    [Parameter] public List<ScheduledTaskQueryDto>? ItemToDelete { get; set; }

    [Parameter] public bool ChangePending { get; set; }

    [Parameter] public EventCallback<bool> ChangePendingChanged { get; set; }

    IEnumerable<ScheduledTaskQueryDto>? _elements = new List<ScheduledTaskQueryDto>();
    SimpleGrid<ScheduledTaskQueryDto>? _grid;
    PaginationState _pagination = new() { ItemsPerPage = 5 };
    SimpleGridFieldsContent? _translations = default!;
    DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
    private bool _disable;

    protected override void OnParametersSet()
    {
        UpdateElements();
        _translations = AppService.GetGridTranslations();
    }

    private void UpdateElements()
    {
        _elements = Item?.TaskQueries.ToList();
    }

    private async Task OpenEditDialog(ScheduledTaskQueryDto value)
    {
        _disable = true;
        var itemUpdate = new ScheduledTaskQueryDto
            {
                Query = value.Query,
                QueryName = value.QueryName,
                QueryParameters = value.QueryParameters,
                ExecutionOrder = value.ExecutionOrder,
                ExecutionParameters = value.ExecutionParameters,
                LastRunDateTime = value.LastRunDateTime
            };
        var parameters = new DialogParameters { ["Item"] = itemUpdate, ["DataProviderId"] = Item!.DataProvider.DataProviderId, ["Header"] = Item, ["Action"] = CrudAction.Update };

        var dialog = await DialogService.ShowAsync<_TaskDetailsFormDialog>("Edit", parameters, _maxWidth);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            var result = (ScheduledTaskQueryDto)feedback.Data;
            var toUpdate = Item.TaskQueries.First(a => a.ScheduledTaskQueryId == value.ScheduledTaskQueryId);
            toUpdate.Query = result.Query;
            toUpdate.QueryName = result.QueryName;
            toUpdate.QueryParameters = result.QueryParameters;
            toUpdate.ExecutionOrder = result.ExecutionOrder;
            toUpdate.ExecutionParameters = result.ExecutionParameters;
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
        }

        _disable = false;
    }

    private async Task OpenDeleteDialog(ScheduledTaskQueryDto value)
    {
        _disable = true;
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, BackdropClick = true, MaxWidth = MaxWidth.ExtraSmall };
        var result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Are you sure?"), Localizer.Get("Delete"), null, Localizer.Get("Cancel"), dialogOptions);

        if (result != null)
        {
            ItemToDelete?.Add(value);
            Item?.TaskQueries.Remove(value);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            UpdateElements();
        }

        _disable = false;
    }


    private async Task OpenCreateDialog()
    {
        var value = new ScheduledTaskQueryDto();
        var parameters = new DialogParameters { ["Item"] = value, ["DataProviderId"] = Item!.DataProvider.DataProviderId, ["Header"] = Item, ["Action"] = CrudAction.Create };

        var dialog = await DialogService.ShowAsync<_TaskDetailsFormDialog>("Create", parameters, _maxWidth);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            Item.TaskQueries.Add((ScheduledTaskQueryDto)feedback.Data);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            UpdateElements();
        }
    }

    private async Task OpenCreateDialog(ScheduledTaskQueryDto toDuplicate)
    {
        var value = new ScheduledTaskQueryDto
            {
                Query = toDuplicate.Query,
                QueryName = toDuplicate.QueryName + " (Copy)",
                QueryParameters = toDuplicate.QueryParameters,
                ExecutionOrder = toDuplicate.ExecutionOrder,
                ExecutionParameters = toDuplicate.ExecutionParameters
            };
        var parameters = new DialogParameters { ["Item"] = value, ["DataProviderId"] = Item!.DataProvider.DataProviderId, ["Header"] = Item, ["Action"] = CrudAction.Create };

        var dialog = await DialogService.ShowAsync<_TaskDetailsFormDialog>("Create", parameters, _maxWidth);
        var feedback = await dialog.Result;

        if (feedback is { Canceled: false })
        {
            Item.TaskQueries.Add(((ScheduledTaskQueryDto)feedback.Data!)!);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            UpdateElements();
        }
    }

    private void OnRefresh()
    {
        StateHasChanged();
    }

    private void RemoveFilters()
    {
        _grid?.RefreshDataAsync();
        UpdateElements();
    }

}