<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch { CrudAction.Update => Icons.Material.Filled.Edit, CrudAction.Create => Icons.Material.Filled.Create, _ => Icons.Material.Filled.DeleteForever })" Class="mr-3 mb-n1"/>
            @Localizer.Get(Action switch
            {
                CrudAction.Update => "Edit",
                CrudAction.Create => "Add",
                _ => "Delete"
            })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Item" @ref="@_form">
            <MudTextField @bind-Value="Item!.TaskName" Label="@(Item?.TypeName == TaskType.Report.ToString() ? Localizer.Get("Report title") : Item?.TypeName == TaskType.DataTransfer.ToString() ? Localizer.Get("Job title") : Localizer.Get("Alert title"))" Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete"/>
            <MudSelect T="string" Label="@Localizer.Get("Activity name")" @bind-Value="@Item!.ProviderName" AnchorOrigin="Origin.BottomCenter"
                       Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete">
                @foreach (var value in _activities)
                {
                    <MudSelectItem Value="@value.ProviderName">@value.ProviderName</MudSelectItem>
                }
            </MudSelect>
            @if (Item?.TypeName == TaskType.Report.ToString())
            {
                <MudSelect Label="@Localizer.Get("Type of file")" @bind-Value="@Item.TypeFile" AnchorOrigin="Origin.BottomCenter"
                           Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete">
                    @if (Item.TypeFile == 0)
                    {
                        <MudSelectItem Value="Item.TypeFile">@Localizer.Get("Type of file")</MudSelectItem>
                    }
                    @foreach (FileType item in Enum.GetValues(typeof(FileType)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudForm>
        @if (Action == CrudAction.Delete)
        {
            <MudTextField @bind-Value="_deletionValidation" Label="@(Localizer.Get("Confirm the deletion by entering") + ": Validate")" Required RequiredError="@Localizer.Get("Required")"/>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Color="Action == CrudAction.Delete ? Color.Error : Color.Primary" OnClick="Validate">@Localizer.Get(Action == CrudAction.Delete ? "Delete" : "Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public ScheduledTaskDto? Item { get; set; }

    [Parameter] public CrudAction Action { get; set; }

    private MudForm _form = default!;
    private string? _deletionValidation;
    private List<SelectItemDataproviderInfo> _activities = new();

    protected override async Task OnInitializedAsync()
    {
        _activities = await DataService.GetValues<SelectItemDataproviderInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async Task Validate()
    {
        if (Action == CrudAction.Delete)
        {
            if (_deletionValidation == "Validate")
            {
                Item!.DataProvider = new DataProviderDto { DataProviderId = _activities.Where(a => a.ProviderName == Item.ProviderName).Select(a => a.DataProviderId).FirstOrDefault(), ProviderName = Item.ProviderName };
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
        else
        {
            Item!.DataProvider = new DataProviderDto { DataProviderId = _activities.Where(a => a.ProviderName == Item.ProviderName).Select(a => a.DataProviderId).FirstOrDefault(), ProviderName = Item.ProviderName };
            Item.IdDataProvider = Item.DataProvider.DataProviderId;
            await _form.Validate();
            if (_form.IsValid && Item.DataProvider is not null)
            {
                if (Item.Type != TaskType.Report)
                {
                    MudDialog?.Close(DialogResult.Ok(Item));
                }
                else if (Item.TypeFile > 0)
                {
                    MudDialog?.Close(DialogResult.Ok(Item));
                }
            }
        }
    }

}