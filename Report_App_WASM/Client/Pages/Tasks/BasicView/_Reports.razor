
@implements IAsyncDisposable
@inject NavigationManager UriHelper
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>@Localizer.Get("Run reports manually"): @ActivityName</PageTitle>

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@ActivityName</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            @if (_tags.Any())
            {
                <MudChipSet @bind-SelectedValues="selected" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var value in _tags)
                    {
                        <MudChip Text="@value" Value="value" Variant="Variant.Text" OnClick="OnTagSelected" Color="Color.Default" SelectedColor="Color.Primary"></MudChip>
                    }
                </MudChipSet>
            }
            <div style="overflow: auto">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">

                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.TaskName)" Title="@Localizer.Get("Report title")" Sortable="true"/>
                    @if (_typeTask == TaskType.Report.ToString())
                    {
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.TypeFile)" Title="@Localizer.Get("Type of file")" Sortable="true"/>
                    }
                    <Blazor.SimpleGrid.TemplateColumn Title="@Localizer.Get("Run manually")">
                        <_TaskRunForm Item="context"/>
                    </Blazor.SimpleGrid.TemplateColumn>
                    @if (_typeTask == TaskType.Report.ToString())
                    {
                        <Blazor.SimpleGrid.TemplateColumn Title="@Localizer.Get("Create file manually")">
                            <_TaskDropFileForm Item="context"/>
                        </Blazor.SimpleGrid.TemplateColumn>
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ReportsRetentionInDays)" Title="@Localizer.Get("Archiving duration in days")" Sortable="true"/>
                    }
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true"/>
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
    [Parameter] public int? ActivityId { get; set; }

    [Parameter] public string? ActivityName { get; set; }

    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private readonly string _typeTask = TaskType.Report.ToString();
    GridItemsProvider<TaskHeaderDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent _translations = default!;
    SimpleGrid<TaskHeaderDto> _grid = default!;
    private bool _rendering;
    List<string> _tags = new();
    IReadOnlyCollection<string> selected = null!;

    protected override async Task OnParametersSetAsync()
    {
        var user = (await AuthenticationStateTask).User;
        if (!user.IsInRole(ActivityName!) && !user.IsInRole("Admin"))
        {
            UriHelper.NavigateTo("/403");
        }

        selected = null!;
        var type = TaskType.Report;
        var urlExt = string.Empty;
        if (!string.IsNullOrEmpty(ActivityName))
        {
            urlExt = $"&&activityId={ActivityId!.Value}";
        }

        var uri = $"{ApiControllers.CrudDataApi}GetTagsTasks?type={type}{urlExt}";
        _tags = (await Http.GetFromJsonAsync<List<string>>(uri))!;
    }

    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<TaskHeaderDto>(), 0);
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<TaskHeaderDto>?> GetRemoteData(GridItemsProviderRequest<TaskHeaderDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataSort = _grid?.GetODataSortValues();
        var odataPagination = _grid?.GetODataPaginationValues();
        var odataFilters = _grid?.GetODataFilterValues();
        var url = "odata/TaskHeader?";


        var customFilters = $"TypeName eq '{_typeTask}'";
        if (ActivityId.HasValue)
        {
            customFilters += $" and  IdActivity eq {ActivityId.Value} ";
        }

        url += "$count=true";
        if (!string.IsNullOrEmpty(odataPagination))
        {
            url += "&" + odataPagination;
        }

        if (!string.IsNullOrEmpty(odataSort))
        {
            url += "&" + odataSort;
        }

        if (!string.IsNullOrEmpty(odataFilters))
        {
            url += "&" + odataFilters + " and " + customFilters;
        }
        else
        {
            url += "&$filter=" + customFilters;
        }

        if (selected != null)
        {
            var _tagFilter = string.Empty;
            foreach (var tagSelected in selected)
            {
                _tagFilter += $" and contains(Tags, '{tagSelected}')";
            }

            url += _tagFilter;
        }

        try
        {
            return await DataService.GetODataValues<TaskHeaderDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        selected = null!;
        if (_grid != null) await _grid.RemoveFilters();
        _rendering = false;
    }

    private async Task OnTagSelected()
    {
        if (_grid != null) await OnRefresh();
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }
}