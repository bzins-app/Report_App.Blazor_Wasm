@page "/DbExplorer/{ActivityId:int}/{ActivityName}"
@inject HttpClient Http
@using Blazor.AceEditorJs
@using Report_App_WASM.Shared.Extensions;
@using Report_App_WASM.Shared.RemoteQueryParameters
@implements IDisposable
@attribute [Authorize]

<PageTitle>@Localizer.Get("DB explorer")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @Localizer.Get("DB explorer")
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <MudText Typo="Typo.subtitle1" Color="Color.Error">@Localizer.Get("An error has occurred"): @_errorMessage</MudText>
                }
                <MudButton Disabled="@_loading" OnClick="GetTablesList" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                    @if (_loading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">@Localizer.Get("Processing")</MudText>
                    }
                    else
                    {
                        <MudText>@Localizer.Get("Get tables list")</MudText>
                    }
                </MudButton>
                @if (_loading)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="CancelQuery">
                        <MudText Class="ms-2">@Localizer.Get("Cancel")</MudText>
                    </MudButton>
                }
                <MudGrid>
                    <MudItem lg="7">
                        <MudTable Items="@TableNames" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" Filter="new Func<DescriptionValues, bool>(FilterFuncTables)" Height="70vh" Virtualize="true" Elevation="4">
                            <ToolBarContent>
                                <MudTextField @bind-Value="searchTables" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh></MudTh>
                                <MudTh>@Localizer.Get("Db tables")</MudTh>
                                @if (_hasDesc)
                                {
                                    <MudTh>@Localizer.Get("Description")</MudTh>
                                }
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd><MudIconButton Icon="@Icons.Material.Outlined.BlurLinear" OnClick="() => DisplayTableValues(context.Name)" Title="@Localizer.Get("Display table values")" Size="Size.Small" /></MudTd>
                                <MudTd @ondblclick="() => GetColumnsList(context.Name)">@context.Name</MudTd>
                                @if (_hasDesc)
                                {
                                    <MudTh>@context.Description</MudTh>
                                }
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                    <MudItem lg="5">
                        <MudTable Items="@ColNames" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" Filter="new Func<DescriptionValues , bool>(FilterFuncCols)" Height="70vh" Virtualize="true" Elevation="4">
                            <ToolBarContent>
                                <MudTextField @bind-Value="searchCols" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh>@Localizer.Get("Columns")</MudTh>
                                @if (_hasDescCol)
                                {
                                    <MudTh>@Localizer.Get("Description")</MudTh>
                                }
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Name</MudTd>
                                @if (_hasDescCol)
                                {
                                    <MudTh>@context.Description</MudTh>
                                }
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" md="6">
                <div>
                    <MudButton Disabled="@_loadingTestQuery" OnClick="RunSql" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium">
                        @if (_loadingTestQuery)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">@Localizer.Get("Processing")</MudText>
                        }
                        else
                        {
                            <MudText>@Localizer.Get("Test query")</MudText>
                        }
                    </MudButton>
                    @if (_loadingTestQuery)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="CancelQuery">
                            <MudText Class="ms-2">@Localizer.Get("Cancel")</MudText>
                        </MudButton>
                    }
                    @if (!string.IsNullOrEmpty(_queryTestResult))
                    {
                        <div class="form-group">
                            <p style="color: red">@_queryTestResult</p>
                        </div>
                    }
                    <Blazor.AceEditorJs.AceJsEditor @bind-Value="@QueryBuilder" Options="@_opt" Style="height: 35vh" />

                    <MudTable ServerData="@(new Func<TableState, Task<TableData<Dictionary<string, object>.ValueCollection>>>(ServerReload))" Hover="true" Dense="true" Height="35vh" FixedHeader="true" HorizontalScrollbar="true" @ref="_table" RowsPerPage="20" Virtualize="true" Elevation="4">
                        <HeaderContent>
                            @if (_values?.Any() == true)
                            {
                                @foreach (var key in _values?.FirstOrDefault()?.Keys!)
                                {
                                    <MudTh Style="padding-top: 10px">@key</MudTh>
                                }
                            }
                        </HeaderContent>
                        <RowTemplate>
                            @if (_values?.Any() == true)
                            {
                                @foreach (var t in context)
                                {
                                    @if (t.ToString() == "{}")
                                    {
                                        <MudTd></MudTd>
                                    }
                                    else
                                    {
                                        <MudTd>@t</MudTd>
                                    }
                                }
                            }
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="@Localizer.Get("Rows per page")" InfoFormat="@string.Format("{0}first_item{1}-{0}last_item{1} {2} {0}all_items{1}","{","}",Localizer.Get("of") )" />
                        </PagerContent>
                    </MudTable>
                </div>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public string ActivityName { get; set; } = default!;
    [Parameter] public int ActivityId { get; set; }

    private List<DescriptionValues> TableNames = new();
    private List<DescriptionValues> ColNames = new();
    private string searchTables = "";
    private string searchCols = "";
    private bool _loading;
    private bool _loadingTestQuery;
    private bool _hasDesc;
    private bool _hasDescCol;

    private string? QueryBuilder;
    private string? QueryRun;
    private CancellationTokenSource? _cts;

    private bool _isDarkMode;
    private AceEditorOptions? _opt;
    private TypeDb _typeDbTask;

    MudTable<Dictionary<string, object>.ValueCollection>? _table = new();
    private List<Dictionary<string, object>>? _values = new();
    int[] _pageSizeOptions = { 10, 20, 50, 100 };
    private string? _errorMessage;
    private string? _queryTestResult { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        TableNames = new();
        ColNames = new();
        searchTables = "";
        searchCols = "";
        QueryRun = "";
        QueryBuilder = "";
        _table = new();        var uri = $"GetActivityDbConnection?ActivityId={ActivityId}";
        var response = await DataService.GetValues<ActivityDbConnectionDto>(uri);
        if (response.Any())
        {
            _typeDbTask = response.Select(a => a.TypeDb).First();
        }
        _isDarkMode = UserAppTheme.DarkTheme;
        _opt = new AceEditorOptions
        {
            IsReadOnly = false,
            Language = _typeDbTask switch
            {
                TypeDb.MySql => AceLanguage.mysql,
                TypeDb.MariaDb => AceLanguage.mysql,
                TypeDb.SqlServer => AceLanguage.sqlserver,
                _ => AceLanguage.sql
                },
            Theme = _isDarkMode ? AceTheme.tomorrow_night : AceTheme.sqlserver
        };
    }

    private async Task GetTablesList()
    {
        _cts = new CancellationTokenSource();
        _loading = true;
        var data = await Http.GetFromJsonAsync<DbTablesColList>($"{ApiControllers.RemoteDbApi}GetTablesList?activityId={ActivityId}", _cts.Token);
        TableNames = data!.Values;
        _hasDesc = data.HasDescription;
        _loading = false;
    }

    private async Task GetColumnsList(string table)
    {
        _cts = new CancellationTokenSource();
        _loading = true;
        var data = await Http.GetFromJsonAsync<DbTablesColList>($"{ApiControllers.RemoteDbApi}GetColumnList?activityId={ActivityId}&table={table}", _cts.Token);
        ColNames = data!.Values;
        _hasDescCol = data.HasDescription;
        _loading = false;
    }

    private bool FilterFuncTables(DescriptionValues element) => FilterTables(element, searchTables);

    private bool FilterTables(DescriptionValues element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (!string.IsNullOrEmpty(element.Name) && element.Name.ToLower().RemoveDiacritics().Contains(searchString.ToLower().RemoveDiacritics(), StringComparison.InvariantCultureIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(element.Description) && element.Description.ToLower().RemoveDiacritics().Contains(searchString.ToLower().RemoveDiacritics(), StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private bool FilterFuncCols(DescriptionValues element) => FilterTables(element, searchCols);

    void CancelQuery()
    {
        _cts?.Cancel();
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }

    private async Task DisplayTableValues(string tableName)
    {
        _loading = true;
        string query = $"select  * from {tableName}";
        QueryRun = query;
        _table!.CurrentPage = 0;
        await _table.ReloadServerData();
        _loading = false;
    }

    private async Task RunSql()
    {
        _loadingTestQuery = true;
        if (string.IsNullOrEmpty(QueryBuilder))
        {
            _queryTestResult = "query is not set";
        }
        else
        {
            QueryRun = QueryBuilder;
            _table!.CurrentPage = 0;
            await _table.ReloadServerData();
        }
        _loadingTestQuery = false;
    }

    private async Task<TableData<Dictionary<string, object>.ValueCollection>> ServerReload(TableState state)
    {
        var currentPage = state.Page;
        var pageSize = state.PageSize;
        if (string.IsNullOrEmpty(QueryRun))
        {
            _values = new List<Dictionary<string, object>>();
        }
        else
        {
            try
            {
                _cts = new CancellationTokenSource();

                var run = new RemoteDbCommandParameters { ActivityId = ActivityId, QueryToRun = QueryRun, Test = true, PaginatedResult = true, StartRecord = currentPage * pageSize, MaxSize = pageSize + 1, LastRunDateTime = DateTime.Now, QueryCommandParameters = new() };
                var remoteDataPayload = new RemoteDataPayload { Values = run };
                var uri = $"{ApiControllers.RemoteDbApi}RemoteDbGetValues";
                var response = await Http.PostAsJsonAsync(uri, remoteDataPayload, _cts.Token);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<SubmitResultRemoteData>();
                    if (result!.Success)
                    {
                        _values = result.Value;
                        _queryTestResult = null!;
                    }
                    else
                    {
                        _queryTestResult = result.Message;
                        _values = new List<Dictionary<string, object>>();
                    }
                }
                else
                {
                    _values = new List<Dictionary<string, object>>();
                    _queryTestResult = response.Content.ToString();
                }
            }
            catch (Exception ex)
            {
                _values = new List<Dictionary<string, object>>();
                _queryTestResult = ex.Message;
            }
        }
        return new TableData<Dictionary<string, object>.ValueCollection>() { TotalItems = _values!.Count < pageSize + 1 ? _values.Count + currentPage * pageSize : currentPage * pageSize + pageSize + 1, Items = _values?.Select(a => a.Values).ToList() };
    }
}
