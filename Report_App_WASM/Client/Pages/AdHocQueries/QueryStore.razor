@page "/QueryStore/{ActivityId:int}/{ActivityName}"
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>@_pageTitle</PageTitle>


<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @_pageTitle
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="1" >
            <MudItem md="3" lg="2">
                <MudPaper>
                    @if (_tree != null)
                    {
                        @_tree
                    }
                </MudPaper>
            </MudItem>
            <MudItem md="9" lg="10">
                @if(_queryRender!=null)
                {
                    <MudText Typo="Typo.h6">
                        @_queryName
                    </MudText>
                    @_queryRender
                }
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public string ActivityName { get; set; } = default!;

    [Parameter] public int? ActivityId { get; set; }

    private string? _pageTitle;
    private List<QueryStoreDto> _queries;

    private class QueryTree
    {
        public string QueryName { get; set; }
        public int QueryId { get; set; } = 0;
    }
    private List<TreeItemData<QueryTree>> InitialTreeItems;
    public RenderFragment? _tree { get; set; }
    public RenderFragment? _queryRender { get; set; }
    private string _queryName = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _pageTitle = Localizer.Get("Queries store");

        var urlExt = string.Empty;
        if (!string.IsNullOrEmpty(ActivityName))
        {
            urlExt = $"?activityId={ActivityId!.Value}";
        }

        var uri = $"{ApiControllers.CrudDataApi}GetQueryStoreByActivity{urlExt}";
        try
        {
            _queries = (await Http.GetFromJsonAsync<List<QueryStoreDto>>(uri))!;
        }
        catch
        {
            _queries = new List<QueryStoreDto>();
        }

        var user = await AuthenticationStateProvider.GetUserInfo();
        if (!string.IsNullOrEmpty(ActivityName))
        {
            _pageTitle += ": " + ActivityName;
            if (user != null && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains(ActivityName) && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin"))
            {
                NavigationManager.NavigateTo("/403");
            }

        }
        var _serializedTags = new List<string>();
        _serializedTags   = _queries.Where(a => a.Tags != "[]" && !string.IsNullOrEmpty(a.Tags)).Select(a => a.Tags).ToList();
        var _tags = new List<string>();
         _tags = _serializedTags
            .SelectMany(value => JsonSerializer.Deserialize<List<string>>(value)!)
            .Distinct().ToList();

        InitialTreeItems = new List<TreeItemData<QueryTree>>();
        InitialTreeItems.Clear();

        if(_queries.Where(a=>a.Tags=="[]").Any())
            InitialTreeItems.Add(new TreeItemData<QueryTree> { Value = new QueryTree { QueryName = "Uncategorized", }, Icon = Icons.Material.Filled.Label, Expandable = true});

        foreach (var tag in _tags)
        {
            InitialTreeItems.Add(new TreeItemData<QueryTree> { Value = new QueryTree { QueryName = tag, }, Icon = Icons.Material.Filled.Label, Expandable = true });
        }

        foreach (var q in _queries)
        {
            if (q.Tags == "[]")
            {
                var item = InitialTreeItems.FirstOrDefault(a => a.Value.QueryName == "Uncategorized");
                if (item != null)
                {
                    if (!item.HasChildren)
                    {
                        item.Children=new List<TreeItemData<QueryTree>>();
                    }
                    item.Children.Add(new TreeItemData<QueryTree> { Value = new QueryTree { QueryName = q.QueryName, QueryId = q.Id }, Icon = Icons.Material.Filled.QueryStats, Expandable = false });
                }
            }
            else
            {
                foreach (var tag in _tags)
                {
                    if (q.Tags.Contains(tag))
                    {
                        var item = InitialTreeItems.FirstOrDefault(a => a.Value.QueryName == tag);
                        if (item != null)
                        {                    if (!item.HasChildren)
                            {
                                item.Children=new List<TreeItemData<QueryTree>>();
                            }
                            item.Children.Add(new TreeItemData<QueryTree> { Value = new QueryTree { QueryName = q.QueryName, QueryId = q.Id }, Icon = Icons.Material.Filled.QueryStats, Expandable = false });
                        }
                    }
                }
            }
        }

        _tree = (__builder) =>
        {
            <MudTreeView Items="@InitialTreeItems" Height="82vh" ReadOnly="false" Dense="true" Class="overflow-x-auto" Ripple="false" Expanded Icon="@Icons.Custom.Uncategorized.Folder" IconExpanded="@Icons.Custom.Uncategorized.FolderOpen">
                <ItemTemplate >
                    @if (context.HasChildren)
                    {
                    <MudTreeViewItem Text="@context.Value?.QueryName" Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" Items="@context.Children" Expanded="true"/>
                    }
                    else if(context.Value.QueryId>0)
                    {
                    <MudTreeViewItem Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="false" >
                        <BodyContent Context="item">
                            <MudText>@item.Value?.QueryName</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Launch" Size="Size.Small" Class="ms-2" title="@Localizer.Get("Run query")"  OnClick="@(e => ExecuteQuery(item.Value.QueryId))"/>
                        </BodyContent>
                    </MudTreeViewItem>
                    }
                </ItemTemplate>
            </MudTreeView>
        };
        _queryRender = null;
        _queryName=string.Empty;
        StateHasChanged();
    }

    private async Task ExecuteQuery(int queryId)
    {
        _queryName = _queries.FirstOrDefault(a => a.Id == queryId)?.QueryName ?? string.Empty;
        _queryRender = null;
     await   Task.Delay(10);
        _queryRender = (__builder) =>
        {
            <_ExceuteQuery QueryId="@queryId" />
        };
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);
    }

}
