@page "/QueryStore/{DataProviderId:int}/{ProviderName}"
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>@_pageTitle</PageTitle>


<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @_pageTitle
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent Style="padding:5px">
        <MudGrid Spacing="1" Style="min-height:82vh">
            @if (_open)
            {
                <MudItem md="3" lg="2">
                    <MudPaper>
                        @if (_QueriesFragment != null)
                        {
                            @_QueriesFragment
                        }
                    </MudPaper>
                </MudItem>
            }
            <MudItem md="@(_open ? 9 : 12)" lg="@(_open ? 10 : 12)">
                @if (_queryRender != null)
                {
                    <MudStack Row="true">
                        <MudIconButton Icon="@(_open ? Icons.Material.Filled.KeyboardDoubleArrowLeft : Icons.Material.Filled.KeyboardDoubleArrowRight)" Size="Size.Small" OnClick="@ToggleTree" title="@(_open ? Localizer.Get("Close") : Localizer.Get("Open"))"/>
                        <MudText Typo="Typo.h6">
                            @_queryName
                        </MudText>
                    </MudStack>
                    @_queryRender
                }
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public string ProviderName { get; set; } = default!;

    [Parameter] public int? DataProviderId { get; set; }

    private string? _pageTitle;
    private List<StoredQueryDto> _queries;
    private List<StoredQueryDto> _filteredQueries;

    public RenderFragment? _QueriesFragment { get; set; }
    public RenderFragment? _queryRender { get; set; }
    private string _queryName = string.Empty;
    private bool _open = true;
    List<string> _tags;
    IReadOnlyCollection<string>? selected;

    protected override async Task OnParametersSetAsync()
    {
        _pageTitle = Localizer.Get("Queries store");

        var urlExt = string.Empty;
        if (!string.IsNullOrEmpty(ProviderName))
        {
            urlExt = $"?DataProviderId={DataProviderId!.Value}";
        }

        var uri = $"{ApiControllers.CrudDataApi}GetQueryStoreByActivity{urlExt}";
        try
        {
            _queries = (await Http.GetFromJsonAsync<List<StoredQueryDto>>(uri))!;
        }
        catch
        {
            _queries = new List<StoredQueryDto>();
        }

        var user = await AuthenticationStateProvider.GetUserInfo();
        if (!string.IsNullOrEmpty(ProviderName))
        {
            _pageTitle += ": " + ProviderName;
            if (user != null && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains(ProviderName) && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin"))
            {
                NavigationManager.NavigateTo("/403");
            }
        }

        var _serializedTags = new List<string>();
        _serializedTags = _queries.Where(a => a.Tags != "[]" && !string.IsNullOrEmpty(a.Tags)).Select(a => a.Tags).ToList();
        _tags = new List<string>();
        _tags = _serializedTags
            .SelectMany(value => JsonSerializer.Deserialize<List<string>>(value)!)
            .Distinct().ToList();

        _filteredQueries = _queries;
        _QueriesFragment = (__builder) =>
        {
            @if (_tags.Any())
            {
                <MudChipSet @bind-SelectedValues="selected" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var value in _tags)
                    {
                        <MudChip Text="@value" Value="value" Variant="Variant.Text" OnClick="OnTagSelected" Color="Color.Default" SelectedColor="Color.Primary"></MudChip>
                    }
                </MudChipSet>
            }

            <MudTable Items="@_filteredQueries" Dense="true" Hover="true" Bordered="true" Striped="true" FixedHeader="true" Height="70vh" Virtualize="true" Elevation="0">
                <HeaderContent>
                    <MudTh style="width:50px;"></MudTh>
                    <MudTh>@Localizer.Get("Query name")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Launch" Size="Size.Small" Class="ms-2" title="@Localizer.Get("Run query")" OnClick="@(_ => ExecuteQuery(context.Id))"/>
                    </MudTd>
                    <MudTd >@context.QueryName</MudTd>
                </RowTemplate>
            </MudTable>
        };
        _queryRender = null;
        _queryName = string.Empty;
        StateHasChanged();
    }

    private async Task ExecuteQuery(int queryId)
    {
        _queryName = _queries.FirstOrDefault(a => a.Id == queryId)?.QueryName ?? string.Empty;
        _queryRender = null;
        await Task.Delay(10);
        _queryRender = (__builder) =>
        {
            <MudCardContent Style="padding:5px">
                <_ExceuteQuery QueryId="@queryId"/>
            </MudCardContent>
        };
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        GC.SuppressFinalize(this);
    }

    private void ToggleTree()
    {
        _open = !_open;
    }

    private async Task OnTagSelected()
    {
        _filteredQueries = _queries;
        if (selected != null && selected.Any())
        {
            foreach (var t in selected)
            {
                _filteredQueries = _filteredQueries.Where(a => a.Tags.Contains(t)).ToList();
            }
        }
    }

}