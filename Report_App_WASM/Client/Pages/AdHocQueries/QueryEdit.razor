@page "/QueryEdit/{QueryId:int}"
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager UriHelper
@inject HttpClient Http
@using Report_App_WASM.Shared.Extensions
@using Report_App_WASM.Shared.RemoteQueryParameters
@using Blazor.AceEditorJs
@using MudBlazor.Utilities
@implements IDisposable
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("Query editor")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
                @Localizer.Get("Query editor")
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="Back">@Localizer.Get("Back")</MudButton>
            @*<MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Warning" OnClick="UpdateValues" Disabled="!_changesToSave">@Localizer.Get("Restore")</MudButton>*@
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangeAsync">@Localizer.Get("Save changes")</MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">@Localizer.Get("An error has occurred"): @_errorMessage</MudText>
        }
        @if (Item != null)
        {
            <MudForm FieldChanged="FormChanged">
                <MudGrid>
                    <MudItem>
                        <MudTextField @bind-Value="Item.QueryName" Label="@Localizer.Get("Query name")" InputType="InputType.Text" Style="min-width: 200px"/>
                    </MudItem>
                    <MudItem>
                        @if (_activities.Any())
                        {
                            <MudSelect T="int" Label="@Localizer.Get("Activity name")" @bind-value="Item.IdActivity"
                                       AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="OnSelectedItemChangedHandler" Style="min-width: 200px"
                                       Required>
                                @foreach (var value in _activities)
                                {
                                    <MudSelectItem Value="@value.ActivityId">@value.ActivityName</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>
                    <MudItem>
                        <MudSwitch @bind-Checked="parameters.CalculateTotalItems" Label="@Localizer.Get("Calculate the total nbr of results?")" Color="Color.Primary"/>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem sm="12" md="6">
                        <MudTextField T="string" Label="@Localizer.Get("Comment")" Variant="Variant.Filled" @bind-Text="@Item.Comment" Lines="3"/>
                    </MudItem>
                    <MudItem sm="12" md="6">
                        <p>Tags</p>
                        <MudPaper Class="pa-2" Outlined="true">
                            <MudChipSet AllClosable="true" OnClose="RemoveTag">
                                @foreach (var value in _tags)
                                {
                                    <MudChip Text="@value"></MudChip>
                                }
                            </MudChipSet>
                            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OpenPopOver">@Localizer.Get("Add")</MudIconButton>
                            <MudPopover Open="@_openPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4">
                                <div class="d-flex flex-column">
                                    <MudTextField @bind-Value="_tagValue" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                    <MudButton OnClick="@ClosePopOver" Variant="Variant.Text" Color="Color.Error">@Localizer.Get("Close")</MudButton>
                                </div>
                            </MudPopover>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
        <MudGrid>
            <MudItem sm="12" md="6">
                <MudLoadingButton @bind-Loading="_loading" LoadingAdornment="Adornment.Start" LoadingCircularColor="Color.Primary" OnClick="RunSql" Variant="Variant.Filled" Color="Color.Primary">
                    <LoadingContent>
                        <MudText>@Localizer.Get("Processing")</MudText>
                    </LoadingContent>
                    <ChildContent>
                        <MudText>@Localizer.Get("Test query")</MudText>
                    </ChildContent>
                </MudLoadingButton>
                @if (_loading)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="CancelQuery">
                        <MudText Class="ms-2">@Localizer.Get("Cancel")</MudText>
                    </MudButton>
                }
                <div class="form-group">
                    <p style="color: red">@_queryTestResult</p>
                </div>
                @if (Item != null)
                {
                    @if (_typeDbTask != TypeDb.Db2)
                    {
                        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                            <MudTabPanel Text="SQL">
                                <Blazor.AceEditorJs.AceJsEditor @bind-Value="@Item.Query" Options="@_opt" Style="height: 55vh"/>
                            </MudTabPanel>
                            <MudTabPanel Text="@Localizer.Get("Query parameters")">
                                <CascadingValue Value="_changesToSave">
                                    <_AdHocQueryParameters Item="Item" Style="height: 75vh" @ref="_refQuery" ValueChanged="ParametersChange"/>
                                </CascadingValue>
                            </MudTabPanel>
                        </MudTabs>
                    }
                    else
                    {
                        <Blazor.AceEditorJs.AceJsEditor @bind-Value="@Item.Query" Options="@_opt" Style="height: 65vh"/>
                    }
                }
            </MudItem>
            <MudItem sm="12" md="6">
                @if (param.Count > 0)
                {
                    <MudPaper Class="pa-2" Outlined="true" Style="padding-bottom: 5px">
                        <MudForm @ref="_validateParam">
                            <MudGrid>
                                @foreach (var t in param!.Where(a => !a.HideParameter).OrderBy(a => a.DisplaySequence))
                                {
                                    <MudItem>
                                        @if (t.ValueType == QueryCommandParameterValueType.Date)
                                        {
                                            <MudTextField InputType="InputType.Date" Required="@t.Required" Format="yyyy-MM-dd" @bind-Value="t.Value" Label="@(string.IsNullOrEmpty(t.DisplayName) ? t.ParameterIdentifier : t.DisplayName)" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                        }
                                        @if (t.ValueType == QueryCommandParameterValueType.DateTime)
                                        {
                                            <MudTextField InputType="InputType.DateTimeLocal" Required="@t.Required" Format="s" @bind-Value="t.Value" Label="@(string.IsNullOrEmpty(t.DisplayName) ? t.ParameterIdentifier : t.DisplayName)" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                        }
                                        @if (t.ValueType == QueryCommandParameterValueType.Number)
                                        {
                                            <MudTextField InputType="InputType.Number" @bind-Value="t.Value" Required="@t.Required" Label="@(string.IsNullOrEmpty(t.DisplayName) ? t.ParameterIdentifier : t.DisplayName)" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                        }
                                        @if (t.ValueType == QueryCommandParameterValueType.String)
                                        {
                                            <MudTextField InputType="InputType.Text" @bind-Value="t.Value" Required="@t.Required" Label="@(string.IsNullOrEmpty(t.DisplayName) ? t.ParameterIdentifier : t.DisplayName)" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                                        }
                                    </MudItem>
                                }
                            </MudGrid>
                            <div style="padding-top: 5px">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmText" Class="px-10">@Localizer.Get("Validate")</MudButton>
                            </div>
                        </MudForm>
                    </MudPaper>
                }
                <MudTable ServerData="@(new Func<TableState, Task<TableData<Dictionary<string, object>.ValueCollection>>>(ServerReload))" Hover="true" Dense="true" Striped="true" Height="60vh" FixedHeader="true" HorizontalScrollbar="true" @ref="_table" RowsPerPage="20" Virtualize="true" Elevation="4">
                    <HeaderContent>
                        @if (_values?.Any() == true)
                        {
                            @foreach (var key in _values?.FirstOrDefault()?.Keys!)
                            {
                                <MudTh>@key</MudTh>
                            }
                        }
                    </HeaderContent>
                    <RowTemplate>
                        @if (_values?.Any() == true)
                        {
                            @foreach (var t in context)
                            {
                                @if (t.ToString() == "{}")
                                {
                                    <MudTd></MudTd>
                                }
                                else
                                {
                                    <MudTd>@t</MudTd>
                                }
                            }
                        }
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="@Localizer.Get("Rows per page")" InfoFormat="@string.Format("{0}first_item{1}-{0}last_item{1} {2} {0}all_items{1}", "{", "}", Localizer.Get("of"))"/>
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {

    [Parameter]
    public int QueryId { get; set; }

    private QueryStoreDto? Item;
    private TypeDb _typeDbTask;
    private List<Dictionary<string, object>>? _values = new();
    private string? _queryTestResult { get; set; }
    private bool _isDarkMode;
    private AceEditorOptions? _opt;
    private _AdHocQueryParameters? _refQuery;
    private CancellationTokenSource? _cts;
    private bool _loading;
    MudTable<Dictionary<string, object>.ValueCollection>? _table = new();
    int[] _pageSizeOptions = { 10, 20, 50, 100 };
    private bool _changesToSave;
    private string? _errorMessage;
    private List<SelectItemActivitiesInfo> _activities = new();
    private List<QueryCommandParameter> param = new();
    private MudForm? _validateParam = new();
    bool _formParamValidated = true;
    AdHocQueriesParameters parameters = new();
    List<string> _tags = new();
    private bool _openPopOver;
    string _tagValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UpdateValues();
        StateHasChanged();
    }

    private async Task UpdateValues()
    {
        var uriAction = $"GetQueryStore?queryId={QueryId}";
        Item = await DataService.GetUniqueValue(Item, uriAction);
        if (Item != null)
        {
            var uri = $"GetActivityDbConnection?ActivityId={Item.IdActivity}";
            var response = await DataService.GetValues<ActivityDbConnectionDto>(uri);
            if (response.Any())
            {
                _typeDbTask = response.Select(a => a.TypeDb).First();
            }
        }
        _isDarkMode = UserAppTheme.DarkTheme;
        _opt = new AceEditorOptions
        {
            IsReadOnly = false,
            Language = _typeDbTask switch
            {
                TypeDb.MySql => AceLanguage.mysql,
                TypeDb.MariaDb => AceLanguage.mysql,
                TypeDb.SqlServer => AceLanguage.sqlserver,
                _ => AceLanguage.sql
                },
            Theme = _isDarkMode ? AceTheme.tomorrow_night : AceTheme.sqlserver
        };
        _activities = await DataService.GetValues<SelectItemActivitiesInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);
        _changesToSave = false;
        param.Clear();

        if (Item!.QueryParameters != "[]" && !string.IsNullOrEmpty(Item.QueryParameters))
        {
            var desParam = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Item.QueryParameters);
            foreach (var value in desParam!)
            {
                if (param!.All(a => a.ParameterIdentifier != value.ParameterIdentifier))
                {
                    param?.Add(value);
                }
            }
            foreach (var t in param!.Where(t => t.ValueType == QueryCommandParameterValueType.Date || t.ValueType == QueryCommandParameterValueType.DateTime))
            {
                if (t.ValueType == QueryCommandParameterValueType.Date)
                {
                    t.Value = t.DateOption.GetCalculateDateTime().Date.ToString("yyyy-MM-dd");
                }
                if (t.ValueType == QueryCommandParameterValueType.DateTime)
                {
                    t.Value = t.DateOption.GetCalculateDateTime().ToString("s");
                }
            }
        }
        if (Item!.Parameters != "[]" && !string.IsNullOrEmpty(Item.Parameters))
        {
            parameters = JsonSerializer.Deserialize<AdHocQueriesParameters>(Item.Parameters)!;
        }
        if (!string.IsNullOrEmpty(Item.Tags) && Item.Tags != "[]")
        {
            _tags = JsonSerializer.Deserialize<List<string>>(Item.Tags);
        }
    }

    private async Task RunSql()
    {
        if (string.IsNullOrEmpty(Item?.Query))
        {
            _queryTestResult = "query is not set";
        }
        else
        {
            param.Clear();
            _refQuery?.UpdateParameters();

            if (Item!.QueryParameters != "[]" && !string.IsNullOrEmpty(Item.QueryParameters))
            {
                var desParam = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Item.QueryParameters);
                foreach (var value in desParam!.Where(value => param.All(a => a.ParameterIdentifier != value.ParameterIdentifier)))
                {
                    param?.Add(value);
                }
                foreach (var t in param!.Where(t => t.ValueType == QueryCommandParameterValueType.Date || t.ValueType == QueryCommandParameterValueType.DateTime))
                {
                    if (t.ValueType == QueryCommandParameterValueType.Date)
                    {
                        t.Value = t.DateOption.GetCalculateDateTime().Date.ToString("yyyy-MM-dd");
                    }
                    if (t.ValueType == QueryCommandParameterValueType.DateTime)
                    {
                        t.Value = t.DateOption.GetCalculateDateTime().ToString("s");
                    }
                }
            }
            if (_table != null)
            {
                _table.CurrentPage = 0;
                if (param!.Count > 0)
                {
                    await ConfirmText();
                }
                else
                {
                    await _table.ReloadServerData();
                }
            }
        }
    }

    private async Task ConfirmText()
    {
        if (_validateParam != null)
        {
            await _validateParam.Validate();
            _formParamValidated = _validateParam.IsValid;
        }
        await _table?.ReloadServerData()!;
    }

    private async Task<TableData<Dictionary<string, object>.ValueCollection>> ServerReload(TableState state)
    {
        _loading = true;
        var currentPage = state.Page;
        var pageSize = state.PageSize;
        if (Item == null)
        {
            _values = new List<Dictionary<string, object>>();
        }
        else if (string.IsNullOrEmpty(Item.Query))
        {
            _values = new List<Dictionary<string, object>>();
        }
        else if (!_formParamValidated)
        {
            _values = new List<Dictionary<string, object>>();
        }
        else
        {
            try
            {
                _cts = new CancellationTokenSource();

                var run = new RemoteDbCommandParameters { ActivityId = Item.IdActivity, QueryToRun = Item.Query, Test = true, PaginatedResult = true, StartRecord = currentPage * pageSize, MaxSize = pageSize + 1, LastRunDateTime = DateTime.Now, QueryCommandParameters = param };
                var remoteDataPayload = new RemoteDataPayload { Values = run };
                var uri = $"{ApiControllers.RemoteDbApi}RemoteDbGetValues";
                var response = await Http.PostAsJsonAsync(uri, remoteDataPayload, _cts.Token);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<SubmitResultRemoteData>();
                    if (result!.Success)
                    {
                        _values = result.Value;
                        _queryTestResult = null!;
                        _changesToSave = true;
                    }
                    else
                    {
                        _queryTestResult = result.Message;
                        _values = new List<Dictionary<string, object>>();
                    }
                }
                else
                {
                    _values = new List<Dictionary<string, object>>();
                    _queryTestResult = response.Content.ToString();
                }
            }
            catch (Exception ex)
            {
                _values = new List<Dictionary<string, object>>();
                _queryTestResult = ex.Message;
            }
        }
        _loading = false;
        return new TableData<Dictionary<string, object>.ValueCollection> { TotalItems = _values!.Count < pageSize + 1 ? _values.Count + currentPage * pageSize : currentPage * pageSize + pageSize + 1, Items = _values?.Select(a => a.Values).ToList() };
    }

    void CancelQuery()
    {
        _cts?.Cancel();
    }

    private async Task Back()
    {
        var uri = $"/QueryStore/{Item!.IdActivity}/{Item.Activity!.ActivityName}";

        if (_changesToSave)
        {
            DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, DisableBackdropClick = false, MaxWidth = MaxWidth.ExtraSmall };
            var result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Are you sure?") + Environment.NewLine + Localizer.Get("There are changes pending"), Localizer.Get("Confirm"), null, Localizer.Get("Cancel"), dialogOptions);

            if (result != null)
            {
                UriHelper.NavigateTo(uri);
            }
            return;
        }
        UriHelper.NavigateTo(uri);
    }


    private async Task SaveChangeAsync()
    {
        try
        {
            _errorMessage = "";
            Item.Parameters = JsonSerializer.Serialize(parameters);
            Item.Tags = JsonSerializer.Serialize(_tags);
            Item.ActivityName = _activities.Where(a => a.ActivityId == Item.IdActivity).Select(a => a.ActivityName).FirstOrDefault();
            var result = await DataService.PostValues(Item, "QueryStoreUpdate");
            if (result.Success)
            {
                _changesToSave = false;
                Snackbar.Add(Localizer.Get("Object updated"), Severity.Success);
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
            _errorMessage = e.Message;
        }
    }

    private void OnSelectedItemChangedHandler(IEnumerable<int> actId)
    {
        var _activityId = actId.FirstOrDefault();
        Item!.Activity = new ActivityDto { ActivityId = _activities.Where(a => a.ActivityId == _activityId).Select(a => a.ActivityId).FirstOrDefault(), ActivityName = _activities.Where(a => a.ActivityId == _activityId).Select(a => a.ActivityName).FirstOrDefault() };
        Item.IdActivity = Item.Activity.ActivityId;
        Item.ActivityName = Item.Activity.ActivityName;
    }

    private void FormChanged(FormFieldChangedEventArgs e)
    {
        _changesToSave = true;
    }

    private void ParametersChange()
    {
        _changesToSave = true;
    }

    private void RemoveTag(MudChip chip)
    {
        _tags.Remove(chip.Text);
        _changesToSave = true;
    }

    private void OpenPopOver()
    {
        _tagValue = string.Empty;
        _openPopOver = true;
    }

    private void ClosePopOver()
    {
        if (!string.IsNullOrEmpty(_tagValue))
        {
            _tags.Add(_tagValue.RemoveSpecialCharacters().RemoveDiacritics());
            _changesToSave = true;
        }
        _tagValue = string.Empty;
        _openPopOver = false;
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }

}