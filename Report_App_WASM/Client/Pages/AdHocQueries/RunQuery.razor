@page "/RunQuery/{QueryId:long}/{DataProviderId:long}/{ProviderName}"
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>@Localizer.Get("Run query")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @Localizer.Get("Run query"): @Item?.QueryName
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="Back">@Localizer.Get("Back")</MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <_ExceuteQuery QueryId="@QueryId"/>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public long QueryId { get; set; }

    [Parameter] public string ProviderName { get; set; } = default!;

    [Parameter] public long DataProviderId { get; set; }

    private StoredQueryDto? Item;


    protected override async Task OnInitializedAsync()
    {
        var user = await AuthenticationStateProvider.GetUserInfo();
        if (user != null && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains(ProviderName) && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin"))
        {
            NavigationManager.NavigateTo("/403");
        }

        var uriAction = $"GetQueryStore?queryId={QueryId}";
        Item = await DataService.GetUniqueValue(Item, uriAction);
    }

    private async Task Back()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }

}