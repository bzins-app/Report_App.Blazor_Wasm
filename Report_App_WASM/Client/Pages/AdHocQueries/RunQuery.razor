@page "/RunQuery/{QueryId:int}"
@using Report_App_WASM.Shared.Extensions
@using Report_App_WASM.Shared.RemoteQueryParameters
@implements IDisposable
@inject HttpClient Http
@attribute [Authorize]

<PageTitle>@Localizer.Get("Run query")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                @Localizer.Get("Run query"): @Item?.QueryName
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">@Localizer.Get("An error has occurred"): @_errorMessage</MudText>
        }

                @if (param.Count > 0)
                {
                    <MudPaper Class="pa-2" Outlined="true" Style="padding-bottom: 5px">
                        <MudForm @ref="_validateParam">
                            <MudGrid>
                                @foreach (var t in param!)
                                {
                                    <MudItem>
                                        @if (t.ValueType == QueryCommandParameterValueType.Date)
                                        {
                                            <MudTextField InputType="InputType.Date" Required="@t.Required" Format="yyyy-MM-dd" @bind-Value="t.Value" Label="@t.ParameterIdentifier" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                        }
                                        @if (t.ValueType == QueryCommandParameterValueType.DateTime)
                                        {
                                            <MudTextField InputType="InputType.DateTimeLocal" Required="@t.Required" Format="s" @bind-Value="t.Value" Label="@t.ParameterIdentifier" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                        }
                                        @if (t.ValueType == QueryCommandParameterValueType.Number)
                                        {
                                            <MudTextField InputType="InputType.Number" @bind-Value="t.Value" Required="@t.Required" Label="@t.ParameterIdentifier" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                        }
                                        @if (t.ValueType == QueryCommandParameterValueType.String)
                                        {
                                            <MudTextField InputType="InputType.Text" @bind-Value="t.Value" Required="@t.Required" Label="@t.ParameterIdentifier" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                        }
                                    </MudItem>
                                }
                            </MudGrid>
                            <div style="padding-top: 5px">
                        <MudButton Disabled="@_loading" OnClick="ConfirmText" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                                    @if (_loading)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">@Localizer.Get("Processing")</MudText>
                                    }
                                    else
                                    {
                                <MudText>@Localizer.Get("Validate")</MudText>
                                    }
                                </MudButton>
                                @if (_loading)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="CancelQuery">
                                        <MudText Class="ms-2">@Localizer.Get("Cancel")</MudText></MudButton>
                                }
                            </div>
                        </MudForm>
                    </MudPaper>
                }
                <MudTable ServerData="@(new Func<TableState, Task<TableData<Dictionary<string, object>.ValueCollection>>>(ServerReload))" Hover="true" Dense="true" Height="65vh" FixedHeader="true" HorizontalScrollbar="true" @ref="_table" RowsPerPage="20">
                    <HeaderContent>
                        @if (_values?.Any() == true)
                        {
                            @foreach (var key in _values?.FirstOrDefault()?.Keys!)
                            {
                                <MudTh>@key</MudTh>
                            }
                        }
                    </HeaderContent>
                    <RowTemplate>
                        @if (_values?.Any() == true)
                        {
                            @foreach (var t in context)
                            {
                                @if(t.ToString()=="{}")
                                {
                                    <MudTd></MudTd>
                                }
                                else
                                {
                                    <MudTd>@t</MudTd>
                                }
                            }
                        }
                    </RowTemplate>
                    <PagerContent>
                <MudTablePager PageSizeOptions="_pageSizeOptions" RowsPerPageString="@Localizer.Get("Rows per page")" InfoFormat="@string.Format("{0}first_item{1}-{0}last_item{1} {2} {0}all_items{1}","{","}",Localizer.Get("of") )" />
                    </PagerContent>
                </MudTable>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public int QueryId { get; set; }
    private QueryStoreDto? Item;
    private List<QueryCommandParameter> param = new();
    private MudForm? _validateParam;
    bool _formParamValidated = true;
    private CancellationTokenSource? _cts;
    private bool _loading;
    private List<Dictionary<string, object>>? _values = new();
    MudTable<Dictionary<string, object>.ValueCollection>? _table = new();
    int[] _pageSizeOptions = { 10, 20, 50, 100 };
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var uriAction = $"GetQueryStore?queryId={QueryId}";
        Item = await DataService.GetUniqueValue(Item, uriAction);

        if (Item!.QueryParameters != "[]" && !string.IsNullOrEmpty(Item.QueryParameters))
        {
            var desParam = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Item.QueryParameters);
            foreach (var value in desParam!)
            {
                if (param!.All(a => a.ParameterIdentifier != value.ParameterIdentifier))
                {
                    param?.Add(value);
                }
            }
            foreach (var t in param!.Where(t => t.ValueType == QueryCommandParameterValueType.Date || t.ValueType == QueryCommandParameterValueType.DateTime))
            {
                if (t.ValueType == QueryCommandParameterValueType.Date)
                {
                    t.Value = t.DateOption.GetCalculateDateTime().Date.ToString("yyyy-MM-dd");
                }
                if (t.ValueType == QueryCommandParameterValueType.DateTime)
                {
                    t.Value = t.DateOption.GetCalculateDateTime().ToString("s");
                }
            }
        }
    }

    private async Task ConfirmText()
    {
        await _validateParam?.Validate()!;
        _formParamValidated = _validateParam.IsValid;
        _table!.CurrentPage = 0;
        await _table.ReloadServerData();
    }

    private async Task<TableData<Dictionary<string, object>.ValueCollection>> ServerReload(TableState state)
    {
        _loading = true;
        var currentPage = state.Page;
        var pageSize = state.PageSize;
        if (Item == null)
        {
            _values = new List<Dictionary<string, object>>();
        }
        else
        if (string.IsNullOrEmpty(Item.Query))
        {
            _values = new List<Dictionary<string, object>>();
        }
        else if (!_formParamValidated)
        {
            _values = new List<Dictionary<string, object>>();
        }
        else
        {
            try
            {
                _cts = new CancellationTokenSource();

                var run = new RemoteDbCommandParameters { ActivityId = Item.IdActivity, QueryToRun = Item.Query, Test = true, PaginatedResult = true, StartRecord = currentPage * pageSize, MaxSize = pageSize + 1, LastRunDateTime = DateTime.Now, QueryCommandParameters = param };
                var remoteDataPayload = new RemoteDataPayload { Values = run };
                var uri = $"{ApiControllers.RemoteDbApi}RemoteDbGetValues";
                var response = await Http.PostAsJsonAsync(uri, remoteDataPayload, _cts.Token);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<SubmitResultRemoteData>();
                    if (result!.Success)
                    {
                        _values = result.Value;
                    }
                    else
                    {
                        _values = new List<Dictionary<string, object>>();
                    }
                }
                else
                {
                    _values = new List<Dictionary<string, object>>();
                    response.Content.ToString();
                }
            }
            catch (Exception ex)
            {
                _values = new List<Dictionary<string, object>>();
            }
        }
        _loading = false;
        return new TableData<Dictionary<string, object>.ValueCollection>() { TotalItems = _values!.Count < pageSize + 1 ? _values.Count + currentPage * pageSize : currentPage * pageSize + pageSize + 1, Items = _values?.Select(a => a.Values).ToList() };
    }

    void CancelQuery()
    {
        _cts?.Cancel();
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
