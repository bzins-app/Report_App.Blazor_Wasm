@inject ISnackbar Snackbar

<MudIconButton OnClick="() => OpenRunConfirmationComponent()" Icon="@Icons.Material.Filled.ContentCopy"/>

<MudDialog @bind-Visible="_visible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @Localizer.Get("Confirm duplication")
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_activities.Any())
        {
            <MudSelect Label="@Localizer.Get("Activity name")" @bind-Value="_selectedActivityId" Dense="true" AnchorOrigin="Origin.BottomCenter" Required RequiredError="@Localizer.Get("Required")" HelperText="@Localizer.Get("Activity name")">
                @foreach (var item in _activities)
                {
                    <MudSelectItem Value="@item.ActivityId">@item.ActivityName</MudSelectItem>
                }
            </MudSelect>
        }
        <MudTextField @bind-Value="_name" Label="@Localizer.Get("Query Name")"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelDialog">@Localizer.Get("Cancel")</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmDuplicate" Class="px-10">@Localizer.Get("Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] public SimpleGrid<QueryStoreDto>? DataGrid { get; set; }

    [Parameter] public QueryStoreDto? Item { get; set; }

    string _name = "";

    private bool _visible;
    private DialogOptions _dialogOptions = new() { CloseOnEscapeKey = false, BackdropClick = false, MaxWidth = MaxWidth.Small, FullWidth = true };
    private List<SelectItemActivitiesInfo> _activities = new();
    private int _selectedActivityId;

    protected override async Task OnInitializedAsync()
    {
        _activities = await DataService.GetValues<SelectItemActivitiesInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);
        if (Item != null) _selectedActivityId = Item.IdActivity;
    }

    private void OpenRunConfirmationComponent()
    {
        _name = Item?.QueryName + " (Copy)";
        _visible = true;
    }

    private async Task ConfirmDuplicate()
    {
        _visible = false;
        await Clone(_name, Item!.Id, _selectedActivityId);
        Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
        await DataGrid?.RefreshDataAsync()!;
    }

    void CancelDialog()
    {
        _visible = false;
    }

    private async Task Clone(string name, int queryId, int idActivity)
    {
        DuplicateQueryStore payload = new() { Name = name, QueryId = queryId, ActivityId = idActivity };
        var result = await DataService.PostValues(payload, "DuplicateQueryStore");
        if (!result.Success)
        {
            Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
            Snackbar.Add(result.Message, Severity.Error);
        }
    }


}