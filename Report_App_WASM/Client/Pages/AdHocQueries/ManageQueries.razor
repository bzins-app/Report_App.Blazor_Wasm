@page "/ManageQueries/{ActivityId:int}/{ActivityName}"
@page "/ManageQueriesGlobal"
@inject NavigationManager UriHelper
@inject IdentityAuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>@_pageTitle</PageTitle>

<ErrorBoundary>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error">
            <b>@Localizer.Get("An error has occurred"): @_errorMessage</b>
        </MudText>
    }
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@_pageTitle</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                @if (_UserIsSupervisor)
                {
                    <MudIconButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   OnClick="@(OpenCreateDialog)"
                                   Icon="@Icons.Material.Filled.Add" title="@Localizer.Get("Add")"/>
                }
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            @if (_tags.Any())
            {
                <MudChipSet @bind-SelectedValues="selected" SelectionMode="SelectionMode.MultiSelection">
                    @foreach (var value in _tags)
                    {
                        <MudChip Text="@value" Value="value" Variant="Variant.Text" OnClick="OnTagSelected" Color="Color.Default" SelectedColor="Color.Primary"></MudChip>
                    }
                </MudChipSet>
            }
            <div style="overflow: auto;text-wrap-mode: nowrap;">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    @if (_UserIsSupervisor)
                    {
                        <Blazor.SimpleGrid.TemplateColumn>
                            <MudStack Row="true" Justify="Justify.Center">
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => EditItem(context)" title="@Localizer.Get("Edit")"/>
                                <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => OpenDeleteDialog(context)" title="@Localizer.Get("Delete")"/>
                                <CascadingValue Value="@_grid">
                                    <_QueryStoreDuplicateForm Item="context"/>
                                </CascadingValue>
                            </MudStack>
                        </Blazor.SimpleGrid.TemplateColumn>
                    }
                    @if (string.IsNullOrEmpty(ActivityName))
                    {
                        <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ActivityName)" Title="@Localizer.Get("Activity")" Sortable="true"/>
                    }
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.QueryName)" Title="@Localizer.Get("Query name")" Sortable="true" />
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.Id)" Title="Query Id" Sortable="true"/>
                    <Blazor.SimpleGrid.TemplateColumn Title="@Localizer.Get("Run query")">
                        <MudIconButton Icon="@Icons.Material.Outlined.Kitesurfing" OnClick="() => RunQuery(context)" title="@Localizer.Get("Run query")"/>
                    </Blazor.SimpleGrid.TemplateColumn>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true"/>
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code {

    [Parameter] public string ActivityName { get; set; } = default!;

    [Parameter] public int? ActivityId { get; set; }

    GridItemsProvider<QueryStoreDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations;
    SimpleGrid<QueryStoreDto>? _grid;
    private string? _errorMessage;
    private string? _pageTitle;
    private bool _rendering;
    bool _empty;
    bool _UserIsSupervisor;
    List<string> _tags = new();
    IReadOnlyCollection<string>? selected;
    int _activityId;
    string _oldActivity = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        _pageTitle = Localizer.Get("Manage queries");

        selected = null;
        var urlExt = string.Empty;
        if (!string.IsNullOrEmpty(ActivityName))
        {
            urlExt = $"?activityId={ActivityId!.Value}";
        }

        var uri = $"{ApiControllers.CrudDataApi}GetTagsQueries{urlExt}";
        try
        {
            _tags = (await Http.GetFromJsonAsync<List<string>>(uri))!;
        }
        catch
        {
            _tags = new List<string>();
        }

        // This could use HttpClient's GetFromJsonAsync, or be a direct database query, etc.
        if (_empty || _oldActivity != ActivityName)
        {
            _itemsProvider = async req =>
            {
                var response = await GetRemoteData(req);
                _rendering = false;
                if (response is null)
                {
                    _empty = true;
                    return GridItemsProviderResult.From(Array.Empty<QueryStoreDto>(), 0);
                }

                _empty = !response.Value!.Any();
                return GridItemsProviderResult.From(response.Value!, response.Count);
            };
        }

        var user = await AuthenticationStateProvider.GetUserInfo();
        if (!string.IsNullOrEmpty(ActivityName))
        {
            _empty = _activityId != ActivityId;
            _activityId = ActivityId!.Value;
            _pageTitle += ": " + ActivityName;
            if (user != null && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains(ActivityName) && !user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin"))
            {
                NavigationManager.NavigateTo("/403");
            }

            _oldActivity = ActivityName;
        }

        _UserIsSupervisor = user!.ExposedClaims!.Select(a => a.Value).ToList().Contains("Supervisor") || user.ExposedClaims!.Select(a => a.Value).ToList().Contains("Admin");
    }


    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                _empty = true;
                return GridItemsProviderResult.From(Array.Empty<QueryStoreDto>(), 0);
            }

            if (response.Value!.Any())
            {
                _empty = false;
            }
            else
            {
                _empty = true;
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<QueryStoreDto>?> GetRemoteData(GridItemsProviderRequest<QueryStoreDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataSort = _grid?.GetODataSortValues();
        var odataPagination = _grid?.GetODataPaginationValues();
        var odataFilters = _grid?.GetODataFilterValues();
        var url = "odata/Queries?";

        var customFilters = string.Empty;
        if (ActivityId.HasValue)
        {
            customFilters = $"IdActivity eq {ActivityId.Value}";
        }

        url += "$count=true";
        if (!string.IsNullOrEmpty(odataPagination))
        {
            url += "&" + odataPagination;
        }

        if (!string.IsNullOrEmpty(odataSort))
        {
            url += "&" + odataSort;
        }

        if (!string.IsNullOrEmpty(odataFilters))
        {
            if (ActivityId.HasValue)
            {
                url += "&" + odataFilters + " and " + customFilters;
            }
            else
            {
                url += "&" + odataFilters;
            }
        }
        else if (ActivityId.HasValue)
        {
            url += "&$filter=" + customFilters;
        }

        if (selected != null && selected.Any())
        {
            var _tagFilter = string.Empty;
            var first = false;
            if (!ActivityId.HasValue && string.IsNullOrEmpty(odataFilters))
            {
                _tagFilter = "&$filter=";
                first = true;
            }

            foreach (var tagSelected in selected)
            {
                if (first)
                {
                    _tagFilter += $"contains(Tags, '{tagSelected}')";
                    first = false;
                }
                else
                {
                    _tagFilter += $" and contains(Tags, '{tagSelected}')";
                }
            }

            url += _tagFilter;
        }

        try
        {
            return await DataService.GetODataValues<QueryStoreDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        if (_grid != null) await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        selected = null;
        if (_grid != null) await _grid.RemoveFilters();
        _rendering = false;
    }

    private async Task OnTagSelected()
    {
        if (_grid != null) await OnRefresh();
    }

    public async ValueTask DisposeAsync()
    {
        if (_grid != null) await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    private async Task OpenDeleteDialog(QueryStoreDto value)
    {
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Delete };

        var dialog = await DialogService.ShowAsync<_QueryStoreFormDialog>("Delete", parameters);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "QueryStoreDelete");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object deleted"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private void RunQuery(QueryStoreDto value)
    {
        UriHelper.NavigateTo($"RunQuery/{value.Id}/{value.IdActivity}/{value.ActivityName}");
    }

    private void EditItem(QueryStoreDto value)
    {
        //var uri = UriHelper.GetUriWithQueryParameters("QueryEdit/" + value.Id,
        //   new Dictionary<string, object>
        //       {
        //           ["FromTaskManager"] = !string.IsNullOrEmpty(ActivityName),
        //           ["Page"] = _pagination.CurrentPageIndex,
        //           ["PageSize"] = _pagination.ItemsPerPage
        //       }!);
        UriHelper.NavigateTo("QueryEdit/" + value.Id);
    }

    private async Task OpenCreateDialog()
    {
        var value = new QueryStoreDto();
        if (ActivityId.HasValue)
        {
            value.IdActivity = ActivityId.Value;
        }

        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Create };

        var dialog = await DialogService.ShowAsync<_QueryStoreFormDialog>("Create", parameters);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "QueryStoreInsert");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
                if (result.KeyValue > 0)
                {
                    UriHelper.NavigateTo("QueryEdit/" + result.KeyValue);
                }
                else
                    await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

}