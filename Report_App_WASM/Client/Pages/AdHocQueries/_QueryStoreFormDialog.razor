<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch
                           {
                               CrudAction.Update => Icons.Material.Filled.Edit,
                               CrudAction.Create => Icons.Material.Filled.Create,
                               _ => Icons.Material.Filled.DeleteForever
                               })" Class="mr-3 mb-n1"/>
            @Localizer.Get(Action switch
            {
                CrudAction.Update => "Edit",
                CrudAction.Create => "Add",
                _ => "Delete"
                })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Item" @ref="@_form">
            <MudTextField @bind-Value="Item!.QueryName" Label="@(Localizer.Get("Query Name"))" Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete"/>
            @if (_activities.Any())
            {
                <MudSelect T="int" Label="@Localizer.Get("Activity name")" @bind-Value="@Item!.IdActivity" AnchorOrigin="Origin.BottomCenter"
                           Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete">
                    @foreach (var value in _activities)
                    {
                        <MudSelectItem Value="@value.ActivityId">@value.ActivityName</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudForm>
        @if (Action == CrudAction.Delete)
        {
            <MudTextField @bind-Value="_deletionValidation" Label="@(Localizer.Get("Confirm the deletion by entering") + ": Validate")" Required RequiredError="@Localizer.Get("Required")"/>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Color="Action == CrudAction.Delete ? Color.Error : Color.Primary" OnClick="Validate">@Localizer.Get(Action == CrudAction.Delete ? "Delete" : "Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public QueryStoreDto? Item { get; set; }

    [Parameter]
    public CrudAction Action { get; set; }

    private MudForm _form = default!;
    private string? _deletionValidation;
    private List<SelectItemActivitiesInfo> _activities = new();

    protected override async Task OnInitializedAsync()
    {
        _activities = await DataService.GetValues<SelectItemActivitiesInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);
    }

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async Task Validate()
    {
        if (Action == CrudAction.Delete)
        {
            if (_deletionValidation == "Validate")
            {
                Item!.Activity = new ActivityDto { ActivityId = _activities.Where(a => a.ActivityId == Item.IdActivity).Select(a => a.ActivityId).FirstOrDefault(), ActivityName = _activities.Where(a => a.ActivityId == Item.IdActivity).Select(a => a.ActivityName).FirstOrDefault() };
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
        else
        {
            Item!.Activity = new ActivityDto { ActivityId = _activities.Where(a => a.ActivityId == Item.IdActivity).Select(a => a.ActivityId).FirstOrDefault(), ActivityName = _activities.Where(a => a.ActivityId == Item.IdActivity).Select(a => a.ActivityName).FirstOrDefault() };
            Item.IdActivity = Item.Activity.ActivityId;
            Item.ActivityName = Item.Activity.ActivityName;
            await _form.Validate();
            if (_form.IsValid && Item.Activity is not null)
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
    }

}