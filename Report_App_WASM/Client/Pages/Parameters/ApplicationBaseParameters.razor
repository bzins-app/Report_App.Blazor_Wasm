@page "/ApplicationParameters"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject NavigationManager UriHelper
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin, Supervisor,Demo")]

<PageTitle>@Localizer.Get("Application parameters")</PageTitle>


<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Localizer.Get("Application parameters")</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="@_param" @ref="_form" @bind-IsValid="@_success">
            <MudTextField @bind-Value="_param.ApplicationName" Label="@Localizer.Get("Application name")" Required/>
            <MudSwitch @bind-Value="_param.ActivateTaskSchedulerModule" Label="@Localizer.Get("Activate Tasks scheduler module?")" Color="Color.Primary"/>
            <MudSwitch @bind-Value="_param.ActivateAdHocQueriesModule" Label="@Localizer.Get("Activate Adhoc queries module?")" Color="Color.Primary"/>
            <MudNumericField @bind-Value="_param.LogsRetentionInDays" Label="@Localizer.Get("Logs: Archiving duration")"/>
            <MudTextField @bind-Value="_param.EmailPrefix" Label="@Localizer.Get("Email prefix")" Required/>
            <MudTextField @bind-Value="_param.AlertEmailPrefix" Label="@Localizer.Get("Alert email prefix")" Required/>
            <MudTextField @bind-Value="_param.ErrorEmailPrefix" Label="@Localizer.Get("Error email prefix")" Required/>
            <div style="padding-top:10px">
                <MudButton OnClick="OpenTextEditorComponent" Variant="Variant.Filled" Color="Color.Info" Style="text-transform: none" Size="Size.Small">@Localizer.Get("Edit error email")</MudButton>
            </div>
            <MudText Typo="Typo.h6" Class="pa-4">@Localizer.Get("Logo")</MudText>
            <div style="padding-bottom: 5px">
                @if (!string.IsNullOrEmpty(_param.ApplicationLogo))
                {
                    <MudImage Src="@_param.ApplicationLogo" style="max-height: 200px; max-width: 150px;" Alt="@_param.ApplicationName" Elevation="2"/>
                }
            </div>
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".jpg, .jpeg, .png, .gif">
                <ActivatorContent>
                    <MudFab HtmlTag="label" Class="pa-4"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Image"
                            Label="@Localizer.Get("Select application Logo")"
                            Size="Size.Small"
                            Style="text-transform: none"/>
                </ActivatorContent>
            </MudFileUpload>
        </MudForm>
        <div style="padding-top: 15px">
            <MudTextField T="string" Label="@Localizer.Get("Administrator email for error notifications")" @bind-Value="@_email"
                          Validation="@CheckMail()"/>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Disabled="_emailNotValidated" Style="text-transform: none" Size="Size.Small"
                       OnClick="@(() => Add())">
                @Localizer.Get("Add recipient")
            </MudButton>
            <MudTable Items="@_emailItems" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>@Localizer.Get("Email")</MudTh>
                    <MudTh>@Localizer.Get("Blind copy")</MudTh>
                    <MudTh>@Localizer.Get("Action")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer.Get("Email")">@context.Email</MudTd>
                    <MudTd DataLabel="@Localizer.Get("Blind copy")">
                        <MudSwitch Value="@context.Bcc" ValueChanged="(bool value) => ChangeBccValue(context, value)" Color="Color.Primary"/>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => Delete(context)"></MudIconButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </MudCardContent>
    <MudCardActions>
        <MudItem Class="pa-4 mt-4">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" @onclick="OnClickCancel" Disabled="@(!_success)">@Localizer.Get("Cancel")</MudButton>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onclick="UpdateApplication" Disabled="@(!_success)">@Localizer.Get("Validate")</MudButton>
                </Authorized>
            </AuthorizeView>
        </MudItem>
    </MudCardActions>
</MudCard>

@code {
    private ApplicationParametersDto _param = new();
    bool _success;
    MudForm? _form;
    private List<EmailRecipient>? _emails = new();
    readonly List<EmailRecipient> _emailItems = new();
    private string _email = "";
    private bool _emailNotValidated;
    private string? _completeLogoPath;
    private readonly List<string?> _filesToDelete = new();
    private string? _initialAppName;
    private string? _initialAppLogo;
    EmailAddressAttribute _checkEmail = new() { ErrorMessage = "The email address is invalid" };

    protected override async Task OnInitializedAsync()
    {
        _param = await DataService.GetUniqueValue(_param, "GetApplicationParameters", ApiControllers.ApplicationParametersApi);
        _initialAppName = _param.ApplicationName;
        _initialAppLogo = _param.ApplicationLogo;
        if (!string.IsNullOrEmpty(_param.AdminEmails))
        {
            _emails = JsonSerializer.Deserialize<List<EmailRecipient>>(_param.AdminEmails);
            PopulateEmailItems();
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        var result = await DataService.PostFile(file);
        if (result.Success)
        {
            _param.ApplicationLogo = "/" + result.Message;
            _success = true;
        }
    }


    private async Task UpdateApplication()
    {
        if (_filesToDelete.Any())
        {
            //  filesToDelete.ForEach(a => _backGW.DeleteFile(a));
        }

        await DataService.PostValues(_param, "ApplicationParametersUpdate");
        StateHasChanged();
        if (_initialAppLogo != _param.ApplicationLogo || _initialAppName != _param.ApplicationLogo)
        {
            UriHelper.NavigateTo("/", true);
        }
        else
        {
            UriHelper.NavigateTo("/");
        }
    }

    private void OnClickCancel()
    {
        _param.ApplicationLogo = "";
        if (!string.IsNullOrEmpty(_completeLogoPath))
        {
            _filesToDelete.Add(_completeLogoPath);
            //  filesToDelete.ForEach(a => _backGW.DeleteFile(a));
        }

        UriHelper.NavigateTo("/");
    }

    private void Delete(EmailRecipient id)
    {
        _emails?.Remove(id);
        PopulateEmailItems();
        _param.AdminEmails = JsonSerializer.Serialize(_emails);
        _success = true;
    }

    private void PopulateEmailItems()
    {
        _emailItems.Clear();
        foreach (var t in _emails!)
        {
            _emailItems.Add(t);
        }
    }

    private void Add()
    {
        if (!_emails!.Select(a => a.Email).Contains(_email))
        {
            _emails?.Add(new EmailRecipient { Email = _email });
        }

        _email = "";
        _emailNotValidated = true;
        PopulateEmailItems();
        _param.AdminEmails = JsonSerializer.Serialize(_emails);
        _success = true;
    }

    private void ChangeBccValue(EmailRecipient id, bool value)
    {
        var bccupdate = _emails!.FirstOrDefault(a => a.Email == id.Email);
        bccupdate!.Bcc = value;
        _param.AdminEmails = JsonSerializer.Serialize(_emails);
        _success = true;
    }

    private bool CheckMail()
    {
        if (!string.IsNullOrEmpty(_email))
        {
            _emailNotValidated = !Regex.IsMatch(_email,
                @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
        }
        else
        {
            _emailNotValidated = true;
        }

        return _emailNotValidated;
    }

    private string? _htmlText;
    private readonly bool _displayTagMessage = true;

    private async Task OpenTextEditorComponent()
    {
        _htmlText = _param.ErrorEMailMessage;
        var maxWidth = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["htmlText"] = _htmlText, ["displayTagMessage"] = _displayTagMessage };

        var dialog = await DialogService.ShowAsync<_TextEditor>(Localizer.Get("Edit error email template"), parameters, maxWidth);
        var result = await dialog.Result;
        if (!(result is { Canceled: true }))
        {
            _param.ErrorEMailMessage = result?.Data?.ToString();
            _success = true;
        }
    }

}