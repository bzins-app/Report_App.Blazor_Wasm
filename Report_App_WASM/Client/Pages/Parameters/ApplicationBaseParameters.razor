@page "/ApplicationParameters"
@using System.IO
@using System.Text.Json
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager uriHelper
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@localizer.Get("Application parameters")</PageTitle>


<MudCard Elevation="6">
        <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@localizer.Get("Application parameters")</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="@param" @ref="form" @bind-IsValid="@success">
            <MudTextField @bind-Value="param.ApplicationName" Label="@localizer.Get("Application name")" Required />
            <MudNumericField @bind-Value="param.LogsRetentionInDays" Label="@localizer.Get("Logs: Archiving duration")" />
            <MudTextField @bind-Value="param.EmailPrefix" Label="@localizer.Get("Email prefix")" Required />
            <MudTextField @bind-Value="param.AlertEmailPrefix" Label="@localizer.Get("Alert email prefix")" Required />
            <MudTextField @bind-Value="param.ErrorEmailPrefix" Label="@localizer.Get("Error email prefix")" Required />
            <MudButton OnClick="OpenTextEditorComponent" Variant="Variant.Filled" Color="Color.Info" Style="text-transform: none" Size="Size.Small">@localizer.Get("Edit error email")</MudButton>
            <MudText Typo="Typo.h6" Class="pa-4">@localizer.Get("Logo")</MudText>
            <div style="padding-bottom:5px">
                @if (!string.IsNullOrEmpty(param.ApplicationLogo))
                {
                    <MudImage Src="@param.ApplicationLogo" style="max-width:150px;max-height:200px;" Alt="@param.ApplicationName" Elevation="2" />
                }
            </div>
            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png, .gif" />
            <MudFab HtmlTag="label" Class="pa-4"
                    Color="Color.Primary"
                    Icon="@Icons.Filled.Image"
                    Style="text-transform: none" Size="Size.Small"
                    Label="@localizer.Get("Select application Logo")"
                    for="fileInput" />
        </MudForm>
        <div style="padding-top:15px">
            <MudTextField T="string" Label="@localizer.Get("Administrator email for error notifications")" @bind-Value="@email"
                          Validation="@checkMail()" />
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Disabled="emailNotValidated" Style="text-transform: none" Size="Size.Small"
                       Class="ml-auto mt-3 mb-3" OnClick="@(()=>Add())">@localizer.Get("Add recipient")</MudButton>
            <MudTable Items="@EmailItems" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>@localizer.Get("Email")</MudTh>
                    <MudTh>@localizer.Get("Blind copy")</MudTh>
                    <MudTh>@localizer.Get("Action")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@localizer.Get("Email")">@context.Email</MudTd>
                    <MudTd DataLabel="@localizer.Get("Blind copy")"><MudSwitch Checked="@context.BCC" CheckedChanged="(bool value)=>ChangeBccValue(context, value)" Color="Color.Primary" /></MudTd>
                    <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="()=>Delete(context)"></MudIconButton></MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </MudCardContent>
    <MudCardActions>
        <MudItem Class="pa-4 mt-4">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" @onclick="OnClickCancel" Disabled="@(!success)">@localizer.Get("Cancel")</MudButton>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onclick="UpdateApplication" Disabled="@(!success)">@localizer.Get("Validate")</MudButton>
                </Authorized>
            </AuthorizeView>
        </MudItem>
    </MudCardActions>
</MudCard>

@code {
    private ApplicationParametersDTO param = new();
    bool success = false;
    MudForm form;
    private List<EmailRecipient> emails = new List<EmailRecipient>();
    readonly List<EmailRecipient> EmailItems = new();
    private string email = "";
    private bool emailNotValidated;
    private string completeLogoPath;
    private readonly List<string> filesToDelete = new();
    private string initialAppName;
    private string initialAppLogo;
    EmailAddressAttribute checkEmail = new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" };

    protected override async Task OnInitializedAsync()
    {
        param = await dataService.GetUniqueValue(param, "GetApplicationParameters",ApiControllers.ApplicationParametersApi);
        initialAppName = param.ApplicationName;
        initialAppLogo = param.ApplicationLogo;
        if (!string.IsNullOrEmpty(param.AdminEmails))
        {
            emails = JsonSerializer.Deserialize<List<EmailRecipient>>(param.AdminEmails);
            PopulateEmailItems();
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            //var fileUrl = _repo.GetFilePath(file.Name);
            //await using FileStream fs = new(fileUrl.Item2, FileMode.Create);
            //await file.OpenReadStream().CopyToAsync(fs);
            //param.ApplicationLogo = fileUrl.Item1;
            //if (!string.IsNullOrEmpty(completeLogoPath))
            //{
            //    filesToDelete.Add(completeLogoPath);
            //}
            //completeLogoPath = "/" + fileUrl.Item2;
        }

    }


    private async Task UpdateApplication()
    {
        if (filesToDelete.Any())
        {
            //  filesToDelete.ForEach(a => _backGW.DeleteFile(a));
        }
        await dataService.PostValues(param, "ApplicationParametersUpdate",ApiControllers.CrudDataApi);
        StateHasChanged();
        if (initialAppLogo != param.ApplicationLogo || initialAppName != param.ApplicationLogo)
        {
            uriHelper.NavigateTo("/", forceLoad: true);
        }
        else
        {
            uriHelper.NavigateTo("/");
        }
    }

    private void OnClickCancel()
    {
        param.ApplicationLogo = "";
        if (!string.IsNullOrEmpty(completeLogoPath))
        {
            filesToDelete.Add(completeLogoPath);
          //  filesToDelete.ForEach(a => _backGW.DeleteFile(a));
        }
        uriHelper.NavigateTo("/");
    }

    private void Delete(EmailRecipient id)
    {
        emails.Remove(id);
        PopulateEmailItems();
        param.AdminEmails = JsonSerializer.Serialize(emails);
    }

    private void PopulateEmailItems()
    {
        EmailItems.Clear();
        foreach (var t in emails)
        {
            EmailItems.Add(t);
        }
    }

    private void Add()
    {
        if (!emails.Select(a => a.Email).Contains(email))
        {
            emails.Add(new EmailRecipient { Email = email });
        }
        email = "";
        emailNotValidated = true;
        PopulateEmailItems();
        param.AdminEmails = JsonSerializer.Serialize(emails);
    }

    private void ChangeBccValue(EmailRecipient id, bool value)
    {
        var bccupdate = emails.Where(a => a.Email == id.Email).FirstOrDefault();
        bccupdate.BCC = value;
        param.AdminEmails = JsonSerializer.Serialize(emails);
    }

    private bool checkMail()
    {
        if (!string.IsNullOrEmpty(email))
        {
            emailNotValidated = !Regex.IsMatch(email,
            @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
            RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
        }
        else
        {
            emailNotValidated = true;
        }
        return emailNotValidated;
    }

    private string htmlText;
    private readonly bool displayTagMessage = true;

    private async Task OpenTextEditorComponent()
    {
        htmlText = param.ErrorEMailMessage;
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["htmlText"] = htmlText, ["displayTagMessage"] = displayTagMessage };

        var dialog = DialogService.Show<_TextEditor>(@localizer.Get("Edit error email template"), parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            param.ErrorEMailMessage = result.Data.ToString();
        }
    }
}

