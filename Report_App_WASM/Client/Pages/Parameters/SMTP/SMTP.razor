@page "/SMTP"
@implements IAsyncDisposable
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("SMTP configuration")</PageTitle>

<ErrorBoundary>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error"><b>@Localizer.Get("An error has occurred"): @_errorMessage</b></MudText>
    }
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("SMTP configuration")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" Title="@Localizer.Get("Add")" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@Localizer.Get("Refresh")" Disabled="_rendering" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" Disabled="@_rendering" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <TemplateColumn>
                        <MudStack Row=true>
                            <MudIconButton Icon="@Icons.Outlined.Edit" OnClick="()=>OpenEditDialog(context)" Title="@Localizer.Get("Edit")" />
                            <MudIconButton Icon="@Icons.Outlined.Delete" OnClick="()=>OpenDeleteDialog(context)" Title="@Localizer.Get("Delete")" />
                        </MudStack>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.ConfigurationName)" Title="@Localizer.Get("Configuration name")" Sortable="true" />
                    <TemplateColumn Title="@Localizer.Get("Is activated?")">
                        <_SMTPActivate Item="context" />
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.SmtpHost)" Title="@Localizer.Get("SMTP host")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.SmtpPort)" Title="@Localizer.Get("SMTP port")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.FromEmail)" Title="@Localizer.Get("From email")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.FromFullName)" Title="@Localizer.Get("From full name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.SmtpSSL)" Title="@Localizer.Get("SSL Activated?")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true" />
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering" />
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
#nullable enable
    GridItemsProvider<SMTPConfigurationDTO>? _itemsProvider;
    PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent _translations = default!;
    SimpleGrid<SMTPConfigurationDTO> _grid = default!;
    private string _errorMessage = default!;
    private bool _rendering = false;

    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<SMTPConfigurationDTO>(), 0);
            }
            return GridItemsProviderResult.From(response.Value, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<SMTPConfigurationDTO>?> GetRemoteData(GridItemsProviderRequest<SMTPConfigurationDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        string url = "odata/SMTP?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }
        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<SMTPConfigurationDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    private async Task OpenEditDialog(SMTPConfigurationDTO value)
    {
        var item = new SMTPConfigurationDTO
            {
                ConfigurationName = value.ConfigurationName,
                SmtpHost = value.SmtpHost,
                SmtpPort = value.SmtpPort,
                SmtpSSL = value.SmtpSSL,
                SmtpUserName = value.SmtpUserName,
                SmtpPassword = value.SmtpPassword,
                FromEmail = value.FromEmail,
                FromFullName = value.FromFullName
            };
        var parameters = new DialogParameters { ["Item"] = item, ["Action"] = CrudAction.Update };

        var dialog = DialogService.Show<_SMTPFormDialog>("Edit", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _errorMessage = string.Empty;
            value.ConfigurationName = item.ConfigurationName;
            value.SmtpHost = item.SmtpHost;
            value.SmtpPort = item.SmtpPort;
            value.SmtpSSL = item.SmtpSSL;
            value.SmtpUserName = item.SmtpUserName;
            value.SmtpPassword = item.SmtpPassword;
            value.FromEmail = item.FromEmail;
            value.FromFullName = item.FromFullName;

            var result = await DataService.PostValues(value, "SMTPUpdate");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object updated"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private async Task OpenDeleteDialog(SMTPConfigurationDTO value)
    {
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Delete };

        var dialog = DialogService.Show<_SMTPFormDialog>("Delete", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "SMTPDelete");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object deleted"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private async Task OpenCreateDialog()
    {
        var value = new SMTPConfigurationDTO();
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Create };

        var dialog = DialogService.Show<_SMTPFormDialog>("Create", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "SMTPInsert");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }
}
