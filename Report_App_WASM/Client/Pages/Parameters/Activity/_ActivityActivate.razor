@inject ISnackbar Snackbar


<MudSwitch Style="justify-content: center" Value="@Item!.IsActivated" Color="Color.Primary" ThumbIcon="@(Item.IsActivated ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(Item.IsActivated ? Color.Success : Color.Error)" ValueChanged="(bool value) => ChangeStatusAsync(value)"/>

@code {

    [Parameter] public ActivityDto? Item { get; set; }

    private async Task ChangeStatusAsync(bool value)
    {
        Item!.IsActivated = value;
        var result = await DataService.PostValues(new ApiBackgroundWorkerPayload { Activate = Item.IsActivated, Value = Item.ActivityId }, "ActivatePerActivity", "api/BackgroundWorker/");
        if (!result.Success)
        {
            Item.IsActivated = !value;
            Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
            if (result.Message != null) Snackbar.Add(result.Message, Severity.Error);
            return;
        }

        await DataService.PostValues(Item, "ActivityUpdate");

        Snackbar.Add(Item.IsActivated ? Item.ActivityName + " " + Localizer.Get("enabled") : Item.ActivityName + " " + Localizer.Get("disabled"), Item.IsActivated ? Severity.Success : Severity.Normal);
    }

}