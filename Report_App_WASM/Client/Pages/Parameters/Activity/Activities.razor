@page "/Activities"
@implements IAsyncDisposable
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("Activities manager")</PageTitle>

<ErrorBoundary>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error"><b>@Localizer.Get("An error has occurred"): @_errorMessage</b></MudText>
    }
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Activities manager")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" Title="@Localizer.Get("Add")" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" Disabled="@_rendering" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <TemplateColumn>
                        <MudStack Row=true>
                            <MudIconButton Icon="@Icons.Outlined.Edit" OnClick="()=>OpenEditDialog(context)" Title="@Localizer.Get("Edit")" />
                            <MudIconButton Icon="@Icons.Outlined.Delete" OnClick="()=>OpenDeleteDialog(context)" Title="@Localizer.Get("Delete")" />
                        </MudStack>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.ActivityName)" Title="@Localizer.Get("Activity name")" Sortable="true" />
                    <TemplateColumn Title="@Localizer.Get("Is activated?")">
                        <_ActivityActivate Item="context" />
                    </TemplateColumn>
                    <TemplateColumn Title="@Localizer.Get("Is visible?")">
                        <_ActivityVisible Item="context" />
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true" />
                </SimpleGrid>
            </div>
            @if (_rendering)
            {
                <MudProgressLinear Color="Color.Info" Indeterminate="@_rendering" />
            }
            <Paginator Value="@_pagination" FieldsContent="@_translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
    #nullable enable
    GridItemsProvider<ActivityDTO>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations;
    SimpleGrid<ActivityDTO> _grid = default!;
    private string _errorMessage = default!;
    private bool _rendering;


    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<ActivityDTO>(), 0);
            }
            return GridItemsProviderResult.From(response.Value, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<ActivityDTO>?> GetRemoteData(GridItemsProviderRequest<ActivityDTO> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        var url = "odata/Activities?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += $"$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }
        try
        {
            return await Http.GetFromJsonAsync<ApiResponse<ActivityDTO>>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }
    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    private async Task OpenEditDialog(ActivityDTO value)
    {
        var uri = $"GetActivityDbConnection?ActivityId={value.ActivityId}";
        var item = new ActivityDTO
            {

                ActivityName = value.ActivityName,
                ActivityLogo = value.ActivityLogo,
                ActivityDbConnections = await DataService.GetValues<ActivityDbConnectionDTO>(uri)
            };
        var parameters = new DialogParameters { ["Item"] = item, ["Action"] = CrudAction.Update };

        var dialog = await DialogService.ShowAsync<_ActivityFormDialog>("Edit", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _errorMessage = string.Empty;
            value.ActivityName = item.ActivityName;
            value.ActivityLogo = item.ActivityLogo;
            value.ActivityDbConnections = item.ActivityDbConnections;

            var result = await DataService.PostValues(value, "ActivityUpdate");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object updated"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private async Task OpenDeleteDialog(ActivityDTO value)
    {
        var uri = $"GetActivityDbConnection?ActivityId={value.ActivityId}";
        value.ActivityDbConnections = await DataService.GetValues<ActivityDbConnectionDTO>(uri);
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Delete };

        var dialog = await DialogService.ShowAsync<_ActivityFormDialog>("Delete", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _errorMessage = string.Empty;
            await DataService.PostValues( new ApiBackgrounWorkerdPayload { Activate = false, Value = value.ActivityId }, "ActivatePerActivity", ApiControllers.BackgroudWorkerApi );
            var result = await DataService.PostValues(value, "ActivityDelete");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object deleted"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private async Task OpenCreateDialog()
    {
        var value = new ActivityDTO() { ActivityDbConnections = new List<ActivityDbConnectionDTO>() { new() }, ActivityType = ActivityType.SourceDB };
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Create };

        var dialog = await DialogService.ShowAsync<_ActivityFormDialog>("Create", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "ActivityInsert");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

}
