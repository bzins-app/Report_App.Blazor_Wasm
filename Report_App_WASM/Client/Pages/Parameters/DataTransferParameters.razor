@page "/DataTransferParameters"
@inject NavigationManager NavManager
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@localizer.Get("Data transfer parameters")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@localizer.Get("Data transfer parameters")</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="targetInfo.ActivityName" Label="@localizer.Get("Activity name")" ReadOnly />
        @if (dbCon.TypeDb>0)
        {

            <MudTextField @bind-Value="dbCon.ConnectionPath" Label="@localizer.Get("Connection path")" Required Placeholder="IP or Hostname" />
            <MudSwitch @bind-Checked="dbCon.UseDbSchema" Label="@localizer.Get("Indicate the database name?")" Color="Color.Primary" />
            <MudTextField @bind-Value="dbCon.DbSchema" Label="@localizer.Get("Database name")" Disabled="!dbCon.UseDbSchema" />
            <MudSwitch @bind-Checked="dbCon.IntentReadOnly" Label="@localizer.Get("Application intent read only?")" Color="Color.Primary" />
            <MudSwitch @bind-Checked="dbCon.ADAuthentication" Label="@localizer.Get("Use Windows authentication?")" Color="Color.Primary" />
            <MudTextField @bind-Value="dbCon.ConnectionLogin" Label="@localizer.Get("Connection login")" Disabled="dbCon.ADAuthentication" />
            <MudTextField @bind-Value="dbCon.Password" Label="@localizer.Get("Password")" InputType="InputType.Password" Disabled="dbCon.ADAuthentication" />

            <MudNumericField @bind-Value="dbCon.CommandTimeOut" Label="@localizer.Get("Command timeout")" />
            <MudButton Disabled="@loading" OnClick="OnClickConnectionTest" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                @if (loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@localizer.Get("Processing")</MudText>
                }
                else
                {
                    <MudText>@localizer.Get("Test Db connection")</MudText>
                }
            </MudButton>
            <MudText>@localizer.Get("Connection Feedback:") @connectionTestResult</MudText>
        }
    </MudCardContent>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onclick="ValidateActivity" Disabled="@ValidateButtonDisabled">@localizer.Get("Validate")</MudButton>
            </MudCardActions>
        </Authorized>
    </AuthorizeView>
</MudCard>

@code {
    private ActivityDTO targetInfo = new();

    private string connectionTestResult = string.Empty;
    private bool ValidateButtonDisabled = true;
    private ActivityDbConnectionDTO dbCon = new ActivityDbConnectionDTO();
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        targetInfo = await dataService.GetUniqueValue(targetInfo, "GetDataTransferInfo");
        dbCon = targetInfo.ActivityDbConnections.First();
    }


    private async Task ValidateActivity()
    {

        var result = await dataService.PostValues(targetInfo, "ActivityUpdate");
        if (result.Success)
        {
            NavManager.NavigateTo("/");
        }
    }


    private async Task OnClickConnectionTest()
    {
        loading = true;
        await Task.Run(ConnectionTest);
        loading = false;
    }

    private async Task ConnectionTest()
    {
        ActivityDbConnectionDTO tryConn = new ActivityDbConnectionDTO();
        tryConn.ADAuthentication = dbCon.ADAuthentication;
        tryConn.ConnectionLogin = dbCon.ConnectionLogin;
        tryConn.ConnectionPath = dbCon.ConnectionPath;
        tryConn.IntentReadOnly = dbCon.IntentReadOnly;
        tryConn.DbSchema = dbCon.DbSchema;
        tryConn.TypeDb = dbCon.TypeDb;
        tryConn.Port = dbCon.Port;
        tryConn.UseDbSchema = dbCon.UseDbSchema;
        tryConn.Password = dbCon.Password;
        var result = await dataService.PostValues(tryConn, "TestConnection", ApiControllers.RemoteDbApi);
        connectionTestResult = result.Message ?? "Ok!";
    }


    public void OnSelectedItemChangedHandler(IEnumerable<string> value)
    {
        ValidateButtonDisabled = true;
    }

}
