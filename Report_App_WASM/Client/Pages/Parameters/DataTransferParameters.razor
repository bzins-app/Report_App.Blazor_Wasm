@page "/DataTransferParameters"
@inject NavigationManager NavManager
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@Localizer.Get("Data transfer parameters")</PageTitle>

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Localizer.Get("Data transfer parameters")</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="_targetInfo.ActivityName" Label="@Localizer.Get("Activity name")" ReadOnly />
        @if (_dbCon.TypeDb>0)
        {

            <MudTextField @bind-Value="_dbCon.ConnectionPath" Label="@Localizer.Get("Connection path")" Required Placeholder="IP or Hostname" />
            <MudSwitch @bind-Checked="_dbCon.UseDbSchema" Label="@Localizer.Get("Indicate the database name?")" Color="Color.Primary" />
            <MudTextField @bind-Value="_dbCon.DbSchema" Label="@Localizer.Get("Database name")" Disabled="!_dbCon.UseDbSchema" />
            <MudSwitch @bind-Checked="_dbCon.IntentReadOnly" Label="@Localizer.Get("Application intent read only?")" Color="Color.Primary" />
            <MudSwitch @bind-Checked="_dbCon.ADAuthentication" Label="@Localizer.Get("Use Windows authentication?")" Color="Color.Primary" />
            <MudTextField @bind-Value="_dbCon.ConnectionLogin" Label="@Localizer.Get("Connection login")" Disabled="_dbCon.ADAuthentication" />
            <MudTextField @bind-Value="_dbCon.Password" Label="@Localizer.Get("Password")" InputType="InputType.Password" Disabled="_dbCon.ADAuthentication" />

            <MudNumericField @bind-Value="_dbCon.CommandTimeOut" Label="@Localizer.Get("Command timeout")" />
            <MudButton Disabled="@_loading" OnClick="OnClickConnectionTest" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                @if (_loading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">@Localizer.Get("Processing")</MudText>
                }
                else
                {
                    <MudText>@Localizer.Get("Test Db connection")</MudText>
                }
            </MudButton>
            <MudText>@Localizer.Get("Connection Feedback:") @_connectionTestResult</MudText>
        }
    </MudCardContent>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onclick="ValidateActivity" Disabled="@_validateButtonDisabled">@Localizer.Get("Validate")</MudButton>
            </MudCardActions>
        </Authorized>
    </AuthorizeView>
</MudCard>

@code {
    private ActivityDTO _targetInfo = new();

    private string _connectionTestResult = string.Empty;
    private bool _validateButtonDisabled = true;
    private ActivityDbConnectionDTO _dbCon = new();
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _targetInfo = await DataService.GetUniqueValue(_targetInfo, "GetDataTransferInfo");
        _dbCon = _targetInfo.ActivityDbConnections.First();
    }


    private async Task ValidateActivity()
    {

        var result = await DataService.PostValues(_targetInfo, "ActivityUpdate");
        if (result.Success)
        {
            NavManager.NavigateTo("/");
        }
    }


    private async Task OnClickConnectionTest()
    {
        _loading = true;
        await Task.Run(ConnectionTest);
        _loading = false;
    }

    private async Task ConnectionTest()
    {
        var tryConn = new ActivityDbConnectionDTO();
        tryConn.ADAuthentication = _dbCon.ADAuthentication;
        tryConn.ConnectionLogin = _dbCon.ConnectionLogin;
        tryConn.ConnectionPath = _dbCon.ConnectionPath;
        tryConn.IntentReadOnly = _dbCon.IntentReadOnly;
        tryConn.DbSchema = _dbCon.DbSchema;
        tryConn.TypeDb = _dbCon.TypeDb;
        tryConn.Port = _dbCon.Port;
        tryConn.UseDbSchema = _dbCon.UseDbSchema;
        tryConn.Password = _dbCon.Password;
        var result = await DataService.PostValues(tryConn, "TestConnection", ApiControllers.RemoteDbApi);
        _connectionTestResult = result.Message ?? "Ok!";
    }


    public void OnSelectedItemChangedHandler(IEnumerable<string> value)
    {
        _validateButtonDisabled = true;
    }

}
