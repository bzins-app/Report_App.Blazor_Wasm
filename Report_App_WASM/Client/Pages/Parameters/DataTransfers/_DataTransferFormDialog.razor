<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch { CrudAction.Update => Icons.Material.Filled.Edit, CrudAction.Create => Icons.Material.Filled.Create, _ => Icons.Material.Filled.DeleteForever })" Class="mr-3 mb-n1"/>
            @Localizer.Get(Action switch
            {
                CrudAction.Update => "Edit",
                CrudAction.Create => "Add",
                _ => "Delete"
            })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="1" Style="max-height: 80vh; overflow-x: hidden; overflow-y: auto; width: 100%">
            <MudForm Model="@Item" @ref="@_form">
                <MudTextField @bind-Value="Item!.ActivityName" Label="@Localizer.Get("Configuration name")" Required RequiredError="@Localizer.Get("Required")" Validation="CheckActivityName()" Disabled="Action == CrudAction.Delete"/>
                <MudSelect Label="@Localizer.Get("Type of Database")" @bind-Value="DbCon.TypeDb" AnchorOrigin="Origin.BottomCenter" Required RequiredError="@Localizer.Get("Please select a Db type")" Disabled="true">
                    @if (DbCon.TypeDb == 0)
                    {
                        <MudSelectItem Value="DbCon.TypeDb">@Localizer.Get("Please select a Db type")</MudSelectItem>
                    }
                    @foreach (TypeDb item in Enum.GetValues(typeof(TypeDb)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                @if (DbCon.TypeDb > 0 && Action != CrudAction.Delete)
                {
                    @if (DbCon.TypeDb == TypeDb.Oracle)
                    {
                        <MudTextField @bind-Value="DbCon.ConnectionPath" Label="@Localizer.Get("Connection path")" Required RequiredError="@Localizer.Get("Required")" Placeholder="IP or Hostname:Port /Instance" Margin="Margin.Dense"/>
                        <MudGrid>
                            <MudItem md="6">
                                <MudSwitch @bind-Checked="DbCon.UseDbSchema" Label="@Localizer.Get("Use a DB schema?")" Color="Color.Primary"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.DbSchema" Label="@Localizer.Get("DB schema")" Disabled="!DbCon.UseDbSchema" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.ConnectionLogin" Label="@Localizer.Get("Connection login")" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.Password" Label="@Localizer.Get("Password")" InputType="InputType.Password" Margin="Margin.Dense"/>
                            </MudItem>
                        </MudGrid>
                        <MudNumericField @bind-Value="DbCon.CommandFetchSize" Label="@Localizer.Get("Command fetch size")" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense"/>
                    }
                    else if (DbCon.TypeDb == TypeDb.SqlServer)
                    {
                        <MudTextField @bind-Value="DbCon.ConnectionPath" Label="@Localizer.Get("Connection path")" Required RequiredError="@Localizer.Get("Required")" Placeholder="IP or Hostname" Margin="Margin.Dense"/>
                        <MudGrid>
                            <MudItem md="6">
                                <MudSwitch @bind-Checked="DbCon.UseDbSchema" Label="@Localizer.Get("Indicate the database name?")" Color="Color.Primary"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.DbSchema" Label="@Localizer.Get("Database name")" Disabled="!DbCon.UseDbSchema" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudSwitch @bind-Checked="DbCon.IntentReadOnly" Label="@Localizer.Get("Application intent read only?")" Color="Color.Primary"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudSwitch @bind-Checked="DbCon.AdAuthentication" Label="@Localizer.Get("Use Windows authentication?")" Color="Color.Primary"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.ConnectionLogin" Label="@Localizer.Get("Connection login")" Disabled="DbCon.AdAuthentication" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.Password" Label="@Localizer.Get("Password")" InputType="InputType.Password" Disabled="DbCon.AdAuthentication" Margin="Margin.Dense"/>
                            </MudItem>
                        </MudGrid>
                    }
                    else if (DbCon.TypeDb == TypeDb.Db2)
                    {
                        <MudTextField @bind-Value="DbCon.ConnectionPath" Label="@Localizer.Get("IP or Servername")" Required RequiredError="@Localizer.Get("Required")" Placeholder="IP or Hostname:Port" Margin="Margin.Dense"/>
                        <MudTextField @bind-Value="DbCon.DbSchema" Label="@Localizer.Get("Database name")" Required RequiredError="@Localizer.Get("Required")" Margin="Margin.Dense"/>
                        <MudGrid>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.ConnectionLogin" Label="@Localizer.Get("Connection login")" Required RequiredError="@Localizer.Get("Required")" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.Password" Label="@Localizer.Get("Password")" InputType="InputType.Password" Margin="Margin.Dense"/>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudTextField @bind-Value="DbCon.ConnectionPath" Label="@Localizer.Get("IP or Servername")" Required RequiredError="@Localizer.Get("Required")" Placeholder="IP or Hostname" Margin="Margin.Dense"/>
                        <MudGrid>
                            <MudItem md="6">
                                <MudNumericField @bind-Value="DbCon.Port" Label="@Localizer.Get("Connection port")" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.DbSchema" Label="@Localizer.Get("Database name")" Required RequiredError="@Localizer.Get("Required")" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.ConnectionLogin" Label="@Localizer.Get("Connection login")" Required RequiredError="@Localizer.Get("Required")" Margin="Margin.Dense"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField @bind-Value="DbCon.Password" Label="@Localizer.Get("Password")" InputType="InputType.Password" Margin="Margin.Dense"/>
                            </MudItem>
                        </MudGrid>
                    }

                    <MudGrid>
                        <MudItem md="6">
                            <MudNumericField @bind-Value="DbCon.CommandTimeOut" Label="@Localizer.Get("Command timeout")" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense"/>
                        </MudItem>
                        @if (_appConst is { ActivateTaskSchedulerModule: true } && Action == CrudAction.Update)
                        {
                            <MudItem md="6">
                                <MudNumericField @bind-Value="DbCon.TaskSchedulerMaxNbrofRowsFetched" Label="@(Localizer.Get("Task scheduler") + ": " + Localizer.Get("Max of rows fetched"))" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense"/>
                            </MudItem>
                        }
                        @if (_appConst is { ActivateAdHocQueriesModule: true } && Action == CrudAction.Update)
                        {
                            <MudItem md="6">
                                <MudNumericField @bind-Value="DbCon.AdHocQueriesMaxNbrofRowsFetched" Label="@(Localizer.Get("Ad hoc queries") + ": " + Localizer.Get("Max of rows fetched"))" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense"/>
                            </MudItem>
                        }
                        <MudItem md="6">
                            <MudNumericField @bind-Value="DbCon.DataTransferMaxNbrofRowsFetched" Label="@(Localizer.Get("DataTransfer") + ": " + Localizer.Get("Max of rows fetched"))" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense"/>
                        </MudItem>
                    </MudGrid>
                    <MudLoadingButton @bind-Loading="_loading" LoadingAdornment="Adornment.Start" LoadingCircularColor="Color.Primary" OnClick="OnClickConnectionTest" Variant="Variant.Filled" Color="Color.Primary">
                        <LoadingContent>
                            <MudText>@Localizer.Get("Processing")</MudText>
                        </LoadingContent>
                        <ChildContent>
                            <MudText>@Localizer.Get("Test Db connection")</MudText>
                        </ChildContent>
                    </MudLoadingButton>
                    <MudText>@Localizer.Get("Connection Feedback:") @_connectionTestResult</MudText>
                }
            </MudForm>
            @if (Action == CrudAction.Delete)
            {
                <MudTextField @bind-Value="_deletionValidation" Label="@(Localizer.Get("Confirm the deletion by entering") + ": Validate")" Required RequiredError="@Localizer.Get("Required")" Margin="Margin.Dense"/>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Color="Action == CrudAction.Delete ? Color.Error : Color.Primary" OnClick="Validate">@Localizer.Get(Action == CrudAction.Delete ? "Delete" : "Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public ActivityDto? Item { get; set; }

    [Parameter] public CrudAction Action { get; set; }

    private MudForm _form = default!;
    private string _deletionValidation = null!;

    private ActivityDbConnectionDto DbCon { get; set; } = new() { TypeDb = TypeDb.SqlServer };
    private string _connectionTestResult = null!;
    private List<SelectItemActivitiesInfo> _activities = new();
    private ApplicationConstantsValues? _appConst;
    private bool _loading;


    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async Task Validate()
    {
        if (Action == CrudAction.Delete)
        {
            if (_deletionValidation == "Validate")
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
        else
        {
            await _form.Validate();
            if (_form.IsValid && DbCon.TypeDb > 0)
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (Item!.ActivityDbConnections.Any())
        {
            DbCon = Item.ActivityDbConnections.First();
            if (DbCon.TypeDb == TypeDb.PostgreSql || DbCon.TypeDb == TypeDb.MariaDb || DbCon.TypeDb == TypeDb.MySql)
            {
                if (DbCon.Port == 0)
                {
                    DbCon.Port = DbCon.TypeDb == TypeDb.PostgreSql ? 5432 : 3306;
                }
            }
        }

        DbCon.TypeDb = TypeDb.SqlServer;
        _activities = await DataService.GetValues<SelectItemActivitiesInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);
        _loading = false;
        _appConst = await AppService.GetApplicationConstantsValues();
    }

    private async Task OnClickConnectionTest()
    {
        _loading = true;
        await Task.Run(ConnectionTest);
        _loading = false;
    }

    private async Task ConnectionTest()
    {
        var tryConn = new ActivityDbConnectionDto
        {
            AdAuthentication = DbCon.AdAuthentication,
            ConnectionLogin = DbCon.ConnectionLogin,
            ConnectionPath = DbCon.ConnectionPath,
            IntentReadOnly = DbCon.IntentReadOnly,
            DbSchema = DbCon.DbSchema,
            TypeDb = DbCon.TypeDb,
            Port = DbCon.Port,
            UseDbSchema = DbCon.UseDbSchema,
            Password = DbCon.Password
        };
        var result = await DataService.PostValues(tryConn, "TestConnection", ApiControllers.RemoteDbApi);
        _connectionTestResult = result.Message ?? "Ok!";
    }

    private bool CheckActivityName()
    {
        if (string.IsNullOrEmpty(Item?.ActivityName))
        {
            return false;
        }

        Item.ActivityName = Item.ActivityName.Trim();
        if (_activities.Any(a => a.ActivityName?.ToLower() == Item.ActivityName.ToLower()))
        {
            Localizer.Get("Another activity with the same name already exists");
            return false;
        }

        return true;
    }

}