@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Localizer.Get("Parameters")</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudSwitch @bind-Value="_param.ActivateTaskSchedulerModule" Label="@Localizer.Get("Activate Tasks scheduler module?")" Color="Color.Primary"/>
        <MudSwitch @bind-Value="_param.ActivateAdHocQueriesModule" Label="@Localizer.Get("Activate Adhoc queries module?")" Color="Color.Primary"/>
        <MudNumericField @bind-Value="_param.LogsRetentionInDays" Label="@Localizer.Get("Logs: Archiving duration")"/>
        <MudTextField @bind-Value="_param.EmailPrefix" Label="@Localizer.Get("Email prefix")" Required/>
        <MudTextField @bind-Value="_param.AlertEmailPrefix" Label="@Localizer.Get("Alert email prefix")" Required/>
        <MudTextField @bind-Value="_param.ErrorEmailPrefix" Label="@Localizer.Get("Error email prefix")" Required/>
        <MudTable Items="@_emailItems" Hover="true" Dense="true" Virtualize="true" Elevation="25">
            <ToolBarContent>
                <MudButton OnClick="OpenTextEditorComponent" Variant="Variant.Filled" Color="Color.Tertiary" Style="text-transform: none;" Size="Size.Small">@Localizer.Get("Administrator email for error notifications")</MudButton>
                <MudSpacer/>
                <MudForm Model="@_email" @ref="_form">
                    <MudTextField InputMode="InputMode.email" Label="@Localizer.Get("Administrator email for error notifications")" @bind-Value="_email" AdornmentIcon="@Icons.Material.Filled.Email" IconSize="Size.Medium" Style="width: 300px;"
                                  Validation="@(new EmailAddressAttribute { ErrorMessage = Localizer.Get("The email address is invalid") })" Required RequiredError="@Localizer.Get("Required")"/>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Style="text-transform: none;" Size="Size.Small"
                               OnClick="AddRecipient">
                        @Localizer.Get("Add recipient")
                    </MudButton>
                </MudForm>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@Localizer.Get("Email")</MudTh>
                <MudTh>@Localizer.Get("Cc")</MudTh>
                <MudTh>@Localizer.Get("Blind copy")</MudTh>
                <MudTh>@Localizer.Get("Action")</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@Localizer.Get("Email")">@context.Email</MudTd>
                <MudTd DataLabel="@Localizer.Get("Cc")">
                    <MudSwitch Value="@context.Cc" ValueChanged="(bool value) => ChangeCcValue(context, value)" Color="Color.Primary"/>
                </MudTd>
                <MudTd DataLabel="@Localizer.Get("Blind copy")">
                    <MudSwitch Value="@context.Bcc" ValueChanged="(bool value) => ChangeBccValue(context, value)" Color="Color.Primary"/>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => DeleteRecipient(context)"></MudIconButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
    <MudCardActions>
        <MudItem Class="pa-4 mt-4">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onclick="UpdateApplication">@Localizer.Get("Validate")</MudButton>
                </Authorized>
            </AuthorizeView>
        </MudItem>
    </MudCardActions>
</MudCard>

@code {
    private SystemParametersDto _param = new();
    private List<EmailRecipient> _emails = new();
    readonly List<EmailRecipient> _emailItems = new();
    private string _email = "";
    private bool _emailNotValidated;
    private string? _completeLogoPath;
    EmailAddressAttribute _checkEmail = null!;
    private MudForm _form = default!;

    protected override async Task OnInitializedAsync()
    {
        _checkEmail = new EmailAddressAttribute { ErrorMessage = Localizer.Get("The email address is invalid") };
        _param = await DataService.GetUniqueValue(_param, "GetApplicationParameters", ApiControllers.ApplicationParametersApi);
        if (!string.IsNullOrEmpty(_param.AdminEmails))
        {
            _emails = JsonSerializer.Deserialize<List<EmailRecipient>>(_param.AdminEmails)!;
            PopulateEmailItems();
        }
    }

    private async Task UpdateApplication()
    {
        var result = await DataService.PostValues(_param, "ApplicationParametersUpdate");

        if (result.Success)
        {
            Snackbar.Add(Localizer.Get("Application parameters updated"), Severity.Success);
        }
        else
        {
            Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
        }

        StateHasChanged();
    }


    private void PopulateEmailItems()
    {
        _emailItems.Clear();
        foreach (var t in _emails)
        {
            _emailItems.Add(t);
        }
    }

    private Task DeleteRecipient(EmailRecipient recipient)
    {
        _emails?.Remove(recipient);
        UpdateRecipientsEmail();
        return Task.CompletedTask;
    }

    private Task ChangeBccValue(EmailRecipient recipient, bool value)
    {
        var bccUpdate = _emails.FirstOrDefault(a => a.Email == recipient.Email);
        if (bccUpdate != null && bccUpdate.Bcc != value)
        {
            bccUpdate.Bcc = value;
            UpdateRecipientsEmail();
        }

        return Task.CompletedTask;
    }

    private Task ChangeCcValue(EmailRecipient recipient, bool value)
    {
        var ccUpdate = _emails.FirstOrDefault(a => a.Email == recipient.Email);
        if (ccUpdate != null && ccUpdate.Cc != value)
        {
            ccUpdate.Cc = value;
            UpdateRecipientsEmail();
        }

        return Task.CompletedTask;
    }

    private async Task AddRecipient()
    {
        await _form.Validate();
        if (_form.IsValid && _emails.All(a => a.Email != _email))
        {
            _emails.Add(new EmailRecipient { Email = _email });
            UpdateRecipientsEmail();
            _email = "";
        }
        else if (_emails != null && _emails.Any(a => a.Email == _email))
        {
            _email = "";
        }
    }

    private void UpdateRecipientsEmail()
    {
        _param.AdminEmails = JsonSerializer.Serialize(_emails);
        PopulateEmailItems();
    }

    private string? _htmlText;
    private readonly bool _displayTagMessage = true;

    private async Task OpenTextEditorComponent()
    {
        _htmlText = _param.ErrorEMailMessage;
        var maxWidth = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["htmlText"] = _htmlText, ["displayTagMessage"] = _displayTagMessage };

        var dialog = await DialogService.ShowAsync<_TextEditor>(Localizer.Get("Edit error email template"), parameters, maxWidth);
        var result = await dialog.Result;
        if (!(result is { Canceled: true }))
        {
            _param.ErrorEMailMessage = result?.Data?.ToString();
        }
    }

}