@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch
                           {
                               CrudAction.Update => Icons.Material.Filled.Edit,
                               CrudAction.Create => Icons.Material.Filled.Create,
                               _ => Icons.Material.Filled.DeleteForever
                               } )" Class="mr-3 mb-n1" />
            @Localizer.Get(Action switch
            {
                CrudAction.Update => "Edit",
                CrudAction.Create => "Add",
                _ => "Delete"
                })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="Item.UserName" Label="@Localizer.Get("Name")" Disabled />
        <MudTextField @bind-Value="Item.Email" Label="@Localizer.Get("Email")" Disabled />
        <MudCard Elevation=0>
            <MudCardContent>
                <MudGrid Style="min-height:300px">
                    <MudItem xs=5 sm=5 md=5>
                        <MudText Typo="Typo.h5">@Localizer.Get("Roles available")</MudText>
                        <MudTable Items="@_rolesAvailable" Dense="true" MultiSelection="true" @bind-SelectedItems="_rolesToAssign" Hover="true" Style="height:400px" Height="400px" Outlined="true" Elevation="0">
                            <HeaderContent>
                                <MudTh>@Localizer.Get("Name")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Nr">@context</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                    <MudItem xs=2 sm=2 md=1>
                        <MudContainer Style="height:100%">
                            <MudButtonGroup Variant="Variant.Outlined" VerticalAlign="true" Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <MudIconButton Icon="@Icons.Filled.KeyboardDoubleArrowRight" aria-label="add" OnClick="AssignRoles"></MudIconButton>
                                        <MudIconButton Icon="@Icons.Filled.KeyboardDoubleArrowLeft" aria-label="remove" OnClick="RemoveRoles"></MudIconButton>
                                    </Authorized>
                                    <NotAuthorized>
                                        <MudIconButton Icon="@Icons.Filled.KeyboardDoubleArrowRight" aria-label="add" Disabled></MudIconButton>
                                        <MudIconButton Icon="@Icons.Filled.KeyboardDoubleArrowLeft" aria-label="remove" Disabled></MudIconButton>
                                    </NotAuthorized>
                                </AuthorizeView>
                            </MudButtonGroup>
                        </MudContainer>
                    </MudItem>
                    <MudItem xs=5 sm=5 md=5>
                        <MudText Typo="Typo.h5">@Localizer.Get("Roles assigned")</MudText>
                        <MudTable Items="@_rolesAssigned" Dense="true" MultiSelection="true" @bind-SelectedItems="_rolesToRemove" Hover="true" Style="height:400px" Height="400px" Outlined="true" Elevation="0">
                            <HeaderContent>
                                <MudTh>@Localizer.Get("Name")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Nr">@context</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Back")</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ApplicationUser Item { get; set; }
    [Parameter] public CrudAction Action { get; set; }
    private MudForm _form = default!;
    private HashSet<string> _rolesToAssign = new();
    private readonly List<string> _rolesAvailable = new();

    private HashSet<string> _rolesToRemove = new();
    private readonly List<string> _rolesAssigned = new();

    //private List<TransferItem> dataSource = new List<TransferItem>();
    private List<string> _targetKeys = new();
    private string[] _selectedKeys = Array.Empty<string>();
    private string[] _titles;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = $"{ApiControllers.UserManagerApi}GetRolesList";
        var roles = await Http.GetFromJsonAsync<List<string>>(uri);

        foreach (var r in roles)
        {
            _rolesAvailable.Add(r);
        }

        var uriUser = $"{ApiControllers.UserManagerApi}GetRolesListPerUser?UserName={Item.UserName}";
        var userRoles = await Http.GetFromJsonAsync<List<string>>(uriUser);

        foreach (var ur in userRoles)
        {
            _rolesAssigned.Add(ur);
            _rolesAvailable.Remove(ur);
        }

        _titles = new string[] { Localizer.Get("Roles available"), Localizer.Get("Roles assigned") };
        await base.OnInitializedAsync();
    }

    private async Task AssignRoles()
    {
        if (_rolesToAssign != null)
        {
            var values = new ChangeRolePayload { UserName = Item.UserName, Roles = _rolesToAssign.ToList() };
            var result = await DataService.PostValues(values, "AddRoles", ApiControllers.UserManagerApi);
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Roles :") + string.Join(", ", _rolesToAssign.Select(x => x)) + " " + Localizer.Get("Role added"), Severity.Success);
                foreach (var t in _rolesToAssign)
                {
                    _rolesAvailable.Remove(t);
                    _rolesAssigned.Add(t);
                }
                _rolesToAssign = null;
            }
            StateHasChanged();
        }
    }

    private async Task RemoveRoles()
    {
        if (_rolesToRemove != null)
        {
            var values = new ChangeRolePayload { UserName = Item.UserName, Roles = _rolesToRemove.ToList() };
            var result = await DataService.PostValues(values, "RemoveRoles", ApiControllers.UserManagerApi);
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Roles :") + string.Join(", ", _rolesToRemove.Select(x => x)) + " " + Localizer.Get("Role removed"), Severity.Info);
                foreach (var t in _rolesToRemove)
                {
                    _rolesAssigned.Remove(t);
                    _rolesAvailable.Add(t);
                }
                _rolesToRemove = null;
            }
            StateHasChanged();
        }
    }
}
