<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch { CrudAction.Update => Icons.Material.Filled.Edit, CrudAction.Create => Icons.Material.Filled.Create, _ => Icons.Material.Filled.DeleteForever })" Class="mr-3 mb-n1"/>
            @Localizer.Get(Action switch
            {
                CrudAction.Update => "Edit",
                CrudAction.Create => "Add",
                _ => "Delete"
            })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Item" @ref="@_form">
            <MudTextField @bind-Value="Item.ConfigurationName" Label="@Localizer.Get("Configuration name")" Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete"/>
            <MudTextField @bind-Value="Item.FilePath" Label="@Localizer.Get("File path")" Required RequiredError="@Localizer.Get("Required")" Disabled="Action == CrudAction.Delete"/>
            <MudSwitch T="bool" @bind-Value="Item.TryToCreateFolder" Label="@Localizer.Get("Try to create the target folder if not exists?")" Color="Color.Primary" Disabled="Action == CrudAction.Delete"/>
            @if (_listConfigs.Any())
            {
                <MudSwitch @bind-Value="Item.UseSftpProtocol" Label="@Localizer.Get("Use Sftp protocol?")" Color="Color.Primary" Disabled="Action == CrudAction.Delete"/>
                <MudSelect T="int" Label="@Localizer.Get("Choose an Sftp configuration")" @bind-Value="Item.SftpConfigurationId"
                           AnchorOrigin="Origin.BottomCenter" Disabled="!Item.UseSftpProtocol"
                           Required>
                    @foreach (var value in _listConfigs)
                    {
                        <MudSelectItem Value="@value.Id">@value.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudForm>
        @if (Action == CrudAction.Delete)
        {
            <MudTextField @bind-Value="_deletionValidation" Label="@(Localizer.Get("Confirm the deletion by entering") + ": Validate")" Required RequiredError="@Localizer.Get("Required")"/>
        }
        else
        {
            <MudButton OnClick="TestConfiguration" Variant="Variant.Filled" Color="Color.Info" Style="text-transform: none" Size="Size.Small">@Localizer.Get("Test path configuration")</MudButton>
            <MudText>@Localizer.Get("Test Feedback:") @_directoryTestResult</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Color="Action == CrudAction.Delete ? Color.Error : Color.Primary" OnClick="Validate">@Localizer.Get(Action == CrudAction.Delete ? "Delete" : "Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public FileDepositPathConfigurationDto Item { get; set; } = new();

    [Parameter] public CrudAction Action { get; set; }

    private List<SelectItem> _listConfigs = new();
    private MudForm _form = default!;
    private string _deletionValidation = null!;
    private string? _directoryTestResult;


    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        var controllerActionListConfigs = "SftpInfo";
        _listConfigs = await DataService.GetValues<SelectItem>(controllerActionListConfigs, ApiControllers.ApplicationParametersApi);
    }

    private async Task Validate()
    {
        if (Action == CrudAction.Delete)
        {
            if (_deletionValidation == "Validate")
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
        else
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
    }

    private async Task TestConfiguration()
    {
        var payload = new DepositPathTest { UseSftpProtocol = Item.UseSftpProtocol, SftpConfigurationId = Item.SftpConfigurationId, FilePath = Item.FilePath, TryToCreateFolder = Item.TryToCreateFolder };
        var result = await DataService.PostValues(payload, "TestDepositPath", ApiControllers.DepositPathApi);
        if (result.Success)
        {
            _directoryTestResult = "OK!";
        }
        else
        {
            _directoryTestResult = result.Message;
        }
    }

}