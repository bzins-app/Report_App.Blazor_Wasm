@inject HttpClient Http
@implements IAsyncDisposable
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin, Supervisor,Demo")]

<PageTitle>@Localizer.Get("File deposit path")</PageTitle>

<ErrorBoundary>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error">
            <b>@Localizer.Get("An error has occurred"): @_errorMessage</b>
        </MudText>
    }
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("File deposit path")</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" title="@Localizer.Get("Add")"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto;text-wrap-style: nowrap;">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <Blazor.SimpleGrid.TemplateColumn>
                        <MudStack Row="true" Justify="Justify.Center">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => OpenEditDialog(context)" title="@Localizer.Get("Edit")"/>
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => OpenDeleteDialog(context)" title="@Localizer.Get("Delete")"/>
                        </MudStack>
                    </Blazor.SimpleGrid.TemplateColumn>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ConfigurationName)" Title="@Localizer.Get("Configuration name")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.FilePath)" Title="@Localizer.Get("File path")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.TryToCreateFolder)" Title="@(Localizer.Get("Try to create folder") + "?")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.UseSftpProtocol)"Title="@(Localizer.Get("Use Sftp protocol") + "?")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.IsReachable)" Title="@(Localizer.Get("Is reachable") + "?")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true"/>
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
    GridItemsProvider<FileDepositPathConfigurationDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations = default!;
    private bool _processing = false;
    SimpleGrid<FileDepositPathConfigurationDto> _grid = default!;
    private string? _errorMessage = default!;
    private bool _rendering = false;

    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                return GridItemsProviderResult.From(Array.Empty<FileDepositPathConfigurationDto>(), 0);
            }

            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<FileDepositPathConfigurationDto>?> GetRemoteData(GridItemsProviderRequest<FileDepositPathConfigurationDto> req)
    {
        // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
        // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataQuery = _grid?.GetODataQuery();
        var url = "odata/DepositPath?";
        if (string.IsNullOrEmpty(odataQuery))
        {
            url += "$count=true&$top=10";
        }
        else
        {
            url += odataQuery;
        }

        try
        {
            return await DataService.GetODataValues<FileDepositPathConfigurationDto>(url, req.CancellationToken);
        }
        catch
        {
            // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    private async Task OpenEditDialog(FileDepositPathConfigurationDto value)
    {
        var item = new FileDepositPathConfigurationDto
        {
            ConfigurationName = value.ConfigurationName,
            FilePath = value.FilePath,
            TryToCreateFolder = value.TryToCreateFolder,
            UseSftpProtocol = value.UseSftpProtocol,
            SftpConfigurationId = value.SftpConfigurationId
        };
        var parameters = new DialogParameters { ["Item"] = item, ["Action"] = CrudAction.Update };

        var dialog = await DialogService.ShowAsync<_FileDepositPathFormDialog>("Edit", parameters);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            _errorMessage = string.Empty;
            value.ConfigurationName = item.ConfigurationName;
            value.FilePath = item.FilePath;
            value.TryToCreateFolder = item.TryToCreateFolder;
            value.UseSftpProtocol = item.UseSftpProtocol;
            value.SftpConfigurationId = item.SftpConfigurationId;

            var result = await DataService.PostValues(value, "DepositPathUpdate");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object updated"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private async Task OpenDeleteDialog(FileDepositPathConfigurationDto value)
    {
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Delete };

        var dialog = await DialogService.ShowAsync<_FileDepositPathFormDialog>("Delete", parameters);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "DepositPathDelete");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object deleted"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private async Task OpenCreateDialog()
    {
        var value = new FileDepositPathConfigurationDto();
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Create };

        var dialog = await DialogService.ShowAsync<_FileDepositPathFormDialog>("Create", parameters);
        var feedback = await dialog.Result;

        if (!(feedback is { Canceled: true }))
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "DepositPathInsert");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }
}