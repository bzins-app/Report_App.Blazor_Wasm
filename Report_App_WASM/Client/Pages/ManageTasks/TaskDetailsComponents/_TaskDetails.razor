@inject IDialogService DialogService

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Queries")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" Title="@Localizer.Get("Add")" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid Items="@_elements.AsQueryable()" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <TemplateColumn>
                        <MudStack Row=true>
                            <MudIconButton Icon="@Icons.Outlined.Edit" OnClick="()=>OpenEditDialog(context)" Title="@Localizer.Get("Edit")" />
                            <MudIconButton Icon="@Icons.Outlined.Delete" OnClick="()=>OpenDeleteDialog(context)" Title="@Localizer.Get("Delete")" />
                        </MudStack>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.QueryName)" Title="@Localizer.Get("Query name")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.DetailSequence)" Title="@Localizer.Get("Query sequence")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true" />
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code {
    [Parameter] public TaskHeaderDTO Item { get; set; }
    [Parameter] public List<TaskDetailDTO> ItemToDelete { get; set; }
    [Parameter] public bool ChangePending { get; set; }
    [Parameter] public EventCallback<bool> ChangePendingChanged { get; set; }
    IEnumerable<TaskDetailDTO> _elements = new List<TaskDetailDTO>();
    SimpleGrid<TaskDetailDTO> _grid;
    PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent _translations = default!;
    DialogOptions _maxWidth = new DialogOptions() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
    private bool _disable;

    protected override void OnParametersSet()
    {
        UpdateElements();
        _translations = AppService.GetGridTranslations();
    }

    private void UpdateElements()
    {
        _elements = Item.TaskDetails.ToList();
    }

    private async Task OpenEditDialog(TaskDetailDTO value)
    {
        _disable = true;
        TaskDetailDTO itemUpdate = new TaskDetailDTO()
            {
                Query = value.Query,
                QueryName = value.QueryName,
                QueryParameters = value.QueryParameters,
                DetailSequence = value.DetailSequence,
                TaskDetailParameters = value.TaskDetailParameters,
                LastRunDateTime=value.LastRunDateTime
            };
        var parameters = new DialogParameters { ["Item"] = itemUpdate, ["ActivityId"] = Item.Activity.ActivityId, ["Header"] = Item, ["Action"] = CrudAction.Update };

        var dialog = DialogService.Show<_TaskDetailsFormDialog>("Edit", parameters, _maxWidth);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            var result = (TaskDetailDTO)feedback.Data;
            var toUpdate = Item.TaskDetails.Where(a => a.TaskDetailId == value.TaskDetailId).First();
            toUpdate.Query = result.Query;
            toUpdate.QueryName = result.QueryName;
            toUpdate.QueryParameters = result.QueryParameters;
            toUpdate.DetailSequence = result.DetailSequence;
            toUpdate.TaskDetailParameters = result.TaskDetailParameters;
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
        }
        _disable = false;
    }

    private async Task OpenDeleteDialog(TaskDetailDTO value)
    {
        _disable = true;
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, DisableBackdropClick = false, MaxWidth = MaxWidth.ExtraSmall };
        bool? result = await DialogService.ShowMessageBox(Localizer.Get("Warning"),Localizer.Get("Are you sure?"), Localizer.Get("Delete"),null, cancelText: Localizer.Get("Cancel"), dialogOptions);

        if (result!=null)
        {
            ItemToDelete.Add(value);
            Item.TaskDetails.Remove(value);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            UpdateElements();
        }
        _disable = false;
    }


    private async Task OpenCreateDialog()
    {
        var value = new TaskDetailDTO();
        var parameters = new DialogParameters { ["Item"] = value, ["ActivityId"] = Item.Activity.ActivityId, ["Header"] = Item, ["Action"] = CrudAction.Create };

        var dialog = DialogService.Show<_TaskDetailsFormDialog>("Create", parameters, _maxWidth);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            Item.TaskDetails.Add((TaskDetailDTO)feedback.Data);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            UpdateElements();
        }
    }
    private void OnRefresh()
    {
        StateHasChanged();
    }

    private void RemoveFilters()
    {
        _grid.RefreshDataAsync();
        UpdateElements();
    }
}
