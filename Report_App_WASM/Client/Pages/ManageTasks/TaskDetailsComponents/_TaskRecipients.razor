@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudButton OnClick="OpenTextEditorComponent" Variant="Variant.Filled" Color="Color.Info" Style="text-transform: none" Size="Size.Small">@localizer.Get("Edit email message")</MudButton>
        <MudForm Model="@email" @ref="form">
            <MudTextField T="string" Label="@localizer.Get("Enter the email address")" @bind-Value="email"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = localizer.Get("The email address is invalid")})" Required RequiredError="@localizer.Get("Required")"/>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Style="text-transform: none" Size="Size.Small"
                       OnClick="Add">@localizer.Get("Add recipient")</MudButton>
        </MudForm>
        <MudTable Items="@EmailItems" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>@localizer.Get("Email")</MudTh>
                <MudTh>@localizer.Get("Blind copy")</MudTh>
                <MudTh>@localizer.Get("Action")</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@localizer.Get("Email")">@context.Email</MudTd>
                <MudTd DataLabel="@localizer.Get("Blind copy")"><MudSwitch Checked="@context.BCC" CheckedChanged="(bool value)=>ChangeBccValue(context, value)" Color="Color.Primary" /></MudTd>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="()=>Delete(context)"></MudIconButton></MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public TaskHeaderDTO Item { get; set; }
    [Parameter] public bool changePending { get; set; }
    [Parameter] public EventCallback<bool> changePendingChanged { get; set; }
    private List<EmailRecipient> emails = new List<EmailRecipient>();
    List<EmailRecipient> EmailItems = new();
    private TaskEmailRecipientDTO recipients = new();
    private MudForm form = default!;
    private string email = "";

    protected override void OnParametersSet()
    {
        recipients = Item.TaskEmailRecipients.FirstOrDefault();
        if (recipients != null)
        {
            if (!string.IsNullOrEmpty(recipients.Email))
            {
                emails = JsonSerializer.Deserialize<List<EmailRecipient>>(recipients.Email);
                PopulateEmailItems();
            }
        }
        else
        {
            recipients = new() { TaskHeader = Item, Email = "[]", Message = Item.Type == TaskType.Alert ? "<p>Hello,</p><p>An alert has been raised:</p><p>{0}</p>" : "<p>Hello,</p><p>Please find enclosed, the report.</p><p>&nbsp;</p>" };
            Item.TaskEmailRecipients = new List<TaskEmailRecipientDTO>() { recipients };
        }
    }

    private void PopulateEmailItems()
    {
        EmailItems.Clear();
        foreach (var t in emails)
        {
            EmailItems.Add(t);
        }
    }

    private async Task Delete(EmailRecipient id)
    {
        emails.Remove(id);
        recipients.Email = JsonSerializer.Serialize(emails);
        PopulateEmailItems();
        changePending = true;
        await changePendingChanged.InvokeAsync(changePending);
    }

    private void ChangeBccValue(EmailRecipient id, bool value)
    {
        var bccupdate = emails.Where(a => a.Email == id.Email).FirstOrDefault();
        bccupdate.BCC = value;
        recipients.Email = JsonSerializer.Serialize(emails);
        PopulateEmailItems();
    }

    private async Task Add()
    {
        await form.Validate();
        if (form.IsValid)
        {
            if (!emails.Select(a => a.Email).Contains(email))
            {
                emails.Add(new EmailRecipient { Email = email });
                recipients.Email = JsonSerializer.Serialize(emails);
                PopulateEmailItems();
                changePending = true;
                await changePendingChanged.InvokeAsync(changePending);
            }
        }
        email = "";
    }


    private string htmlText;
    private bool displayTagMessage = false;
    private async Task OpenTextEditorComponent()
    {
        var typeReport = Item.Type;
        if (typeReport == TaskType.Alert)
        {
            displayTagMessage = true;
        }
        htmlText = recipients.Message;
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["htmlText"] = htmlText, ["displayTagMessage"] = displayTagMessage };

        var dialog = DialogService.Show<_TextEditor>(@localizer.Get("Edit email message"), parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            recipients.Message = result.Data.ToString();
            changePending = true;
            await changePendingChanged.InvokeAsync(changePending);
        }
    }

}
