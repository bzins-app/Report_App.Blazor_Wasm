@inject IDialogService DialogService

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Crons")</MudText>
            <MudSpacer />
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" Title="@Localizer.Get("Add")" />
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" />
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow:auto">
                <SimpleGrid Items="@_elements.AsQueryable()" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <TemplateColumn>
                        <MudStack Row=true>
                            <MudIconButton Icon="@Icons.Outlined.Edit" OnClick="()=>OpenEditDialog(context)" Title="@Localizer.Get("Edit")" />
                            <MudIconButton Icon="@Icons.Outlined.Delete" OnClick="()=>OpenDeleteDialog(context)" Title="@Localizer.Get("Delete")" />
                        </MudStack>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.CronValue)" Title="@Localizer.Get("Cron expression")" Sortable="true" />
                    <PropertyColumn Property="@(p => p.CronDescription)" Title="@Localizer.Get("Cron description")"  Sortable="true" />
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations" />
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code {
    [Parameter] public TaskHeaderDTO Item { get; set; }
    [Parameter] public bool ChangePending { get; set; }
    [Parameter] public EventCallback<bool> ChangePendingChanged { get; set; }
    private List<CronParameters> _crons = new List<CronParameters>();
    SimpleGrid<CronEditView> _grid;
    PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };
    SimpleGridFieldsContent _translations = default!;
    private List<CronEditView> _elements = new List<CronEditView>();
    DialogOptions _dialogOptions = new() { CloseOnEscapeKey = false, DisableBackdropClick = true, MaxWidth = MaxWidth.Large, FullWidth = true };
    private bool _disable;

    private class CronEditView
    {
        public string CronValue { get; set; }
        public string CronDescription { get; set; }
    }


    protected override void OnParametersSet()
    {
        UpdateElements();
        _translations = AppService.GetGridTranslations();
    }

    private void UpdateElements()
    {
        if (!string.IsNullOrEmpty(Item.CronParameters))
        {
            _crons = JsonSerializer.Deserialize<List<CronParameters>>(Item.CronParameters);
            PopulateCronsItems();
        }
    }

    private void PopulateCronsItems()
    {
        _elements.Clear();
        foreach (var t in _crons)
        {
            _elements.Add(new CronEditView { CronValue = t.CronValue, CronDescription = CronExpressionDescriptor.ExpressionDescriptor.GetDescription(t.CronValue) });
        }
    }

    private async Task OpenEditDialog(CronEditView value)
    {
        _disable = true;
        var dataBefore = value.CronValue;
        var parameters = new DialogParameters { ["Value"] = value.CronValue };

        var dialog = DialogService.Show<_cronEditorDialog>(Localizer.Get("Configure the scheduler"), parameters, _dialogOptions);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            var toUpdate = _crons.FirstOrDefault(a => a.CronValue == dataBefore);
            toUpdate.CronValue = feedback.Data.ToString();
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            SetItemCronValues();
            UpdateElements();
        }
        _disable = false;
    }

    private async Task OpenDeleteDialog(CronEditView value)
    {
        _disable = true;
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, DisableBackdropClick = false, MaxWidth = MaxWidth.ExtraSmall };
        bool? result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Are you sure?"), Localizer.Get("Delete"), null, cancelText: Localizer.Get("Cancel"), dialogOptions);

        if (result != null)
        {
            var toRemove = _crons.FirstOrDefault(a => a.CronValue == value.CronValue);
            _crons.Remove(toRemove);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            SetItemCronValues();
            UpdateElements();
        }
        _disable = false;
    }


    private async Task OpenCreateDialog()
    {
        string value = null;
        var parameters = new DialogParameters { ["Value"] = value };

        var dialog = DialogService.Show<_cronEditorDialog>(Localizer.Get("Configure the scheduler"), parameters, _dialogOptions);
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _crons.Add(new CronParameters { CronValue = feedback.Data.ToString() });
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            SetItemCronValues();
            UpdateElements();
        }
    }

    private void SetItemCronValues()
    {
        if (_crons.Any())
        {
            Item.CronParameters = JsonSerializer.Serialize(_crons);
        }
    }

    private void OnRefresh()
    {
        StateHasChanged();
    }

    private void RemoveFilters()
    {
        _grid.RefreshDataAsync();
        UpdateElements();
    }
}
