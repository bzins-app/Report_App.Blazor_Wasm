@using CronExpressionDescriptor
@inject IDialogService DialogService

<ErrorBoundary>
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@Localizer.Get("Crons")</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" title="@Localizer.Get("Add")"/>
                <MudIconButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" title="@Localizer.Get("Remove filters")"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto">
                <SimpleGrid Items="@_elements.AsQueryable()" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <Blazor.SimpleGrid.TemplateColumn>
                        <MudStack Row="true" Justify="Justify.Center">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => OpenEditDialog(context)" title="@Localizer.Get("Edit")"/>
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => OpenDeleteDialog(context)" title="@Localizer.Get("Delete")"/>
                        </MudStack>
                    </Blazor.SimpleGrid.TemplateColumn>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CronValue)" Title="@Localizer.Get("Cron expression")" Sortable="true"/>
                    <Blazor.SimpleGrid.PropertyColumn Property="@(p => p.CronDescription)" Title="@Localizer.Get("Cron description")" Sortable="true"/>
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code {

    [Parameter] public TaskHeaderDto? Item { get; set; }

    [Parameter] public bool ChangePending { get; set; }

    [Parameter] public EventCallback<bool> ChangePendingChanged { get; set; }

    private List<CronParameters>? _crons = new();
    SimpleGrid<CronEditView>? _grid;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations = default!;
    private List<CronEditView> _elements = new();
    DialogOptions _dialogOptions = new() { CloseOnEscapeKey = false, BackdropClick = false, MaxWidth = MaxWidth.Large, FullWidth = true };
    private bool _disable;

    private class CronEditView
    {
        public string? CronValue { get; set; }
        public string? CronDescription { get; set; }
    }


    protected override void OnParametersSet()
    {
        UpdateElements();
        _translations = AppService.GetGridTranslations();
    }

    private void UpdateElements()
    {
        if (string.IsNullOrEmpty(Item?.CronParameters)) return;
        _crons = JsonSerializer.Deserialize<List<CronParameters>>(Item.CronParameters);
        PopulateCronsItems();
    }

    private void PopulateCronsItems()
    {
        _elements.Clear();
        foreach (var t in _crons!)
        {
            _elements.Add(new CronEditView { CronValue = t?.CronValue, CronDescription = ExpressionDescriptor.GetDescription(t?.CronValue) });
        }
    }

    private async Task OpenEditDialog(CronEditView value)
    {
        _disable = true;
        var dataBefore = value.CronValue;
        var parameters = new DialogParameters { ["Value"] = value.CronValue };

        var dialog = await DialogService.ShowAsync<_cronEditorDialog>(Localizer.Get("Configure the scheduler"), parameters, _dialogOptions);
        var feedback = await dialog.Result;

        if (!feedback.Canceled)
        {
            if (_crons != null)
            {
                var toUpdate = _crons.FirstOrDefault(a => a?.CronValue == dataBefore);
                if (toUpdate != null) toUpdate.CronValue = feedback.Data.ToString();
            }

            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            SetItemCronValues();
            UpdateElements();
        }

        _disable = false;
    }

    private async Task OpenDeleteDialog(CronEditView value)
    {
        _disable = true;
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, BackdropClick = true, MaxWidth = MaxWidth.ExtraSmall };
        var result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Are you sure?"), Localizer.Get("Delete"), null, Localizer.Get("Cancel"), dialogOptions);

        if (result != null)
        {
            var toRemove = _crons!.FirstOrDefault(a => a.CronValue == value.CronValue);
            _crons?.Remove(toRemove!);
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            SetItemCronValues();
            UpdateElements();
        }

        _disable = false;
    }


    private async Task OpenCreateDialog()
    {
        string? value = null;
        var parameters = new DialogParameters { ["Value"] = value };

        var dialog = await DialogService.ShowAsync<_cronEditorDialog>(Localizer.Get("Configure the scheduler"), parameters, _dialogOptions);
        var feedback = await dialog.Result;

        if (!feedback.Canceled)
        {
            _crons?.Add(new CronParameters { CronValue = feedback.Data.ToString() });
            ChangePending = true;
            await ChangePendingChanged.InvokeAsync(ChangePending);
            SetItemCronValues();
            UpdateElements();
        }
    }

    private void SetItemCronValues()
    {
        Item!.CronParameters = JsonSerializer.Serialize(_crons);
    }

    private void OnRefresh()
    {
        StateHasChanged();
    }

    private void RemoveFilters()
    {
        _grid?.RefreshDataAsync();
        UpdateElements();
    }

}