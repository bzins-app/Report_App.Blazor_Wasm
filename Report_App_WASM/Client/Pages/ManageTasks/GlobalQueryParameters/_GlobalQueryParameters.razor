@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="text-transform: none" Size="Size.Small" OnClick="OpenCreateDialog">@Localizer.Get("Add a parameter")</MudButton>
    </MudCardContent>
    <MudCardContent>
        <MudGrid Spacing="1">
            @foreach (var element in _parameters)
            {
                <MudItem xs="6" md="3" xl="2">
                    <MudCard Elevation="4" Style="height:290px">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@element.ParameterIdentifier</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Default" OnClick="() => Delete(element)" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudField Label="@Localizer.Get("Data type")"> @Localizer.Get(element.ValueType.ToString())</MudField>
                            @if (element.ValueType is QueryCommandParameterValueType.Date or QueryCommandParameterValueType.DateTime)
                            {
                                <MudSelect @bind-Value="element.DateOption" Label="@Localizer.Get("Select a date calculation")" @bind-Value:after="UpdateParameters">
                                    @foreach (CalulatedDateOption item in Enum.GetValues(typeof(CalulatedDateOption)))
                                    {
                                        <MudSelectItem Value="@item">@Localizer.Get(item.ToString())</MudSelectItem>
                                    }
                                </MudSelect>
                                @if (element.DateOption is CalulatedDateOption.Now or CalulatedDateOption.LastRun)
                                {
                                    var valueDateTime = (element.DateOption == CalulatedDateOption.Now ? DateTime.Now : Item.LastRunDateTime ?? DateTime.Now);
                                    <MudField Label="@Localizer.Get("Calculated date")">@(element.ValueType == QueryCommandParameterValueType.Date ? valueDateTime.Date : valueDateTime)</MudField>
                                }
                                else
                                {
                                    <MudField Label="@Localizer.Get("Calculated date")">@(element.ValueType == QueryCommandParameterValueType.Date ? element.DateOption.GetCalculateDateTime().Date.ToString("d") : element.DateOption.GetCalculateDateTime())</MudField>
                                }
                            }
                            @if (element.ValueType == QueryCommandParameterValueType.String)
                            {
                                <MudTextField Label="@Localizer.Get("Enter value")" @bind-Value="@element.value" TextChanged="UpdateParameters" Text="@element.value" />
                            }
                            @if (element.ValueType == QueryCommandParameterValueType.Number)
                            {
                                <MudNumericField Label="@Localizer.Get("Enter value")" @bind-Value="@(element.value)" TextChanged="UpdateParameters" Text="@element.value" />
                            }
                            <MudSwitch @bind-Checked="element.Required" Label="@Localizer.Get("Required")" Color="Color.Primary" @onclick="UpdateParameters" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {

    [Parameter] public TaskHeaderDTO Item { get; set; }
    [Parameter] public EventCallback<bool> ChangePendingChanged { get; set; }
    [Parameter] public bool ChangePending { get; set; }
    List<QueryCommandParameter> _parameters = new();

    protected override void OnInitialized()
    {
        if (Item.QueryParameters != "[]" && !string.IsNullOrEmpty(Item.QueryParameters))
        {
            _parameters = JsonSerializer.Deserialize<List<QueryCommandParameter>>(Item.QueryParameters);
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = DialogService.Show<_QueryParametersFormDialog>("Create");
        var feedback = await dialog.Result;

        if (!feedback.Cancelled)
        {
            _parameters.Add((QueryCommandParameter)feedback.Data);
            await UpdateParameters();
        }
    }

    private async Task Delete(QueryCommandParameter element)
    {
        DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, DisableBackdropClick = false, MaxWidth = MaxWidth.ExtraSmall };
        bool? result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Are you sure?"), Localizer.Get("Delete"), null, cancelText: Localizer.Get("Cancel"), dialogOptions);

        if (result != null)
        {
            _parameters.Remove(_parameters.FirstOrDefault(a => a.ParameterIdentifier == element.ParameterIdentifier));
            await UpdateParameters();
        }

    }

    private async Task UpdateParameters()
    {
        Item.QueryParameters = JsonSerializer.Serialize(_parameters);
        ChangePending = true;
        await ChangePendingChanged.InvokeAsync(ChangePending);
    }
}
