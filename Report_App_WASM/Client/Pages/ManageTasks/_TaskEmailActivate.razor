@inject ISnackbar Snackbar
@inject HttpClient Http

<MudSwitch Checked="@Item.SendByEmail" Color="Color.Primary" ThumbIcon="@(Item.SendByEmail ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(Item.SendByEmail ? Color.Success : Color.Error)" CheckedChanged="(bool value) => ChangeStatusAsync(value)"/>

@code {

    [Parameter]
    public TaskHeaderDto Item { get; set; } = new();

    private async Task ChangeStatusAsync(bool value)
    {
        Item.SendByEmail = value;

        if (Item.SendByEmail)
        {
            var uri = $"{ApiControllers.ApplicationParametersApi}CheckTaskHeaderEmail?taskHeaderId={Item.TaskHeaderId}";
            var emailsConfigured = await Http.GetFromJsonAsync<bool>(uri);
            if (!emailsConfigured)
            {
                Item.SendByEmail = false;
                Snackbar.Add(Item.TaskName + " " + Localizer.Get("cannot be enabled because no email recipients have been entered"), Severity.Error);
                return;
            }
        }
        await DataService.PostValues(new TaskActivatePayload { Activate = Item.IsActivated, TaskHeaderId = Item.TaskHeaderId }, "TaskSendByEmail");

        Snackbar.Add(Item.SendByEmail ? Item.TaskName + " " + Localizer.Get("send by email") + " " + Localizer.Get("enabled") : Item.TaskName + " " + Localizer.Get("send by email") + " " + Localizer.Get("disabled"), Item.SendByEmail ? Severity.Success : Severity.Normal);
    }

}