@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudSwitch Checked="@Item.SendByEmail" Color="Color.Primary" ThumbIcon="@(Item.SendByEmail ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(Item.SendByEmail ? Color.Success : Color.Error)" CheckedChanged="((bool value)=>ChangeStatusAsync(value))"/>

    @code {
	[Parameter]
	public TaskHeaderDTO Item { get; set; }

	private async Task ChangeStatusAsync(bool value)
	{
		Item.SendByEmail = value;

		if (Item.SendByEmail )
		{
			//if (await _context.TaskEmailRecipient.Where(a => a.TaskHeader.TaskHeaderId == Item.TaskHeaderId).Select(a => a.Email).AsNoTrackingWithIdentityResolution().FirstOrDefaultAsync()=="[]"||!await _context.TaskEmailRecipient.Where(a => a.TaskHeader.TaskHeaderId == Item.TaskHeaderId).AnyAsync())
			//{
			//	Item.SendByEmail = false;
   //             Snackbar.Add( Item.TaskName + " " + localizer.Get("cannot be enabled because no email recipients have been entered"), Severity.Error);

			//	return;
			//}
		}
		await dataService.PostValues(Item, "TaskHeaderUpdate");

		Snackbar.Add(Item.SendByEmail ? Item.TaskName + " " +localizer.Get("send by email") +" "  +localizer.Get("enabled") : Item.TaskName + " " +localizer.Get("send by email") +" "+ localizer.Get("disabled"), Item.SendByEmail ? Severity.Success : Severity.Normal);
	}
    }