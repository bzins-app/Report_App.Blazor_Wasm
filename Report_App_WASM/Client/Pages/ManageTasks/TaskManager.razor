@page "/TaskManager/{TypeTask}"
@page "/TasksPerActivity/{TypeTask}/{ActivityId:int}/{ActivityName}"
@inject NavigationManager UriHelper
@implements IAsyncDisposable
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin, Supervisor")]

<PageTitle>@_pageTitle</PageTitle>

<ErrorBoundary>
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <MudText Typo="Typo.subtitle1" Color="Color.Error">
            <b>@Localizer.Get("An error has occurred"): @_errorMessage</b>
        </MudText>
    }
    <MudCard Elevation="6">
        <MudCardHeader>
            <MudText Typo="Typo.h6">@_pageTitle</MudText>
            <MudSpacer/>
            <MudStack Row="true">
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OpenCreateDialog)"
                               Icon="@Icons.Material.Filled.Add" Title="@Localizer.Get("Add")"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(OnRefresh)"
                               Icon="@Icons.Material.Filled.Refresh" Title="@Localizer.Get("Refresh")" Disabled="@_rendering"/>
                <MudIconButton DisableElevation Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(RemoveFilters)"
                               Icon="@Icons.Material.Filled.FilterAltOff" Title="@Localizer.Get("Remove filters")" Disabled="@_rendering"/>
            </MudStack>
        </MudCardHeader>
        <MudCardContent>
            <div style="overflow: auto">
                <SimpleGrid ItemsProvider="@_itemsProvider" BuildInFilter="true" Pagination="@_pagination" FieldsContent="@_translations" @ref="_grid">
                    <TemplateColumn>
                        <MudStack Row="true">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => EditItem(context)" Title="@Localizer.Get("Edit")"/>
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="() => OpenDeleteDialog(context)" Title="@Localizer.Get("Delete")"/>
                        </MudStack>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.TaskHeaderId)" Title="Task Id" Sortable="true"/>
                    @if (string.IsNullOrEmpty(ActivityName))
                    {
                        <PropertyColumn Property="@(p => p.ActivityName)" Title="@Localizer.Get("Activity")" Sortable="true"/>
                    }
                    <PropertyColumn Property="@(p => p.TaskName)" Title="@Localizer.Get("Report title")" Sortable="true"/>
                    @if (TypeTask == TaskType.Report.ToString())
                    {
                        <PropertyColumn Property="@(p => p.TypeFileName)" Title="@Localizer.Get("Type of file")" Sortable="true"/>
                    }
                    <TemplateColumn Title="@Localizer.Get("Run manually")">
                        <_TaskRunForm Item="context"/>
                    </TemplateColumn>
                    <TemplateColumn Title="@Localizer.Get("Is activated?")">
                        <_TaskActivate Item="context"/>
                    </TemplateColumn>
                    @if (TypeTask == TaskType.Report.ToString())
                    {
                        <TemplateColumn Title="@Localizer.Get("Send by email?")">
                            <_TaskEmailActivate Item="context"/>
                        </TemplateColumn>
                    }
                    @if (TypeTask == TaskType.Report.ToString())
                    {
                        <PropertyColumn Property="@(p => p.FileDepositPathConfigurationId)" Title="@Localizer.Get("File deposit path")" Sortable="true"/>
                        <TemplateColumn Title="@Localizer.Get("Create file manually")">
                            <_TaskDropFileForm Item="context"/>
                        </TemplateColumn>
                        <PropertyColumn Property="@(p => p.ReportsRetentionInDays)" Title="@Localizer.Get("Archiving duration in days")" Sortable="true"/>
                    }
                    <TemplateColumn Title="@Localizer.Get("Duplicate")">
                        <CascadingValue Value="@_grid">
                            <_TaskDuplicateForm Item="context"/>
                        </CascadingValue>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.CreateDateTime)" Title="@Localizer.Get("Created at")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p.CreateUser)" Title="@Localizer.Get("Created by")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p.ModDateTime)" Title="@Localizer.Get("Updated at")" Sortable="true"/>
                    <PropertyColumn Property="@(p => p.ModificationUser)" Title="@Localizer.Get("Updated by")" Sortable="true"/>
                </SimpleGrid>
            </div>
            <Paginator Value="@_pagination" FieldsContent="@_translations"/>
        </MudCardContent>
    </MudCard>
</ErrorBoundary>

@code
{
#nullable enable
    [Parameter]
    public string TypeTask { get; set; } = default!;

    [Parameter]
    public string ActivityName { get; set; } = default!;

    [Parameter]
    public int? ActivityId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }


    GridItemsProvider<TaskHeaderDto>? _itemsProvider;
    PaginationState _pagination = new() { ItemsPerPage = 10 };
    SimpleGridFieldsContent? _translations;
    SimpleGrid<TaskHeaderDto>? _grid;
    private string? _errorMessage;
    private string? _pageTitle;
    private bool _rendering;

    bool _empty;


    protected override async Task OnParametersSetAsync()
    {
        _pageTitle = TypeTask == TaskType.Report.ToString() ? Localizer.Get("Manage reports") : TypeTask == TaskType.Alert.ToString() ? Localizer.Get("Manage alerts") : Localizer.Get("Manage data transfers");
        if (!string.IsNullOrEmpty(ActivityName))
        {
            _pageTitle += ": " + ActivityName;
        }
        if (Page.HasValue && PageSize.HasValue)
        {
            _pagination.ItemsPerPage = PageSize.Value;
            await _pagination.SetCurrentPageIndexAsync(Page.Value);
        }

    // This could use HttpClient's GetFromJsonAsync, or be a direct database query, etc.
        if (_empty)
        {
            _itemsProvider = async req =>
            {
                _rendering = true;
                var response = await GetRemoteData(req);
                _rendering = false;
                if (response is null)
                {
                    _empty = true;
                    return GridItemsProviderResult.From(Array.Empty<TaskHeaderDto>(), 0);
                }

                _empty = !response.Value!.Any();
                return GridItemsProviderResult.From(response.Value!, response.Count);
            };
        }
    }


    protected override void OnInitialized()
    {
        _itemsProvider = async req =>
        {
            _rendering = true;
            var response = await GetRemoteData(req);
            _rendering = false;
            if (response is null)
            {
                _empty = true;
                return GridItemsProviderResult.From(Array.Empty<TaskHeaderDto>(), 0);
            }
            if (response.Value!.Any())
            {
                _empty = false;
            }
            else
            {
                _empty = true;
            }
            return GridItemsProviderResult.From(response.Value!, response.Count);
        };
        _translations = AppService.GetGridTranslations();
    }

    private async Task<ApiResponse<TaskHeaderDto>?> GetRemoteData(GridItemsProviderRequest<TaskHeaderDto> req)
    {
    // Convert the current data request and filter criteria into an HTTP request to the remote endpoint
    // You can have as many filter criteria as you want as long as you can express this to the underlying data provider
        var odataSort = _grid?.GetODataSortValues();
        var odataPagination = _grid?.GetODataPaginationValues();
        var odataFilters = _grid?.GetODataFilterValues();
        var url = "odata/TaskHeader?";


        var customFilters = $"TypeName eq '{TypeTask}'";
        if (ActivityId.HasValue)
        {
            customFilters += $" and  IdActivity eq {ActivityId.Value} ";
        }

        url += "$count=true";
        if (!string.IsNullOrEmpty(odataPagination))
        {
            url += "&" + odataPagination;
        }
        if (!string.IsNullOrEmpty(odataSort))
        {
            url += "&" + odataSort;
        }
        if (!string.IsNullOrEmpty(odataFilters))
        {
            url += "&" + odataFilters + " and " + customFilters;
        }
        else
        {
            url += "&$filter=" + customFilters;
        }

        try
        {
            return await DataService.GetODataValues<TaskHeaderDto>(url, req.CancellationToken);
        }
        catch
        {
    // Unfortunately this HTTP API returns a 404 if there were no results, so we have to handle that separately
            return null;
        }
    }

    private async Task OnRefresh()
    {
        _rendering = true;
        if (_grid != null) await _grid.RefreshDataAsync();
        _rendering = false;
    }

    private async Task RemoveFilters()
    {
        _rendering = true;
        if (_grid != null) await _grid.RemoveFilters();
        _rendering = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (_grid != null) await _grid.DisposeAsync();
        GC.SuppressFinalize(this);
    }

    private async Task OpenDeleteDialog(TaskHeaderDto value)
    {
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Delete };

        var dialog = await DialogService.ShowAsync<_TaskManagerFormDialog>("Delete", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Canceled)
        {
            _errorMessage = string.Empty;
    // await DataService.PostValues(new ApiBackgrounWorkerdPayload { Activate = false, Value = value.TaskHeaderId }, "ActivatePerTask", ApiControllers.BackgroudWorkerApi);
            var result = await DataService.PostValues(value, "TaskHeaderDelete");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object deleted"), Severity.Success);
                await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }

    private void EditItem(TaskHeaderDto value)
    {
        var uri = UriHelper.GetUriWithQueryParameters("TaskEdit/" + value.TaskHeaderId,
            new Dictionary<string, object>
            {
                ["FromTaskManager"] = !string.IsNullOrEmpty(ActivityName),
                ["Page"] = _pagination.CurrentPageIndex,
                ["PageSize"] = _pagination.ItemsPerPage
            }!);
        UriHelper.NavigateTo(uri);
    }

    private async Task OpenCreateDialog()
    {
        var value = new TaskHeaderDto { TypeName = TypeTask, Type = TypeTask == TaskType.Report.ToString() ? TaskType.Report : TypeTask == TaskType.DataTransfer.ToString() ? TaskType.DataTransfer : TaskType.Alert };
        var parameters = new DialogParameters { ["Item"] = value, ["Action"] = CrudAction.Create };

        var dialog = await DialogService.ShowAsync<_TaskManagerFormDialog>("Create", parameters);
        var feedback = await dialog.Result;

        if (!feedback.Canceled)
        {
            _errorMessage = string.Empty;
            var result = await DataService.PostValues(value, "TaskHeaderInsert");
            if (result.Success)
            {
                Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
                if (result.KeyValue > 0)
                {
                    UriHelper.NavigateTo("TaskEdit/" + result.KeyValue);
                }
                else
                    await OnRefresh();
            }
            else
            {
                Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
                _errorMessage = result.Message;
            }
        }
    }
    }

