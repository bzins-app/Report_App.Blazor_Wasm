@page "/TaskEdit/{TaskHeaderId:int}"
@using MudBlazor.Utilities
@using Report_App_WASM.Shared.Extensions
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager UriHelper
@attribute [Authorize(Roles = "Admin, Supervisor")]

<MudCard Elevation="6">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
                @Localizer.Get(Item.Type switch
                {
                TaskType.Report => "Edit a report",
                TaskType.Alert => "Edit an alert",
                _ => "Edit a data transfer"
                })
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="Back">@Localizer.Get("Back")</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Warning" OnClick="UpdateValues" Disabled="!_changesToSave">@Localizer.Get("Restore")</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChangeAsync" Disabled="!_changesToSave">@Localizer.Get("Save changes")</MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudText Typo="Typo.subtitle1" Color="Color.Error">@Localizer.Get("An error has occurred"): @_errorMessage</MudText>
        }
        <MudGrid>
            <MudItem sm="12" lg="8">
                <MudGrid>
                    <MudItem sm="12" lg="6">
                        <MudForm FieldChanged="FormChanged">
                            <MudTextField @bind-Value="Item.TaskName" Label="@Localizer.Get("Name")" InputType="InputType.Text" />
                            @if (_activities.Any())
                            {
                                <MudSelect T="int" Label="@Localizer.Get("Activity name")" @bind-Value="@_activityId"
                                       AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="OnSelectedItemChangedHandler"
                                       Required>
                                    @foreach (var value in _activities)
                                    {
                                        <MudSelectItem Value="@value.ActivityId">@value.ActivityName</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            @if (Item.Type == TaskType.Report)
                            {
                                <MudNumericField @bind-Value="Item.ReportsRetentionInDays" Label="@Localizer.Get("Archiving duration in days")" />
                            }
                            @if (_typeDbTask != TypeDb.Db2)
                            {
                                <MudSwitch @bind-Checked="Item.UseGlobalQueryParameters" Label="@Localizer.Get("Use global query parameters?")" Color="Color.Primary" />
                            }
                        </MudForm>
                    </MudItem>
                    <MudItem sm="12" lg="6">
                        <MudForm FieldChanged="FormChanged">
                            @if (Item.Type == TaskType.Report)
                            {
                                <MudSelect Label="@Localizer.Get("Type of file")" @bind-Value="@Item.TypeFile"
                                       AnchorOrigin="Origin.BottomCenter"
                                       Required>
                                    @foreach (FileType item in Enum.GetValues(typeof(FileType)))
                                    {
                                        <MudSelectItem Value="@item">@item</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSwitch @bind-Checked="_param.UseASpecificFileNaming" Label="@Localizer.Get("Use a specific file naming?")" Color="Color.Primary" />
                                @if (Item.TypeFile == FileType.Excel)
                                {
                                    <MudSwitch @bind-Checked="_param.UseAnExcelTemplate" Label="@Localizer.Get("Use an excel template?")" Color="Color.Primary" />
                                }
                                @if (Item.TypeFile == FileType.Csv)
                                {
                                    <MudTextField @bind-Value="_param.Delimiter" Label="@Localizer.Get("CSV delimiter")" />
                                }
                                @if (Item.TypeFile == FileType.Excel && _param.UseASpecificFileNaming)
                                {
                                    <MudTextField @bind-Value="_param.ExcelFileName" Label="@Localizer.Get("File name")" />
                                    <p> * @Localizer.Get("Only when query does not require a separate file")</p>
                                }
                                @if (Item.TypeFile == FileType.Excel && _param.UseAnExcelTemplate)
                                {
                                    <MudTextField @bind-Value="_param.ExcelTemplatePath" Label="@Localizer.Get("Excel Template")" Required ReadOnly />
                                    @if (!_loading)
                                    {
                                        <MudLink Class="d-flex pa-4" Href="@("/" + _param.ExcelTemplatePath)" Disabled="@string.IsNullOrEmpty(_param.ExcelTemplatePath)">@Localizer.Get("Download")</MudLink>
                                        <MudFileUpload T="IBrowserFile" FilesChanged="OnUploadTemplate" Accept=".xlsx">
                                            <ButtonTemplate>
                                                <MudFab HtmlTag="label" Class="pa-4"
                                            Color="Color.Primary"
                                            Icon="@Icons.Material.Filled.UploadFile"
                                            Label="@Localizer.Get("Select an excel template")"
                                            Size="Size.Small"
                                            Style="text-transform: none"
                                            for="@context" />
                                            </ButtonTemplate>
                                        </MudFileUpload>
                                    }
                                    @if (_loading)
                                    {
                                        <MudButton Disabled="@_loading" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                                            @if (_loading)
                                            {
                                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                                <MudText Class="ms-2">@Localizer.Get("Processing")</MudText>
                                            }
                                        </MudButton>
                                    }
                                }
                                @if (Item.TypeFile == FileType.Excel)
                                {
                                    <MudTextField @bind-Value="_param.ValidationSheetText" Label="@Localizer.Get("Information sheet text")" />
                                }
                            }
                            @if (Item.Type == TaskType.Alert)
                            {
                                <MudSwitch @bind-Checked="_param.AlertOccurenceByTime" Label="@Localizer.Get("Manage by duration?")" Color="Color.Primary" />
                                <p>@Localizer.Get("In order to avoid a too large flow of alerts, you can set the behavior in case of multiple occurrences. Either it can be based on a duration between occurrences or by number or by number of occurrences")</p>
                                <MudNumericField @bind-Value="_param.NbrOfMinutesBeforeResendAlertEmail" Label="@Localizer.Get("Nbr of minutes between occcurences")" />
                                <MudNumericField @bind-Value="_param.NbrOfOccurencesBeforeResendAlertEmail" Label="@Localizer.Get("Nbr of occurences before to resubmit alert")" />
                            }
                            @if (Item.Type == TaskType.Report && _depositPathSelect.Any())
                            {
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <MudSelect T="int" Label="@Localizer.Get("Report deposit path")" @bind-Value="@Item.FileDepositPathConfigurationId"
                                               AnchorOrigin="Origin.BottomCenter"
                                               Clearable>
                                            @if (Item.FileDepositPathConfigurationId == 0)
                                            {
                                                <MudSelectItem Value="@Item.FileDepositPathConfigurationId">@Localizer.Get("Empty")</MudSelectItem>
                                            }
                                            @foreach (var value in _depositPathSelect)
                                            {
                                                <MudSelectItem Value="@value.Id">@value.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </Authorized>
                                    <NotAuthorized>
                                        <MudSelect T="int" Label="@Localizer.Get("Report deposit path")" @bind-Value="@Item.FileDepositPathConfigurationId" Disabled="true"
                                               AnchorOrigin="Origin.BottomCenter"
                                               Clearable>
                                            @if (Item.FileDepositPathConfigurationId == 0)
                                            {
                                                <MudSelectItem Value="@Item.FileDepositPathConfigurationId">@Localizer.Get("Empty")</MudSelectItem>
                                            }
                                            @foreach (var value in _depositPathSelect)
                                            {
                                                <MudSelectItem Value="@value.Id">@value.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </NotAuthorized>
                                </AuthorizeView>
                            }
                        </MudForm>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem sm="12" lg="4">
                <MudForm FieldChanged="FormChanged">
                    <MudTextField T="string" Label="@Localizer.Get("Comment")" Variant="Variant.Filled" @bind-Text="@Item.Comment" Lines="3" />
                </MudForm>
                <MudField Variant="Variant.Text" InnerPadding="false">Tags</MudField>
                <MudPaper Class="pa-2" Outlined="true">
                    <MudChipSet AllClosable="true" OnClose="RemoveTag">
                        @foreach (var value in _tags)
                        {
                            <MudChip Text="@value"></MudChip>
                        }
                    </MudChipSet>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OpenPopOver">@Localizer.Get("Add")</MudIconButton>
                    <MudPopover Open="@_openPopOver" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4">
                        <div class="d-flex flex-column">
                            <MudAutocomplete @bind-Value="_tagValue" Variant="Variant.Outlined" Margin="Margin.Dense" CoerceText="true" CoerceValue="true" SearchFunc="@SearchTags" />
                            <MudButton OnClick="@ClosePopOver" Variant="Variant.Text" Color="Color.Error">@Localizer.Get("Close")</MudButton>
                        </div>
                    </MudPopover>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true"
                 ApplyEffectsToContainer="true" Class="mt-8">
            <MudTabPanel Text="@Localizer.Get("Queries")">
                <Report_App_WASM.Client.Pages.ManageTasks.TaskDetailsComponents._TaskDetails Item="@Item" itemToDelete="@_itemToDelete" @bind-changePending="@_changesToSave" />
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Global query parameters")" Disabled="@(!Item.UseGlobalQueryParameters)">
                <Report_App_WASM.Client.Pages.ManageTasks.GlobalQueryParameters._GlobalQueryParameters Item="@Item" @bind-changePending="@_changesToSave" />
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Scheduler")">
                <Report_App_WASM.Client.Pages.ManageTasks.TaskSchedulerComponents._TaskSchedulers Item="@Item" @bind-changePending="@_changesToSave" />
            </MudTabPanel>
            <MudTabPanel Text="@Localizer.Get("Manage recipients")">
                <Report_App_WASM.Client.Pages.ManageTasks.TaskEmailRecipients._TaskRecipients Item="@Item" @bind-changePending="@_changesToSave" />
            </MudTabPanel>
        </MudTabs>
    </MudCardContent>
</MudCard>

@code {

    [Parameter]
    public int TaskHeaderId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool? FromTaskManager { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    private TaskHeaderDto Item { get; set; } = new();
    private List<SelectItemActivitiesInfo> _activities = new();
    private List<SelectItem> _depositPathSelect = new();
    private int _activityId;
    private string? _errorMessage;
    private readonly List<TaskDetailDto> _itemToDelete = new();
    private TaskHeaderParameters? _param = new();

    private bool _loading;
    private TypeDb _typeDbTask;

    private bool _changesToSave;
    List<string> _tags = new();
    List<string> _AvailableTags = new();
    private bool _openPopOver;
    string _tagValue = string.Empty;

    JsonSerializerOptions _jsonOpt = new()
        {
            PropertyNameCaseInsensitive = true
        };

    protected override async Task OnInitializedAsync()
    {
        await UpdateValues();
    }

    private async Task UpdateValues()
    {
        var uriAction = $"GetTaskHeader?taskHeaderId={TaskHeaderId}";
        Item = await DataService.GetUniqueValue(Item, uriAction);
        _activityId = Item.Activity.ActivityId;
        _activities = await DataService.GetValues<SelectItemActivitiesInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);

        var controllerActionDepositPath = "DepositPathInfo";
        _depositPathSelect = await DataService.GetValues<SelectItem>(controllerActionDepositPath, ApiControllers.ApplicationParametersApi);

        if (!string.IsNullOrEmpty(Item.TaskHeaderParameters) && Item.TaskHeaderParameters != "[]")
        {
            _param = JsonSerializer.Deserialize<TaskHeaderParameters>(Item.TaskHeaderParameters, _jsonOpt);
        }

        if (!string.IsNullOrEmpty(Item.Tags) && Item.Tags != "[]")
        {
            _tags = JsonSerializer.Deserialize<List<string>>(Item.Tags, _jsonOpt)!;
        }

        if (Item.FileDepositPathConfigurationId != 0)
        {
            _depositPathSelect.Where(a => a.Id == Item.FileDepositPathConfigurationId).Select(a => a.Name).FirstOrDefault();
        }

        var uri = $"GetActivityDbConnection?ActivityId={Item.Activity.ActivityId}";
        var response = await DataService.GetValues<ActivityDbConnectionDto>(uri);
        if (response.Any())
        {
            _typeDbTask = response.Select(a => a.TypeDb).First();
        }

        var uriTags = $"{ApiControllers.CrudDataApi}GetTagsTasks?type={Item.Type}";
        _AvailableTags = (await Http.GetFromJsonAsync<List<string>>(uriTags))!;

        _itemToDelete.Clear();
        _changesToSave = false;
    }

    private async Task SaveChangeAsync()
    {
        try
        {
            _errorMessage = "";
            if (Item.IsActivated)
            {
                await DataService.PostValues(new ApiBackgrounWorkerdPayload { Activate = false, Value = Item.TaskHeaderId }, "ActivatePerTask", ApiControllers.BackgroudWorkerApi);
            }
            if (!Item.TaskEmailRecipients.Any())
            {
                var recipients = new TaskEmailRecipientDto { TaskHeader = Item, Email = "[]", Message = Item.Type == TaskType.Alert ? "<p>Hello,</p><p>An alert has been raised:</p><p>{0}</p>" : "<p>Hello,</p><p>Please find enclosed, the report.</p><p>&nbsp;</p>" };
                Item.TaskEmailRecipients = new List<TaskEmailRecipientDto> { recipients };
            }
            Item.TaskHeaderParameters = JsonSerializer.Serialize(_param);
            Item.Tags = JsonSerializer.Serialize(_tags);

            if (Item.CronParameters == "[]" || string.IsNullOrEmpty(Item.CronParameters))
            {
                Item.IsActivated = false;
            }
            if (Item.QueryParameters == "[]" || string.IsNullOrEmpty(Item.QueryParameters))
            {
                Item.UseGlobalQueryParameters = false;
            }

            await DataService.PostValues(Item, "TaskHeaderUpdate");

            foreach (var detail in _itemToDelete)
            {
                await DataService.PostValues(detail, "TaskDetailDelete");
            }

            if (Item.IsActivated)
            {
                await DataService.PostValues(new ApiBackgrounWorkerdPayload { Activate = true, Value = Item.TaskHeaderId }, "ActivatePerTask", ApiControllers.BackgroudWorkerApi);
            }
            await UpdateValues();
            Snackbar.Add(Localizer.Get("Object updated"), Severity.Success);
        }
        catch (Exception e)
        {
            Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
            _errorMessage = e.Message;
        }
    }

    private async Task Back()
    {
        string uri;
        if (FromTaskManager.HasValue && FromTaskManager.Value)
        {
            uri = UriHelper.GetUriWithQueryParameters($"TasksPerActivity/{Item.Type.ToString()}/{Item.Activity.ActivityId}/{Item.Activity.ActivityName}",
                new Dictionary<string, object>
                    {
                        ["Page"] = Page!,
                        ["PageSize"] = PageSize!
                    }!);
        }
        else
        {
            uri = UriHelper.GetUriWithQueryParameters("TaskManager/" + Item.Type,
                new Dictionary<string, object>
                    {
                        ["Page"] = Page!,
                        ["PageSize"] = PageSize!
                    }!);
        }

        if (_changesToSave)
        {
            DialogOptions dialogOptions = new() { CloseOnEscapeKey = true, DisableBackdropClick = false, MaxWidth = MaxWidth.ExtraSmall };
            var result = await DialogService.ShowMessageBox(Localizer.Get("Warning"), Localizer.Get("Are you sure?") + Environment.NewLine + Localizer.Get("There are changes pending"), Localizer.Get("Confirm"), null, Localizer.Get("Cancel"), dialogOptions);

            if (result != null)
            {
                UriHelper.NavigateTo(uri);
            }
            return;
        }
        UriHelper.NavigateTo(uri);
    }

    private void OnSelectedItemChangedHandler(IEnumerable<int> actId)
    {
        _activityId = actId.FirstOrDefault();
        Item.Activity = new ActivityDto { ActivityId = _activities.Where(a => a.ActivityId == _activityId).Select(a => a.ActivityId).FirstOrDefault(), ActivityName = _activities.Where(a => a.ActivityId == _activityId).Select(a => a.ActivityName).FirstOrDefault() };
        Item.IdActivity = Item.Activity.ActivityId;
        if (Item.Activity.ActivityName != null) Item.ActivityName = Item.Activity.ActivityName;
    }

    private async Task OnUploadTemplate(IBrowserFile file)
    {
        _loading = true;
        var result = await DataService.PostFile(file);
        if (result.Success)
        {
            _param!.ExcelTemplatePath = result.Message;
        }
        _changesToSave = true;
        _loading = false;
    }

    private void FormChanged(FormFieldChangedEventArgs e)
    {
        _changesToSave = true;
    }

    private void RemoveTag(MudChip chip)
    {
        _tags.Remove(chip.Text);
        _changesToSave = true;
    }

    private void OpenPopOver()
    {
        _tagValue = string.Empty;
        _openPopOver = true;
    }

    private void ClosePopOver()
    {
        if (!string.IsNullOrEmpty(_tagValue))
        {
            _tags.Add(_tagValue.RemoveSpecialCharacters().RemoveDiacritics());
            _changesToSave = true;
        }
        _tagValue = string.Empty;
        _openPopOver = false;
    }

    private async Task<IEnumerable<string>> SearchTags(string value)
    {
        await Task.Delay(1);
        if (string.IsNullOrEmpty(value))
            return Array.Empty<string>();
        return _AvailableTags.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

}