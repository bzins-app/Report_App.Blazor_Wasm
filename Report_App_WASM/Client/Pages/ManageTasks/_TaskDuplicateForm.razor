@*@using Report_App_BlazorServ.Services.BackgroundWorker
@using Report_App_BlazorServ.Models
@inject ApplicationDbContext _context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudIconButton OnClick="(()=>OpenRunConfirmationComponent())" Icon="@Icons.Material.Filled.ContentCopy" />

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @Localizer.Get("Confirm duplication")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="name" Label="@Localizer.Get("Report title")" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CancelDialog">@Localizer.Get("Cancel")</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmDuplicate" Class="px-10">@Localizer.Get("Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public SimpleGrid<TaskHeaderDTO> dataGrid { get; set; }
    [Parameter]
    public TaskHeaderDTO Item { get; set; }
    string name = "";

    private bool visible;
    private DialogOptions dialogOptions = new() { CloseOnEscapeKey=false, DisableBackdropClick=true ,MaxWidth = MaxWidth.Small, FullWidth = true };
    private void OpenRunConfirmationComponent()
    {
        name = Item.TaskName + " (Copy)";
        visible = true;
    }

    private async Task ConfirmDuplicate()
    {
        visible = false;
        await Clone(name, Item.TaskHeaderId);
        Snackbar.Add(Localizer.Get("Object added"), Severity.Success);
        await dataGrid.RefreshDataAsync();
        

    }
    void CancelDialog() => visible = false;

    private async Task Clone(string name, int taskHeaderId)
    {
        try
        {
            var DbItem = await _context.TaskHeader.Include(a => a.Activity).Include(a => a.TaskDetails).Include(a => a.TaskEmailRecipients).Where(a => a.TaskHeaderId == taskHeaderId).AsNoTracking().FirstOrDefaultAsync();
            if (DbItem != null)
            {
                DbItem.TaskName = name;
                DbItem.IsActivated = false;
                DbItem.SendByEmail = false;
                DbItem.FileDepositPathConfigurationId = 0;
                DbItem.TaskHeaderId = 0;

                if (DbItem.TaskDetails != null)
                {
                    foreach (var t in DbItem.TaskDetails)
                    {
                        t.TaskDetailId = 0;
                    }
                }
                if (DbItem.TaskEmailRecipients != null)
                {
                    foreach (var t in DbItem.TaskEmailRecipients)
                    {
                        t.TaskEmailRecipientId = 0;
                    }
                }
                _context.Update(DbItem);
                await _context.SaveChangesAsync((await AuthenticationStateProvider.GetAuthenticationStateAsync())?.User?.Identity?.Name); 
                _context.Entry(DbItem).State = EntityState.Detached;
            }

        }
        catch (Exception e)
        {
            Snackbar.Add(Localizer.Get("An error has occurred"), Severity.Error);
            Snackbar.Add(e.Message, Severity.Error);
        }
    }


}*@