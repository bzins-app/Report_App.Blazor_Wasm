@inject HttpClient Http
@inject ISnackbar Snackbar

<MudSwitch Checked="@Item.IsActivated" Color="Color.Primary" ThumbIcon="@(Item.IsActivated ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(Item.IsActivated ? Color.Success : Color.Error)" CheckedChanged="(bool value) => ChangeStatusAsync(value)"/>

@code {

    [Parameter]
    public TaskHeaderDto Item { get; set; } = new();

    private async Task ChangeStatusAsync(bool value)
    {
        Item.IsActivated = value;

        if (Item.IsActivated)
        {
            var activityActivated = (await DataService.GetValues<SelectItemActivitiesInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi)).Where(a => a.ActivityId == Item.IdActivity).Select(a => new { a.IsActivated, a.ActivityName }).FirstOrDefault();
            if (!activityActivated!.IsActivated)
            {
                Item.IsActivated = false;
                Snackbar.Add(Item.TaskName + " " + Localizer.Get("cannot be enabled because the related activity is not enabled") + " :" + activityActivated.ActivityName, Severity.Error);

                return;
            }

            if (string.IsNullOrEmpty(Item.CronParameters) || Item.CronParameters == "[]")
            {
                Item.IsActivated = false;
                Snackbar.Add(Item.TaskName + " " + Localizer.Get("cannot be enabled because the scheduler value is not defined"), Severity.Error);

                return;
            }
            if (Item.Type == TaskType.Alert)
            {
                var uriEmails = $"{ApiControllers.ApplicationParametersApi}CheckTaskHeaderEmail?taskHeaderId={Item.TaskHeaderId}";
                var emailsConfigured = await Http.GetFromJsonAsync<bool>(uriEmails);
                if (!emailsConfigured)
                {
                    Item.SendByEmail = false;
                    Snackbar.Add(Item.TaskName + " " + Localizer.Get("cannot be enabled because no email recipients have been entered"), Severity.Error);
                    return;
                }
            }
            var uri = $"{ApiControllers.CrudDataApi}GetTaskHasDetails?taskHeaderId={Item.TaskHeaderId}";
            var reportDetailsExists = await Http.GetFromJsonAsync<bool>(uri);
            if (!reportDetailsExists)
            {
                Item.IsActivated = false;
                Snackbar.Add(Item.TaskName + " " + Localizer.Get("cannot be enabled because no query is attached to this report"), Severity.Error);

                return;
            }
        }

        await DataService.PostValues(new ApiBackgrounWorkerdPayload { Activate = Item.IsActivated, Value = Item.TaskHeaderId }, "ActivatePerTask", ApiControllers.BackgroudWorkerApi);
        await DataService.PostValues(new TaskActivatePayload { Activate = Item.IsActivated, TaskHeaderId = Item.TaskHeaderId }, "TaskActivate");

        Snackbar.Add(Item.IsActivated ? Item.TaskName + " " + Localizer.Get("enabled") : Item.TaskName + " " + Localizer.Get("disabled"), Item.IsActivated ? Severity.Success : Severity.Normal);
    }

}