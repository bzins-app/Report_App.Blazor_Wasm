@using ApexCharts

<MudTable Items="TaskLogs.GroupBy(e => e.ActivityName).OrderByDescending(a=>a.Sum(a=>a.NbrTasks))" Height="460px" Virtualize="true" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="true" FixedHeader="true" Dense="true">
    <HeaderContent>
        <MudTh>@localizer.Get("Activity")</MudTh>
        <MudTh>@localizer.Get("Nbr of tasks over the last 10 days")</MudTh>
        <MudTh>@localizer.Get("Type of tasks")</MudTh>
        <MudTh>@localizer.Get("Tasks per day")</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Key</MudTd>
        <MudTd>@context.Sum(a=>a.NbrTasks)</MudTd>
        <MudTd>
            <ApexChart TItem="TaksLogsValues"
                       Width="30"
                       Height="30"
                       Options="GetPieOptions()">

                <ApexPointSeries TItem="TaksLogsValues"
                                 Items="context.ToList()"
                                 Name="@localizer.Get("Type of tasks")"
                                 SeriesType="SeriesType.Pie"
                                 XValue="@(e => e.TypeTask)"
                                 YAggregate="@(e => e.Sum(a=>a.NbrTasks))" />

            </ApexChart>
        </MudTd>
        <MudTd>
            <ApexChart TItem="TaksLogsValues"
                       XAxisType="XAxisType.Datetime"
                       Options="GetBarOptions()"
                       Height="30"
                       Width="150">

                <ApexPointSeries TItem="TaksLogsValues"
                                 Items="context.ToList()"
                                 Name="@localizer.Get("Tasks per day")"
                                 SeriesType="SeriesType.Bar"
                                 XValue="@(e => e.Date.ToLocalTime())"
                                 YAggregate="@(e => e.Count())"
                                 OrderBy="e=>e.X" />
            </ApexChart>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<TaksLogsValues>? TaskLogs = new();

    protected override async Task OnInitializedAsync()
    {
        TaskLogs = await dataService.GetValues<TaksLogsValues>("TasksLogs", "api/Dashboard/");
    }

    private ApexChartOptions<TaksLogsValues> GetPieOptions()
    {
        var options = new ApexChartOptions<TaksLogsValues>();
        options.Stroke = new Stroke { Width = 1 };
        options.Tooltip = new Tooltip { Fixed = new TooltipFixed { Enabled = false } };
        options.Chart = new Chart { Sparkline = new ChartSparkline(), Animations = new Animations { Enabled = false } };
        options.PlotOptions = new PlotOptions { Pie = new PlotOptionsPie { ExpandOnClick = false } };
        return options;
    }

    private ApexChartOptions<TaksLogsValues> GetBarOptions()
    {
        var options = new ApexChartOptions<TaksLogsValues>();
        options.Chart = new Chart { Sparkline = new ChartSparkline(), Animations = new Animations { Enabled = false } };
        options.PlotOptions = new PlotOptions { Bar = new PlotOptionsBar { ColumnWidth = "85%", } };
        options.Tooltip = new Tooltip { X = new TooltipX { Format = @" dd \ MM \ yyyy" } };

        return options;
    }

    //private ApexChartOptions<ApplicationLogTaskDTO> GetBarOptionsHour()
    //{
    //	var options = new ApexCharts.ApexChartOptions<ApplicationLogTaskDTO>();
    //	options.Chart = new Chart { Sparkline = new ChartSparkline(),Animations= new Animations {Enabled=false} };
    //	options.PlotOptions = new PlotOptions { Bar = new PlotOptionsBar { ColumnWidth = "85%", } };
    //	options.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"HH:MIN" } };

    //	return options;
    //}

}
