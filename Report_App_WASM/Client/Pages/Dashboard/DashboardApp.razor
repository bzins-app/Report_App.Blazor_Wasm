@page "/DashboardApp"
@inherits ComponentBase
@using Report_App_WASM.Shared.Dashboard
@implements IDisposable
@attribute [Authorize]

<PageTitle>@Localizer.Get("Application Dashboard")</PageTitle>
<MudStack Row="true">
    <MudSpacer/>
    <MudText>@Localizer.Get("Latest update") @DateTime.Now</MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Cached" Size="Size.Small" Color="Color.Primary" OnClick="@(async () => await RefreshData())" Style="animation: rotation 8s infinite linear"/>
</MudStack>

    <MudGrid Spacing="2">
        <MudItem xs="12" sm="6" md="4" lg="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-2" Style="height: 100px;">
                <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Class="mx-4" Style="height: 50px; width: 50px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Nbr of tasks")</MudText>
                    <MudText Typo="Typo.h5">@_metrics.NbrOfTasksExcecutedToday.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Today")</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-2" Style="height: 100px;">
                <MudIcon Icon="@Icons.Material.Filled.Wysiwyg" Class="mx-4" Style="height: 50px; width: 50px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Reports")</MudText>
                    <MudText Typo="Typo.h5">@_metrics.NbrOfActiveReports.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Active")</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-2" Style="height: 100px;">
                <MudIcon Icon="@Icons.Material.Filled.Report" Class="mx-4" Style="height: 50px; width: 50px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Alerts")</MudText>
                    <MudText Typo="Typo.h5">@_metrics.NbrOfActiveAlerts.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Active")</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-2" Style="height: 100px;">
                <MudIcon Icon="@Icons.Material.Filled.Inbox" Class="mx-4" Style="height: 50px; width: 50px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Data transfer")</MudText>
                    <MudText Typo="Typo.h5">@_metrics.NbrOfActiveDataTransfer.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Active")</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-2" Style="height: 100px;">
                <MudIcon Icon="@Icons.Material.Filled.QueryStats" Class="mx-4" Style="height: 50px; width: 50px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Nbr of queries")</MudText>
                    <MudText Typo="Typo.h5">@_metrics.NbrOfActiveQueries.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Active")</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row align-center pa-2" Style="height: 100px;">
                <MudIcon Icon="@Icons.Material.Filled.ReportProblem" Color="Color.Error" Class="mx-4" Style="height: 50px; width: 50px;"></MudIcon>
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Tasks in error")</MudText>
                    <MudText Typo="Typo.h5" Color="Color.Error">@_metrics.NbrTasksInError.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Today")</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="6">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudPaper Elevation="2" Class="pa-2" Style="height: 240px">
                        @if (_isLoading && _tasksLogs != null)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
                        }
                        else
                        {
                            @_tasksLogs
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6" lg="6">
                    <MudPaper Elevation="2" Class="pa-2" Style="height: 240px">
                        @if (_isLoading && _taskTypeLogs != null)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
                        }
                        else
                        {
                            @_taskTypeLogs
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12">
                    <MudPaper Elevation="2" Class="pa-2" Style="height: 220px;">
                        @if (_dbFetch is not null)
                        {
                            @_dbFetch
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="6">
            <MudPaper Elevation="2" Class="pa-2" Style="height: 100%; max-height: 484px; min-height: 200px;">
                @if (_isLoading && _sparkLines!=null)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
                }
                else
                {
                    @_sparkLines
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="6" xl="4">
            <MudPaper Elevation="2" Class="pa-2" Style="height: 250px;">
                @if (_storage is not null)
                {
                    @_storage
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" xl="2">
            <MudPaper Elevation="2" Class="d-flex flex-row pa-2">
                <div>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Nbr of files stored locally")</MudText>
                    <MudText Typo="Typo.h6">@_metrics.NbrOfFilesStored.ToString("N0")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary mb-n1">@Localizer.Get("Size of files stored locally")</MudText>
                    <MudText Typo="Typo.h6">@_metrics.SizeFilesStoredLocally.ToString("N2") MB</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="6" xl="3">
            <MudPaper Elevation="2" Class="pa-2" Style="height: 250px;">
                @if (_systemLogs is not null)
                {
                    @_systemLogs
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="6" xl="3">
            <MudPaper Elevation="2" Class="pa-2" Style="height: 250px;">
                @if (_emailLogs is not null)
                {
                    @_emailLogs
                }
            </MudPaper>
        </MudItem>
    </MudGrid>


@code {
    AppMetrics _metrics = new();
    private List<TaksLogsValues>? _taskLogs;
    private bool _isLoading = true;
    private RenderFragment? _emailLogs { get; set; }
    private RenderFragment? _systemLogs { get; set; }
    private RenderFragment? _storage { get; set; }
    private RenderFragment? _sparkLines { get; set; }
    private RenderFragment? _dbFetch { get; set; }
    private RenderFragment? _tasksLogs { get; set; }
    private RenderFragment? _taskTypeLogs { get; set; }
    PeriodicTimer minuteTimer;
    private bool _timerOn;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        StartTimer();
    }

    private async Task RefreshData()
    {
        _isLoading = true;
        _metrics = await DataService.GetUniqueValue(_metrics, "Metrics", ApiControllers.DashboardApi);
        _taskLogs = await DataService.GetValues<TaksLogsValues>("TasksLogs", ApiControllers.DashboardApi);

        _emailLogs = null;
        _systemLogs = null;
        _storage = null;
        _sparkLines = null;
        _dbFetch = null;
        _tasksLogs = null;
        _taskTypeLogs = null;
        StateHasChanged();

        _emailLogs  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._EmailLogsChart Height="100%"/>
        };

        _systemLogs  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._SystemLogsChart Height="100%"/>
        };

        _storage  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._StorageChart Height="100%"/>
        };

        _sparkLines  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._ActivitiesSparklines _taskLogs="_taskLogs"/>
        };

        _dbFetch  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._DbLinesFetchedChart Height="100%"/>
        };

        _tasksLogs  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._TasksLogsChart Height="100%" _taskLogs="_taskLogs"/>
        };

        _taskTypeLogs  = (__builder) =>
        {
            <Report_App_WASM.Client.Pages.Dashboard.Components._TasksTypeLogsChart Height="100%" _taskLogs="_taskLogs"/>
        };
        _isLoading = false;
        StateHasChanged();
    }

    private async Task SetTimer()
    {
        minuteTimer = new PeriodicTimer(new TimeSpan(0, 1, 0));

        while (await minuteTimer.WaitForNextTickAsync())
        {
            await RefreshData();
        }
    }

    private void StartTimer()
    {
        _ = Task.Run(async () =>
        {
            await SetTimer();
        });
    }

    public void Dispose()
    {
        minuteTimer.Dispose();
        GC.SuppressFinalize(this);
    }

}