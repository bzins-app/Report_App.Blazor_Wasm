@using Report_App_WASM.Shared.DatabasesConnectionParameters
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(Action switch { CrudAction.Update => Icons.Material.Filled.Edit, CrudAction.Create => Icons.Material.Filled.Create, _ => Icons.Material.Filled.DeleteForever })" Class="mr-3 mb-n1"/>
            @Localizer.Get(Action switch
                {
                    CrudAction.Update => "Edit",
                    CrudAction.Create => "Add",
                    _ => "Delete"
                })
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="1" Style="max-height: 80vh; overflow-x: hidden; overflow-y: auto; width: 100%">
            <MudForm Model="@Item" @ref="@_form">
                <MudTextField @bind-Value="Item!.ProviderName" Label="@Localizer.Get("Configuration name")" Required RequiredError="@Localizer.Get("Required")" Validation="CheckProviderName()" Disabled="Action == CrudAction.Delete"/>
                <MudSelect Label="@Localizer.Get("Type of Database")" @bind-Value="DbCon.TypeDb" AnchorOrigin="Origin.BottomCenter" Required RequiredError="@Localizer.Get("Please select a Db type")" Disabled="true">
                    @if (DbCon.TypeDb == 0)
                    {
                        <MudSelectItem Value="DbCon.TypeDb">@Localizer.Get("Please select a Db type")</MudSelectItem>
                    }
                    @foreach (TypeDb item in Enum.GetValues(typeof(TypeDb)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
                @if (DbCon.TypeDb > 0 && Action != CrudAction.Delete)
                {
                    <MudPaper Class="pa-2" Outlined="true">
                        @if (DbCon.TypeDb == TypeDb.SqlServer)
                        {
                            <MudStack Row="true">
                                <MudTextField @bind-Value="sqlServerParameters.Server" Label="Server" Required RequiredError="@Localizer.Get("Required")" Placeholder="IP or Hostname" Margin="Margin.Dense" />
                                <MudNumericField @bind-Value="sqlServerParameters.Port" Label="Port" Margin="Margin.Dense" />
                                <MudSwitch @bind-Value="sqlServerParameters.TrustedConnection" Label="@Localizer.Get("Use Windows authentication?")" Color="Color.Primary" Disabled="!_appConst!.WindowsEnv" />
                            </MudStack>
                            <MudStack Row="true">
                                <MudTextField @bind-Value="sqlServerParameters.UserId" Label="UserId" Required="true" Disabled="sqlServerParameters.TrustedConnection" autocomplete="new-userid" Margin="Margin.Dense" />
                                <MudTextField @bind-Value="sqlServerParameters.Password" Label="Password" Required="true" Disabled="sqlServerParameters.TrustedConnection" autocomplete="new-password" Margin="Margin.Dense"
                                InputType="InputType.Password" />
                            </MudStack>
                            <MudStack Row="true">
                                <MudTextField @bind-Value="sqlServerParameters.Database" Label="Database" Margin="Margin.Dense" />
                                <MudSelect Label="@Localizer.Get("Application intent read only?")" @bind-Value="@sqlServerParameters.ApplicationIntent" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense">
                                    @foreach (ApplicationIntent item in Enum.GetValues(typeof(ApplicationIntent)))
                                    {
                                        <MudSelectItem Value="@item">@item</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudStack>
                            <MudStack Row="true">
                                <MudCheckBox @bind-Value="sqlServerParameters.MultipleActiveResultSets" Label="MultipleActiveResultSets" />
                                <MudCheckBox @bind-Value="sqlServerParameters.TrustServerCertificate" Label="TrustServerCertificate" />
                                <MudCheckBox @bind-Value="sqlServerParameters.Encrypt" Label="Encrypt" />
                            </MudStack>
                            <MudStack Row="true">
                                <MudCheckBox @bind-Value="sqlServerParameters.Pooling" Label="Pooling?" />
                                <MudNumericField @bind-Value="sqlServerParameters.MinPoolSize" Label="MinPoolSize" Disabled="!sqlServerParameters.Pooling" Margin="Margin.Dense" />
                                <MudNumericField @bind-Value="sqlServerParameters.MaxPoolSize" Label="MaxPoolSize" Disabled="!sqlServerParameters.Pooling" Margin="Margin.Dense" />
                            </MudStack>
                            <MudStack Row="true">
                                <MudNumericField @bind-Value="sqlServerParameters.ConnectTimeout" Label="ConnectTimeout" Margin="Margin.Dense" />
                                <MudNumericField @bind-Value="sqlServerParameters.PacketSize" Label="PacketSize" Margin="Margin.Dense" />
                            </MudStack>
                        }
                        <MudStack Row="true">
                            <MudLoadingButton @bind-Loading="_loading" LoadingAdornment="Adornment.Start" LoadingCircularColor="Color.Primary" OnClick="OnClickConnectionTest" Variant="Variant.Filled" Color="Color.Primary">
                                <LoadingContent>
                                    <MudText>@Localizer.Get("Processing")</MudText>
                                </LoadingContent>
                                <ChildContent>
                                    <MudText>@Localizer.Get("Test Db connection")</MudText>
                                </ChildContent>
                            </MudLoadingButton>
                            <MudText>@Localizer.Get("Connection Feedback:") @_connectionTestResult</MudText>
                        </MudStack>
                    </MudPaper>
                    <MudPaper Class="pa-2" Outlined="true">
                        <MudStack Row="true">
                            <MudNumericField @bind-Value="DbCon.CommandTimeOut" Label="@Localizer.Get("Command timeout")" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense" />
                            <MudNumericField @bind-Value="DbCon.DataTransferMaxNbrofRowsFetched" Label="@(Localizer.Get("DataTransfer") + ": " + Localizer.Get("Max of rows fetched"))" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense" />
                        </MudStack>
                        @if (Action == CrudAction.Update)
                        {
                            <MudStack Row="true">
                                @if (_appConst is { ActivateTaskSchedulerModule: true })
                                {
                                    <MudNumericField @bind-Value="DbCon.TaskSchedulerMaxNbrofRowsFetched" Label="@(Localizer.Get("Task scheduler") + ": " + Localizer.Get("Max of rows fetched"))" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense" />
                                }
                                @if (_appConst is { ActivateAdHocQueriesModule: true })
                                {
                                    <MudNumericField @bind-Value="DbCon.AdHocQueriesMaxNbrofRowsFetched" Label="@(Localizer.Get("Ad hoc queries") + ": " + Localizer.Get("Max of rows fetched"))" Culture="@CultureInfo.CurrentCulture" Margin="Margin.Dense" />
                                }
                            </MudStack>
                        }
                    </MudPaper>
                }
            </MudForm>
            @if (Action == CrudAction.Delete)
            {
                <MudTextField @bind-Value="_deletionValidation" Label="@(Localizer.Get("Confirm the deletion by entering") + ": Validate")" Required RequiredError="@Localizer.Get("Required")" Margin="Margin.Dense" />
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Cancel">@Localizer.Get("Cancel")</MudButton>
        <MudButton Color="Action == CrudAction.Delete ? Color.Error : Color.Primary" OnClick="Validate">@Localizer.Get(Action == CrudAction.Delete ? "Delete" : "Validate")</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public DataProviderDto? Item { get; set; }

    [Parameter] public CrudAction Action { get; set; }
    private MudForm _form = default!;
    private string _deletionValidation = null!;
    private DatabaseConnectionDto DbCon { get; set; } = new() { TypeDb = TypeDb.SqlServer };
    private string _connectionTestResult = null!;
    private List<SelectItemDataproviderInfo> _activities = new();
    private ApplicationConstantsValues? _appConst;
    private bool _loading;
    SqlServerParameters sqlServerParameters = new SqlServerParameters();


    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async Task Validate()
    {
        if (Action == CrudAction.Delete)
        {
            if (_deletionValidation == "Validate")
            {
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
        else
        {
            await _form.Validate();
            if (_form.IsValid && DbCon.TypeDb > 0)
            {
                DbCon.DbConnectionParameters = DatabaseConnectionParametersManager.SerializeToJson(sqlServerParameters.SerializeMembersToJson(), TypeDb.SqlServer);
                DbCon.Password = sqlServerParameters.Password;
                DbCon.ConnectionLogin = sqlServerParameters.UserId;
                MudDialog?.Close(DialogResult.Ok(Item));
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _appConst = await AppService.GetApplicationConstantsValues();
        if (Item!.DatabaseConnection.Any())
        {
            DbCon = Item.DatabaseConnection.FirstOrDefault()!;
            if (DbCon.TypeDb == TypeDb.SqlServer && DbCon.DbConnectionParameters != "[]")
            {
                sqlServerParameters = (SqlServerParameters)DatabaseConnectionParametersManager.DeserializeFromJson(DbCon.DbConnectionParameters, DbCon.ConnectionLogin ?? string.Empty, DbCon.Password ?? string.Empty);
            }
        }
        else
        {
            Item.DatabaseConnection.Add(DbCon);
        }

        DbCon.TypeDb = TypeDb.SqlServer;
        _activities = await DataService.GetValues<SelectItemDataproviderInfo>("ActivitiesInfo", ApiControllers.ApplicationParametersApi);
        _loading = false;

    }

    private async Task OnClickConnectionTest()
    {
        _loading = true;
        await Task.Run(ConnectionTest);
        _loading = false;
    }

    private async Task ConnectionTest()
    {
        if (DbCon.TypeDb == TypeDb.SqlServer)
        {
            DbCon.DbConnectionParameters = DatabaseConnectionParametersManager.SerializeToJson(sqlServerParameters.SerializeMembersToJson(), TypeDb.SqlServer);
            DbCon.Password = sqlServerParameters.Password;
            DbCon.ConnectionLogin = sqlServerParameters.UserId;
        }

        var tryConn = new DatabaseConnectionDto
            {
                ConnectionLogin = DbCon.ConnectionLogin,
                TypeDb = DbCon.TypeDb,
                Password = DbCon.Password,
                DbConnectionParameters = DbCon.DbConnectionParameters,
            };
        var result = await DataService.PostValues(tryConn, "TestConnection", ApiControllers.RemoteDbApi);
        _connectionTestResult = result.Message ?? "Ok!";
    }

    private bool CheckProviderName()
    {
        if (string.IsNullOrEmpty(Item?.ProviderName))
        {
            return false;
        }

        Item.ProviderName = Item.ProviderName.Trim();
        if (_activities.Any(a => a.ProviderName?.ToLower() == Item.ProviderName.ToLower()))
        {
            Localizer.Get("Another activity with the same name already exists");
            return false;
        }

        return true;
    }

}